"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/x402-axios";
exports.ids = ["vendor-chunks/x402-axios"];
exports.modules = {

/***/ "(rsc)/./node_modules/x402-axios/dist/cjs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/x402-axios/dist/cjs/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  decodeXPaymentResponse: () => import_shared.decodeXPaymentResponse,\n  withPaymentInterceptor: () => withPaymentInterceptor\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_types = __webpack_require__(/*! x402/types */ \"(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/types/index.js\");\nvar import_types2 = __webpack_require__(/*! x402/types */ \"(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/types/index.js\");\nvar import_client = __webpack_require__(/*! x402/client */ \"(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/client/index.js\");\nvar import_shared = __webpack_require__(/*! x402/shared */ \"(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/shared/index.js\");\nfunction withPaymentInterceptor(axiosClient, walletClient, paymentRequirementsSelector = import_client.selectPaymentRequirements) {\n  axiosClient.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      var _a, _b, _c;\n      if (!error.response || error.response.status !== 402) {\n        return Promise.reject(error);\n      }\n      try {\n        const originalConfig = error.config;\n        if (!originalConfig || !originalConfig.headers) {\n          return Promise.reject(new Error(\"Missing axios request configuration\"));\n        }\n        if (originalConfig.__is402Retry) {\n          return Promise.reject(error);\n        }\n        const { x402Version, accepts } = error.response.data;\n        const parsed = accepts.map((x) => import_types.PaymentRequirementsSchema.parse(x));\n        const chainId = import_types2.evm.isSignerWallet(walletClient) ? (_a = walletClient.chain) == null ? void 0 : _a.id : import_types2.evm.isAccount(walletClient) ? (_c = (_b = walletClient.client) == null ? void 0 : _b.chain) == null ? void 0 : _c.id : void 0;\n        const selectedPaymentRequirements = paymentRequirementsSelector(\n          parsed,\n          chainId ? import_types.ChainIdToNetwork[chainId] : void 0,\n          \"exact\"\n        );\n        const paymentHeader = await (0, import_client.createPaymentHeader)(\n          walletClient,\n          x402Version,\n          selectedPaymentRequirements\n        );\n        originalConfig.__is402Retry = true;\n        originalConfig.headers[\"X-PAYMENT\"] = paymentHeader;\n        originalConfig.headers[\"Access-Control-Expose-Headers\"] = \"X-PAYMENT-RESPONSE\";\n        const secondResponse = await axiosClient.request(originalConfig);\n        return secondResponse;\n      } catch (paymentError) {\n        return Promise.reject(paymentError);\n      }\n    }\n  );\n  return axiosClient;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveDQwMi1heGlvcy9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsNkZBQVk7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsNkZBQVk7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsK0ZBQWE7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsK0ZBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBR0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL29uY2hhaW4tYWdlbnQvLi9ub2RlX21vZHVsZXMveDQwMi1heGlvcy9kaXN0L2Nqcy9pbmRleC5qcz83NWRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGRlY29kZVhQYXltZW50UmVzcG9uc2U6ICgpID0+IGltcG9ydF9zaGFyZWQuZGVjb2RlWFBheW1lbnRSZXNwb25zZSxcbiAgd2l0aFBheW1lbnRJbnRlcmNlcHRvcjogKCkgPT4gd2l0aFBheW1lbnRJbnRlcmNlcHRvclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIng0MDIvdHlwZXNcIik7XG52YXIgaW1wb3J0X3R5cGVzMiA9IHJlcXVpcmUoXCJ4NDAyL3R5cGVzXCIpO1xudmFyIGltcG9ydF9jbGllbnQgPSByZXF1aXJlKFwieDQwMi9jbGllbnRcIik7XG52YXIgaW1wb3J0X3NoYXJlZCA9IHJlcXVpcmUoXCJ4NDAyL3NoYXJlZFwiKTtcbmZ1bmN0aW9uIHdpdGhQYXltZW50SW50ZXJjZXB0b3IoYXhpb3NDbGllbnQsIHdhbGxldENsaWVudCwgcGF5bWVudFJlcXVpcmVtZW50c1NlbGVjdG9yID0gaW1wb3J0X2NsaWVudC5zZWxlY3RQYXltZW50UmVxdWlyZW1lbnRzKSB7XG4gIGF4aW9zQ2xpZW50LmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoXG4gICAgKHJlc3BvbnNlKSA9PiByZXNwb25zZSxcbiAgICBhc3luYyAoZXJyb3IpID0+IHtcbiAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgaWYgKCFlcnJvci5yZXNwb25zZSB8fCBlcnJvci5yZXNwb25zZS5zdGF0dXMgIT09IDQwMikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxDb25maWcgPSBlcnJvci5jb25maWc7XG4gICAgICAgIGlmICghb3JpZ2luYWxDb25maWcgfHwgIW9yaWdpbmFsQ29uZmlnLmhlYWRlcnMpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTWlzc2luZyBheGlvcyByZXF1ZXN0IGNvbmZpZ3VyYXRpb25cIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmlnaW5hbENvbmZpZy5fX2lzNDAyUmV0cnkpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgeDQwMlZlcnNpb24sIGFjY2VwdHMgfSA9IGVycm9yLnJlc3BvbnNlLmRhdGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IGFjY2VwdHMubWFwKCh4KSA9PiBpbXBvcnRfdHlwZXMuUGF5bWVudFJlcXVpcmVtZW50c1NjaGVtYS5wYXJzZSh4KSk7XG4gICAgICAgIGNvbnN0IGNoYWluSWQgPSBpbXBvcnRfdHlwZXMyLmV2bS5pc1NpZ25lcldhbGxldCh3YWxsZXRDbGllbnQpID8gKF9hID0gd2FsbGV0Q2xpZW50LmNoYWluKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaWQgOiBpbXBvcnRfdHlwZXMyLmV2bS5pc0FjY291bnQod2FsbGV0Q2xpZW50KSA/IChfYyA9IChfYiA9IHdhbGxldENsaWVudC5jbGllbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jaGFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmlkIDogdm9pZCAwO1xuICAgICAgICBjb25zdCBzZWxlY3RlZFBheW1lbnRSZXF1aXJlbWVudHMgPSBwYXltZW50UmVxdWlyZW1lbnRzU2VsZWN0b3IoXG4gICAgICAgICAgcGFyc2VkLFxuICAgICAgICAgIGNoYWluSWQgPyBpbXBvcnRfdHlwZXMuQ2hhaW5JZFRvTmV0d29ya1tjaGFpbklkXSA6IHZvaWQgMCxcbiAgICAgICAgICBcImV4YWN0XCJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGF5bWVudEhlYWRlciA9IGF3YWl0ICgwLCBpbXBvcnRfY2xpZW50LmNyZWF0ZVBheW1lbnRIZWFkZXIpKFxuICAgICAgICAgIHdhbGxldENsaWVudCxcbiAgICAgICAgICB4NDAyVmVyc2lvbixcbiAgICAgICAgICBzZWxlY3RlZFBheW1lbnRSZXF1aXJlbWVudHNcbiAgICAgICAgKTtcbiAgICAgICAgb3JpZ2luYWxDb25maWcuX19pczQwMlJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgb3JpZ2luYWxDb25maWcuaGVhZGVyc1tcIlgtUEFZTUVOVFwiXSA9IHBheW1lbnRIZWFkZXI7XG4gICAgICAgIG9yaWdpbmFsQ29uZmlnLmhlYWRlcnNbXCJBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVyc1wiXSA9IFwiWC1QQVlNRU5ULVJFU1BPTlNFXCI7XG4gICAgICAgIGNvbnN0IHNlY29uZFJlc3BvbnNlID0gYXdhaXQgYXhpb3NDbGllbnQucmVxdWVzdChvcmlnaW5hbENvbmZpZyk7XG4gICAgICAgIHJldHVybiBzZWNvbmRSZXNwb25zZTtcbiAgICAgIH0gY2F0Y2ggKHBheW1lbnRFcnJvcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocGF5bWVudEVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBheGlvc0NsaWVudDtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWNvZGVYUGF5bWVudFJlc3BvbnNlLFxuICB3aXRoUGF5bWVudEludGVyY2VwdG9yXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/x402-axios/dist/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/client/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/x402-axios/node_modules/x402/dist/cjs/client/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/client/index.ts\nvar client_exports = {};\n__export(client_exports, {\n  createPaymentHeader: () => createPaymentHeader2,\n  preparePaymentHeader: () => preparePaymentHeader2,\n  selectPaymentRequirements: () => selectPaymentRequirements,\n  signPaymentHeader: () => signPaymentHeader2\n});\nmodule.exports = __toCommonJS(client_exports);\n\n// src/types/shared/evm/config.ts\nvar config = {\n  \"84532\": {\n    usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n    usdcName: \"USDC\"\n  },\n  \"8453\": {\n    usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    usdcName: \"USDC\"\n  },\n  \"43113\": {\n    usdcAddress: \"0x5425890298aed601595a70AB815c96711a31Bc65\",\n    usdcName: \"USD Coin\"\n  },\n  \"43114\": {\n    usdcAddress: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    usdcName: \"USDC\"\n  },\n  \"4689\": {\n    usdcAddress: \"0xcdf79194c6c285077a58da47641d4dbe51f63542\",\n    usdcName: \"Bridged USDC\"\n  }\n};\n\n// src/types/shared/evm/eip3009.ts\nvar authorizationTypes = {\n  TransferWithAuthorization: [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"validAfter\", type: \"uint256\" },\n    { name: \"validBefore\", type: \"uint256\" },\n    { name: \"nonce\", type: \"bytes32\" }\n  ]\n};\n\n// src/types/shared/evm/wallet.ts\nvar import_viem = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nvar import_chains = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nvar import_accounts = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_cjs/accounts/index.js\");\nfunction isSignerWallet(wallet) {\n  return \"chain\" in wallet && \"transport\" in wallet;\n}\nfunction isAccount(wallet) {\n  return \"address\" in wallet && \"type\" in wallet;\n}\n\n// src/schemes/exact/evm/sign.ts\nvar import_viem2 = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\n\n// src/shared/base64.ts\nfunction safeBase64Encode(data) {\n  if (typeof globalThis !== \"undefined\" && typeof globalThis.btoa === \"function\") {\n    return globalThis.btoa(data);\n  }\n  return Buffer.from(data).toString(\"base64\");\n}\n\n// src/types/shared/money.ts\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar moneySchema = import_zod.z.union([import_zod.z.string().transform((x) => x.replace(/[^0-9.-]+/g, \"\")), import_zod.z.number()]).pipe(import_zod.z.coerce.number().min(1e-4).max(999999999));\n\n// src/types/shared/network.ts\nvar import_zod2 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar NetworkSchema = import_zod2.z.enum([\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n]);\nvar SupportedEVMNetworks = [\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n];\nvar EvmNetworkToChainId = /* @__PURE__ */ new Map([\n  [\"base-sepolia\", 84532],\n  [\"base\", 8453],\n  [\"avalanche-fuji\", 43113],\n  [\"avalanche\", 43114],\n  [\"iotex\", 4689]\n]);\nvar ChainIdToNetwork = Object.fromEntries(\n  SupportedEVMNetworks.map((network) => [EvmNetworkToChainId.get(network), network])\n);\n\n// src/shared/network.ts\nfunction getNetworkId(network) {\n  if (EvmNetworkToChainId.has(network)) {\n    return EvmNetworkToChainId.get(network);\n  }\n  throw new Error(`Unsupported network: ${network}`);\n}\n\n// src/types/verify/x402Specs.ts\nvar import_zod3 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar EvmMaxAtomicUnits = 18;\nvar EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\nvar MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\nvar HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\nvar EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\nvar schemes = [\"exact\"];\nvar x402Versions = [1];\nvar ErrorReasons = [\n  \"insufficient_funds\",\n  \"invalid_exact_evm_payload_authorization_valid_after\",\n  \"invalid_exact_evm_payload_authorization_valid_before\",\n  \"invalid_exact_evm_payload_authorization_value\",\n  \"invalid_exact_evm_payload_signature\",\n  \"invalid_exact_evm_payload_recipient_mismatch\",\n  \"invalid_network\",\n  \"invalid_payload\",\n  \"invalid_payment_requirements\",\n  \"invalid_scheme\",\n  \"unsupported_scheme\",\n  \"invalid_x402_version\",\n  \"invalid_transaction_state\",\n  \"unexpected_verify_error\",\n  \"unexpected_settle_error\"\n];\nvar isInteger = (value) => Number.isInteger(Number(value)) && Number(value) >= 0;\nvar hasMaxLength = (maxLength) => (value) => value.length <= maxLength;\nvar PaymentRequirementsSchema = import_zod3.z.object({\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  maxAmountRequired: import_zod3.z.string().refine(isInteger),\n  resource: import_zod3.z.string().url(),\n  description: import_zod3.z.string(),\n  mimeType: import_zod3.z.string(),\n  outputSchema: import_zod3.z.record(import_zod3.z.any()).optional(),\n  payTo: import_zod3.z.string().regex(MixedAddressRegex),\n  maxTimeoutSeconds: import_zod3.z.number().int(),\n  asset: import_zod3.z.string().regex(MixedAddressRegex),\n  extra: import_zod3.z.record(import_zod3.z.any()).optional()\n});\nvar ExactEvmPayloadAuthorizationSchema = import_zod3.z.object({\n  from: import_zod3.z.string().regex(EvmAddressRegex),\n  to: import_zod3.z.string().regex(EvmAddressRegex),\n  value: import_zod3.z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\n  validAfter: import_zod3.z.string().refine(isInteger),\n  validBefore: import_zod3.z.string().refine(isInteger),\n  nonce: import_zod3.z.string().regex(HexEncoded64ByteRegex)\n});\nvar ExactEvmPayloadSchema = import_zod3.z.object({\n  signature: import_zod3.z.string().regex(EvmSignatureRegex),\n  authorization: ExactEvmPayloadAuthorizationSchema\n});\nvar PaymentPayloadSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  payload: ExactEvmPayloadSchema\n});\nvar VerifyResponseSchema = import_zod3.z.object({\n  isValid: import_zod3.z.boolean(),\n  invalidReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional()\n});\nvar SettleResponseSchema = import_zod3.z.object({\n  success: import_zod3.z.boolean(),\n  errorReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional(),\n  transaction: import_zod3.z.string().regex(MixedAddressRegex),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindsResponseSchema = import_zod3.z.object({\n  kinds: import_zod3.z.array(SupportedPaymentKindSchema)\n});\n\n// src/types/verify/facilitator.ts\nvar import_zod4 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar facilitatorRequestSchema = import_zod4.z.object({\n  paymentHeader: import_zod4.z.string(),\n  paymentRequirements: PaymentRequirementsSchema\n});\n\n// src/shared/evm/usdc.ts\nfunction getUsdcAddressForChain(chainId) {\n  return config[chainId.toString()].usdcAddress;\n}\n\n// src/schemes/exact/evm/sign.ts\nasync function signAuthorization(walletClient, { from, to, value, validAfter, validBefore, nonce }, { asset, network, extra }) {\n  const chainId = getNetworkId(network);\n  const name = extra?.name;\n  const version = extra?.version;\n  const account = isSignerWallet(walletClient) ? walletClient.account : walletClient;\n  const data = {\n    account,\n    types: authorizationTypes,\n    domain: {\n      name,\n      version,\n      chainId,\n      verifyingContract: asset\n    },\n    primaryType: \"TransferWithAuthorization\",\n    message: {\n      from,\n      to,\n      value,\n      validAfter,\n      validBefore,\n      nonce\n    }\n  };\n  if (isSignerWallet(walletClient)) {\n    const signature = await walletClient.signTypedData(data);\n    return {\n      signature\n    };\n  } else if (isAccount(walletClient) && walletClient.signTypedData) {\n    const signature = await walletClient.signTypedData(data);\n    return {\n      signature\n    };\n  } else {\n    throw new Error(\"Invalid wallet client provided does not support signTypedData\");\n  }\n}\nfunction createNonce() {\n  const cryptoObj = typeof globalThis.crypto !== \"undefined\" && typeof globalThis.crypto.getRandomValues === \"function\" ? globalThis.crypto : (\n    // Dynamic require is needed to support node.js\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    (__webpack_require__(/*! crypto */ \"crypto\").webcrypto)\n  );\n  return (0, import_viem2.toHex)(cryptoObj.getRandomValues(new Uint8Array(32)));\n}\n\n// src/schemes/exact/evm/utils/paymentUtils.ts\nfunction encodePayment(payment) {\n  const safe = {\n    ...payment,\n    payload: {\n      ...payment.payload,\n      authorization: Object.fromEntries(\n        Object.entries(payment.payload.authorization).map(([key, value]) => [\n          key,\n          typeof value === \"bigint\" ? value.toString() : value\n        ])\n      )\n    }\n  };\n  return safeBase64Encode(JSON.stringify(safe));\n}\n\n// src/schemes/exact/evm/client.ts\nfunction preparePaymentHeader(from, x402Version, paymentRequirements) {\n  const nonce = createNonce();\n  const validAfter = BigInt(\n    Math.floor(Date.now() / 1e3) - 600\n    // 10 minutes before\n  ).toString();\n  const validBefore = BigInt(\n    Math.floor(Date.now() / 1e3 + paymentRequirements.maxTimeoutSeconds)\n  ).toString();\n  return {\n    x402Version,\n    scheme: paymentRequirements.scheme,\n    network: paymentRequirements.network,\n    payload: {\n      signature: void 0,\n      authorization: {\n        from,\n        to: paymentRequirements.payTo,\n        value: paymentRequirements.maxAmountRequired,\n        validAfter: validAfter.toString(),\n        validBefore: validBefore.toString(),\n        nonce\n      }\n    }\n  };\n}\nasync function signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader) {\n  const { signature } = await signAuthorization(\n    client,\n    unsignedPaymentHeader.payload.authorization,\n    paymentRequirements\n  );\n  return {\n    ...unsignedPaymentHeader,\n    payload: {\n      ...unsignedPaymentHeader.payload,\n      signature\n    }\n  };\n}\nasync function createPayment(client, x402Version, paymentRequirements) {\n  const from = isSignerWallet(client) ? client.account.address : client.address;\n  const unsignedPaymentHeader = preparePaymentHeader(from, x402Version, paymentRequirements);\n  return signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader);\n}\nasync function createPaymentHeader(client, x402Version, paymentRequirements) {\n  const payment = await createPayment(client, x402Version, paymentRequirements);\n  return encodePayment(payment);\n}\n\n// src/client/createPaymentHeader.ts\nasync function createPaymentHeader2(client, x402Version, paymentRequirements) {\n  if (paymentRequirements.scheme === \"exact\" && SupportedEVMNetworks.includes(paymentRequirements.network)) {\n    return await createPaymentHeader(client, x402Version, paymentRequirements);\n  }\n  throw new Error(\"Unsupported scheme\");\n}\n\n// src/client/preparePaymentHeader.ts\nfunction preparePaymentHeader2(from, x402Version, paymentRequirements) {\n  if (paymentRequirements.scheme === \"exact\" && SupportedEVMNetworks.includes(paymentRequirements.network)) {\n    return preparePaymentHeader(from, x402Version, paymentRequirements);\n  }\n  throw new Error(\"Unsupported scheme\");\n}\n\n// src/client/selectPaymentRequirements.ts\nfunction selectPaymentRequirements(paymentRequirements, network, scheme) {\n  paymentRequirements.sort((a, b) => {\n    if (a.network === \"base\" && b.network !== \"base\") {\n      return -1;\n    }\n    if (a.network !== \"base\" && b.network === \"base\") {\n      return 1;\n    }\n    return 0;\n  });\n  const broadlyAcceptedPaymentRequirements = paymentRequirements.filter((requirement) => {\n    const isExpectedScheme = !scheme || requirement.scheme === scheme;\n    const isExpectedChain = !network || network == requirement.network;\n    return isExpectedScheme && isExpectedChain;\n  });\n  const usdcRequirements = broadlyAcceptedPaymentRequirements.filter((requirement) => {\n    return requirement.asset === getUsdcAddressForChain(getNetworkId(requirement.network));\n  });\n  if (usdcRequirements.length > 0) {\n    return usdcRequirements[0];\n  }\n  if (broadlyAcceptedPaymentRequirements.length > 0) {\n    return broadlyAcceptedPaymentRequirements[0];\n  }\n  return paymentRequirements[0];\n}\n\n// src/client/signPaymentHeader.ts\nasync function signPaymentHeader2(client, paymentRequirements, unsignedPaymentHeader) {\n  if (paymentRequirements.scheme === \"exact\" && SupportedEVMNetworks.includes(paymentRequirements.network)) {\n    const signedPaymentHeader = await signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader);\n    return encodePayment(signedPaymentHeader);\n  }\n  throw new Error(\"Unsupported scheme\");\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/shared/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/x402-axios/node_modules/x402/dist/cjs/shared/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/shared/index.ts\nvar shared_exports = {};\n__export(shared_exports, {\n  computeRoutePatterns: () => computeRoutePatterns,\n  decodeXPaymentResponse: () => decodeXPaymentResponse,\n  findMatchingPaymentRequirements: () => findMatchingPaymentRequirements,\n  findMatchingRoute: () => findMatchingRoute,\n  getDefaultAsset: () => getDefaultAsset,\n  getNetworkId: () => getNetworkId,\n  getPaywallHtml: () => getPaywallHtml,\n  processPriceToAtomicAmount: () => processPriceToAtomicAmount,\n  safeBase64Decode: () => safeBase64Decode,\n  safeBase64Encode: () => safeBase64Encode,\n  toJsonSafe: () => toJsonSafe\n});\nmodule.exports = __toCommonJS(shared_exports);\n\n// src/shared/json.ts\nfunction toJsonSafe(data) {\n  if (typeof data !== \"object\") {\n    throw new Error(\"Data is not an object\");\n  }\n  function convert(value) {\n    if (value !== null && typeof value === \"object\" && !Array.isArray(value)) {\n      return Object.fromEntries(Object.entries(value).map(([key, val]) => [key, convert(val)]));\n    }\n    if (Array.isArray(value)) {\n      return value.map(convert);\n    }\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  }\n  return convert(data);\n}\n\n// src/paywall/gen/template.ts\nvar PAYWALL_TEMPLATE = '<!DOCTYPE html><html lang=\"en\"><head>\\n        <meta charset=\"UTF-8\">\\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <title>Payment Required</title><style>/* src/paywall/styles.css */\\n*,\\n*::before,\\n*::after {\\n  box-sizing: border-box;\\n  margin: 0;\\n  padding: 0;\\n}\\nbody {\\n  line-height: 1.5;\\n  -webkit-font-smoothing: antialiased;\\n}\\nimg,\\npicture,\\nvideo,\\ncanvas,\\nsvg {\\n  display: block;\\n  max-width: 100%;\\n}\\ninput,\\nbutton,\\ntextarea,\\nselect {\\n  font: inherit;\\n}\\np,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  overflow-wrap: break-word;\\n}\\n:root {\\n  --background-color: #f9fafb;\\n  --container-background-color: white;\\n  --text-color: #111827;\\n  --subtitle-text-color: #4b5563;\\n  --instructions-text-color: #4b5563;\\n  --details-background-color: #f9fafb;\\n  --details-text-color: #111827;\\n  --button-primary-color: #2563eb;\\n  --button-primary-hover-color: #1d4ed8;\\n  --button-secondary-color: #059669;\\n  --button-secondary-hover-color: #047857;\\n}\\nbody {\\n  min-height: 100vh;\\n  background-color: var(--background-color);\\n  font-family:\\n    system-ui,\\n    -apple-system,\\n    sans-serif;\\n}\\n.container {\\n  max-width: 32rem;\\n  margin: 4rem auto;\\n  padding: 1.5rem;\\n  background-color: var(--container-background-color);\\n  border-radius: 0.75rem;\\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\\n}\\n.header {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 1rem;\\n  margin-bottom: 2rem;\\n  align-items: center;\\n  text-align: center;\\n}\\n.title {\\n  font-size: 1.5rem;\\n  font-weight: 700;\\n  color: var(--text-color);\\n  margin-bottom: 0.5rem;\\n}\\n.subtitle {\\n  color: var(--subtitle-text-color);\\n}\\n.instructions {\\n  font-size: 0.9rem;\\n  color: var(--instructions-text-color);\\n  font-style: italic;\\n}\\n.content {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 1rem;\\n}\\n.button {\\n  width: 100%;\\n  padding: 0.5rem 1rem;\\n  border-radius: 0.5rem;\\n  font-weight: 600;\\n  border: none;\\n  cursor: pointer;\\n  transition: background-color 150ms;\\n}\\n.button:focus {\\n  outline: none;\\n}\\n.button-primary {\\n  background-color: var(--button-primary-color);\\n  color: white;\\n}\\n.button-primary:hover {\\n  background-color: var(--button-primary-hover-color);\\n}\\n.button-primary.connected,\\n.button-primary.connected:hover {\\n  opacity: 0.3;\\n  cursor: default;\\n}\\n.button-secondary {\\n  background-color: var(--button-secondary-color);\\n  color: white;\\n}\\n.button-secondary:hover {\\n  background-color: var(--button-secondary-hover-color);\\n}\\n.payment-details {\\n  padding: 1rem;\\n  margin-bottom: 1rem;\\n  background-color: var(--details-background-color);\\n  border-radius: 0.5rem;\\n}\\n.payment-row {\\n  display: flex;\\n  justify-content: space-between;\\n  font-size: 0.875rem;\\n  margin-bottom: 0.5rem;\\n}\\n.payment-row:last-child {\\n  margin-bottom: 0;\\n}\\n.payment-label {\\n  color: var(--details-text-color);\\n}\\n.payment-value {\\n  font-weight: 500;\\n}\\n.hidden {\\n  display: none;\\n}\\n.status {\\n  text-align: center;\\n  font-size: 0.875rem;\\n}\\n</style></head>\\n    <body>\\n        <div class=\"container\">\\n          <div class=\"header\">\\n            <h1 class=\"title\">Payment Required</h1>\\n            <p class=\"subtitle\" id=\"payment-description\">Loading payment details...</p>\\n            <p class=\"instructions\" id=\"instructions\" style=\"display: none;\">Need Base Sepolia USDC? <a href=\"https://faucet.circle.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Get some here.</a></p>\\n          </div>\\n\\n          <div class=\"content\">\\n            <div id=\"connect-section\">\\n              <button id=\"connect-wallet\" class=\"button button-primary\">\\n                  Connect wallet\\n              </button>\\n            </div>\\n\\n            <div id=\"payment-section\" class=\"hidden\">\\n              <div class=\"payment-details\">\\n                <div class=\"payment-row\">\\n                  <span class=\"payment-label\">Wallet:</span>\\n                  <span class=\"payment-value\" id=\"payment-account\">Loading...</span>\\n                </div>\\n                <div class=\"payment-row\">\\n                  <span class=\"payment-label\">Amount:</span>\\n                  <span class=\"payment-value\" id=\"payment-amount\">Loading...</span>\\n                </div>\\n                <div class=\"payment-row\">\\n                  <span class=\"payment-label\">Network:</span>\\n                  <span class=\"payment-value\" id=\"payment-network\">Loading...</span>\\n                </div>\\n              </div>\\n\\n              <button id=\"pay-button\" class=\"button button-secondary\">\\n                  Pay Now\\n              </button>\\n            </div>\\n            <div id=\"status\" class=\"status\"></div>\\n          </div>\\n        </div>\\n    \\n    \\n  <script type=\"module\">\"use strict\";\\n(() => {\\n  var __defProp = Object.defineProperty;\\n  var __getOwnPropNames = Object.getOwnPropertyNames;\\n  var __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\\n    get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\\n  }) : x)(function(x) {\\n    if (typeof require !== \"undefined\") return require.apply(this, arguments);\\n    throw Error(\\'Dynamic require of \"\\' + x + \\'\" is not supported\\');\\n  });\\n  var __esm = (fn, res) => function __init() {\\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\\n  };\\n  var __export = (target, all) => {\\n    for (var name in all)\\n      __defProp(target, name, { get: all[name], enumerable: true });\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/version.js\\n  var version;\\n  var init_version = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/version.js\"() {\\n      version = \"1.0.8\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/errors.js\\n  var BaseError;\\n  var init_errors = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/errors.js\"() {\\n      init_version();\\n      BaseError = class _BaseError extends Error {\\n        constructor(shortMessage, args = {}) {\\n          const details = args.cause instanceof _BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\\n          const docsPath8 = args.cause instanceof _BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\\n          const message = [\\n            shortMessage || \"An error occurred.\",\\n            \"\",\\n            ...args.metaMessages ? [...args.metaMessages, \"\"] : [],\\n            ...docsPath8 ? [`Docs: https://abitype.dev${docsPath8}`] : [],\\n            ...details ? [`Details: ${details}`] : [],\\n            `Version: abitype@${version}`\\n          ].join(\"\\\\n\");\\n          super(message);\\n          Object.defineProperty(this, \"details\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"docsPath\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"metaMessages\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"shortMessage\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"AbiTypeError\"\\n          });\\n          if (args.cause)\\n            this.cause = args.cause;\\n          this.details = details;\\n          this.docsPath = docsPath8;\\n          this.metaMessages = args.metaMessages;\\n          this.shortMessage = shortMessage;\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/regex.js\\n  function execTyped(regex, string) {\\n    const match = regex.exec(string);\\n    return match?.groups;\\n  }\\n  var bytesRegex, integerRegex, isTupleRegex;\\n  var init_regex = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/regex.js\"() {\\n      bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\\n      integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\\n      isTupleRegex = /^\\\\(.+?\\\\).*?$/;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js\\n  function formatAbiParameter(abiParameter) {\\n    let type = abiParameter.type;\\n    if (tupleRegex.test(abiParameter.type) && \"components\" in abiParameter) {\\n      type = \"(\";\\n      const length = abiParameter.components.length;\\n      for (let i = 0; i < length; i++) {\\n        const component = abiParameter.components[i];\\n        type += formatAbiParameter(component);\\n        if (i < length - 1)\\n          type += \", \";\\n      }\\n      const result = execTyped(tupleRegex, abiParameter.type);\\n      type += `)${result?.array ?? \"\"}`;\\n      return formatAbiParameter({\\n        ...abiParameter,\\n        type\\n      });\\n    }\\n    if (\"indexed\" in abiParameter && abiParameter.indexed)\\n      type = `${type} indexed`;\\n    if (abiParameter.name)\\n      return `${type} ${abiParameter.name}`;\\n    return type;\\n  }\\n  var tupleRegex;\\n  var init_formatAbiParameter = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js\"() {\\n      init_regex();\\n      tupleRegex = /^tuple(?<array>(\\\\[(\\\\d*)\\\\])*)$/;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js\\n  function formatAbiParameters(abiParameters) {\\n    let params = \"\";\\n    const length = abiParameters.length;\\n    for (let i = 0; i < length; i++) {\\n      const abiParameter = abiParameters[i];\\n      params += formatAbiParameter(abiParameter);\\n      if (i !== length - 1)\\n        params += \", \";\\n    }\\n    return params;\\n  }\\n  var init_formatAbiParameters = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js\"() {\\n      init_formatAbiParameter();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js\\n  function formatAbiItem(abiItem) {\\n    if (abiItem.type === \"function\")\\n      return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== \"nonpayable\" ? ` ${abiItem.stateMutability}` : \"\"}${abiItem.outputs?.length ? ` returns (${formatAbiParameters(abiItem.outputs)})` : \"\"}`;\\n    if (abiItem.type === \"event\")\\n      return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\\n    if (abiItem.type === \"error\")\\n      return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\\n    if (abiItem.type === \"constructor\")\\n      return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\\n    if (abiItem.type === \"fallback\")\\n      return `fallback() external${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\\n    return \"receive() external payable\";\\n  }\\n  var init_formatAbiItem = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js\"() {\\n      init_formatAbiParameters();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/signatures.js\\n  function isErrorSignature(signature) {\\n    return errorSignatureRegex.test(signature);\\n  }\\n  function execErrorSignature(signature) {\\n    return execTyped(errorSignatureRegex, signature);\\n  }\\n  function isEventSignature(signature) {\\n    return eventSignatureRegex.test(signature);\\n  }\\n  function execEventSignature(signature) {\\n    return execTyped(eventSignatureRegex, signature);\\n  }\\n  function isFunctionSignature(signature) {\\n    return functionSignatureRegex.test(signature);\\n  }\\n  function execFunctionSignature(signature) {\\n    return execTyped(functionSignatureRegex, signature);\\n  }\\n  function isStructSignature(signature) {\\n    return structSignatureRegex.test(signature);\\n  }\\n  function execStructSignature(signature) {\\n    return execTyped(structSignatureRegex, signature);\\n  }\\n  function isConstructorSignature(signature) {\\n    return constructorSignatureRegex.test(signature);\\n  }\\n  function execConstructorSignature(signature) {\\n    return execTyped(constructorSignatureRegex, signature);\\n  }\\n  function isFallbackSignature(signature) {\\n    return fallbackSignatureRegex.test(signature);\\n  }\\n  function execFallbackSignature(signature) {\\n    return execTyped(fallbackSignatureRegex, signature);\\n  }\\n  function isReceiveSignature(signature) {\\n    return receiveSignatureRegex.test(signature);\\n  }\\n  var errorSignatureRegex, eventSignatureRegex, functionSignatureRegex, structSignatureRegex, constructorSignatureRegex, fallbackSignatureRegex, receiveSignatureRegex, eventModifiers, functionModifiers;\\n  var init_signatures = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/signatures.js\"() {\\n      init_regex();\\n      errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\\\((?<parameters>.*?)\\\\)$/;\\n      eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\\\((?<parameters>.*?)\\\\)$/;\\n      functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\\\((?<parameters>.*?)\\\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\\\\s?\\\\((?<returns>.*?)\\\\))?$/;\\n      structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \\\\{(?<properties>.*?)\\\\}$/;\\n      constructorSignatureRegex = /^constructor\\\\((?<parameters>.*?)\\\\)(?:\\\\s(?<stateMutability>payable{1}))?$/;\\n      fallbackSignatureRegex = /^fallback\\\\(\\\\) external(?:\\\\s(?<stateMutability>payable{1}))?$/;\\n      receiveSignatureRegex = /^receive\\\\(\\\\) external payable$/;\\n      eventModifiers = /* @__PURE__ */ new Set([\"indexed\"]);\\n      functionModifiers = /* @__PURE__ */ new Set([\\n        \"calldata\",\\n        \"memory\",\\n        \"storage\"\\n      ]);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/abiItem.js\\n  var InvalidAbiItemError, UnknownTypeError, UnknownSolidityTypeError;\\n  var init_abiItem = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/abiItem.js\"() {\\n      init_errors();\\n      InvalidAbiItemError = class extends BaseError {\\n        constructor({ signature }) {\\n          super(\"Failed to parse ABI item.\", {\\n            details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\\n            docsPath: \"/api/human#parseabiitem-1\"\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidAbiItemError\"\\n          });\\n        }\\n      };\\n      UnknownTypeError = class extends BaseError {\\n        constructor({ type }) {\\n          super(\"Unknown type.\", {\\n            metaMessages: [\\n              `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\\n            ]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"UnknownTypeError\"\\n          });\\n        }\\n      };\\n      UnknownSolidityTypeError = class extends BaseError {\\n        constructor({ type }) {\\n          super(\"Unknown type.\", {\\n            metaMessages: [`Type \"${type}\" is not a valid ABI type.`]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"UnknownSolidityTypeError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js\\n  var InvalidParameterError, SolidityProtectedKeywordError, InvalidModifierError, InvalidFunctionModifierError, InvalidAbiTypeParameterError;\\n  var init_abiParameter = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js\"() {\\n      init_errors();\\n      InvalidParameterError = class extends BaseError {\\n        constructor({ param }) {\\n          super(\"Invalid ABI parameter.\", {\\n            details: param\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidParameterError\"\\n          });\\n        }\\n      };\\n      SolidityProtectedKeywordError = class extends BaseError {\\n        constructor({ param, name }) {\\n          super(\"Invalid ABI parameter.\", {\\n            details: param,\\n            metaMessages: [\\n              `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\\n            ]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"SolidityProtectedKeywordError\"\\n          });\\n        }\\n      };\\n      InvalidModifierError = class extends BaseError {\\n        constructor({ param, type, modifier }) {\\n          super(\"Invalid ABI parameter.\", {\\n            details: param,\\n            metaMessages: [\\n              `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`\\n            ]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidModifierError\"\\n          });\\n        }\\n      };\\n      InvalidFunctionModifierError = class extends BaseError {\\n        constructor({ param, type, modifier }) {\\n          super(\"Invalid ABI parameter.\", {\\n            details: param,\\n            metaMessages: [\\n              `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`,\\n              `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`\\n            ]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidFunctionModifierError\"\\n          });\\n        }\\n      };\\n      InvalidAbiTypeParameterError = class extends BaseError {\\n        constructor({ abiParameter }) {\\n          super(\"Invalid ABI parameter.\", {\\n            details: JSON.stringify(abiParameter, null, 2),\\n            metaMessages: [\"ABI parameter type is invalid.\"]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidAbiTypeParameterError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/signature.js\\n  var InvalidSignatureError, UnknownSignatureError, InvalidStructSignatureError;\\n  var init_signature = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/signature.js\"() {\\n      init_errors();\\n      InvalidSignatureError = class extends BaseError {\\n        constructor({ signature, type }) {\\n          super(`Invalid ${type} signature.`, {\\n            details: signature\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidSignatureError\"\\n          });\\n        }\\n      };\\n      UnknownSignatureError = class extends BaseError {\\n        constructor({ signature }) {\\n          super(\"Unknown signature.\", {\\n            details: signature\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"UnknownSignatureError\"\\n          });\\n        }\\n      };\\n      InvalidStructSignatureError = class extends BaseError {\\n        constructor({ signature }) {\\n          super(\"Invalid struct signature.\", {\\n            details: signature,\\n            metaMessages: [\"No properties exist.\"]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidStructSignatureError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/struct.js\\n  var CircularReferenceError;\\n  var init_struct = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/struct.js\"() {\\n      init_errors();\\n      CircularReferenceError = class extends BaseError {\\n        constructor({ type }) {\\n          super(\"Circular reference detected.\", {\\n            metaMessages: [`Struct \"${type}\" is a circular reference.`]\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"CircularReferenceError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js\\n  var InvalidParenthesisError;\\n  var init_splitParameters = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js\"() {\\n      init_errors();\\n      InvalidParenthesisError = class extends BaseError {\\n        constructor({ current, depth }) {\\n          super(\"Unbalanced parentheses.\", {\\n            metaMessages: [\\n              `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\\n            ],\\n            details: `Depth \"${depth}\"`\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"InvalidParenthesisError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/cache.js\\n  function getParameterCacheKey(param, type, structs) {\\n    let structKey = \"\";\\n    if (structs)\\n      for (const struct of Object.entries(structs)) {\\n        if (!struct)\\n          continue;\\n        let propertyKey = \"\";\\n        for (const property of struct[1]) {\\n          propertyKey += `[${property.type}${property.name ? `:${property.name}` : \"\"}]`;\\n        }\\n        structKey += `(${struct[0]}{${propertyKey}})`;\\n      }\\n    if (type)\\n      return `${type}:${param}${structKey}`;\\n    return param;\\n  }\\n  var parameterCache;\\n  var init_cache = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/cache.js\"() {\\n      parameterCache = /* @__PURE__ */ new Map([\\n        // Unnamed\\n        [\"address\", { type: \"address\" }],\\n        [\"bool\", { type: \"bool\" }],\\n        [\"bytes\", { type: \"bytes\" }],\\n        [\"bytes32\", { type: \"bytes32\" }],\\n        [\"int\", { type: \"int256\" }],\\n        [\"int256\", { type: \"int256\" }],\\n        [\"string\", { type: \"string\" }],\\n        [\"uint\", { type: \"uint256\" }],\\n        [\"uint8\", { type: \"uint8\" }],\\n        [\"uint16\", { type: \"uint16\" }],\\n        [\"uint24\", { type: \"uint24\" }],\\n        [\"uint32\", { type: \"uint32\" }],\\n        [\"uint64\", { type: \"uint64\" }],\\n        [\"uint96\", { type: \"uint96\" }],\\n        [\"uint112\", { type: \"uint112\" }],\\n        [\"uint160\", { type: \"uint160\" }],\\n        [\"uint192\", { type: \"uint192\" }],\\n        [\"uint256\", { type: \"uint256\" }],\\n        // Named\\n        [\"address owner\", { type: \"address\", name: \"owner\" }],\\n        [\"address to\", { type: \"address\", name: \"to\" }],\\n        [\"bool approved\", { type: \"bool\", name: \"approved\" }],\\n        [\"bytes _data\", { type: \"bytes\", name: \"_data\" }],\\n        [\"bytes data\", { type: \"bytes\", name: \"data\" }],\\n        [\"bytes signature\", { type: \"bytes\", name: \"signature\" }],\\n        [\"bytes32 hash\", { type: \"bytes32\", name: \"hash\" }],\\n        [\"bytes32 r\", { type: \"bytes32\", name: \"r\" }],\\n        [\"bytes32 root\", { type: \"bytes32\", name: \"root\" }],\\n        [\"bytes32 s\", { type: \"bytes32\", name: \"s\" }],\\n        [\"string name\", { type: \"string\", name: \"name\" }],\\n        [\"string symbol\", { type: \"string\", name: \"symbol\" }],\\n        [\"string tokenURI\", { type: \"string\", name: \"tokenURI\" }],\\n        [\"uint tokenId\", { type: \"uint256\", name: \"tokenId\" }],\\n        [\"uint8 v\", { type: \"uint8\", name: \"v\" }],\\n        [\"uint256 balance\", { type: \"uint256\", name: \"balance\" }],\\n        [\"uint256 tokenId\", { type: \"uint256\", name: \"tokenId\" }],\\n        [\"uint256 value\", { type: \"uint256\", name: \"value\" }],\\n        // Indexed\\n        [\\n          \"event:address indexed from\",\\n          { type: \"address\", name: \"from\", indexed: true }\\n        ],\\n        [\"event:address indexed to\", { type: \"address\", name: \"to\", indexed: true }],\\n        [\\n          \"event:uint indexed tokenId\",\\n          { type: \"uint256\", name: \"tokenId\", indexed: true }\\n        ],\\n        [\\n          \"event:uint256 indexed tokenId\",\\n          { type: \"uint256\", name: \"tokenId\", indexed: true }\\n        ]\\n      ]);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/utils.js\\n  function parseSignature(signature, structs = {}) {\\n    if (isFunctionSignature(signature))\\n      return parseFunctionSignature(signature, structs);\\n    if (isEventSignature(signature))\\n      return parseEventSignature(signature, structs);\\n    if (isErrorSignature(signature))\\n      return parseErrorSignature(signature, structs);\\n    if (isConstructorSignature(signature))\\n      return parseConstructorSignature(signature, structs);\\n    if (isFallbackSignature(signature))\\n      return parseFallbackSignature(signature);\\n    if (isReceiveSignature(signature))\\n      return {\\n        type: \"receive\",\\n        stateMutability: \"payable\"\\n      };\\n    throw new UnknownSignatureError({ signature });\\n  }\\n  function parseFunctionSignature(signature, structs = {}) {\\n    const match = execFunctionSignature(signature);\\n    if (!match)\\n      throw new InvalidSignatureError({ signature, type: \"function\" });\\n    const inputParams = splitParameters(match.parameters);\\n    const inputs = [];\\n    const inputLength = inputParams.length;\\n    for (let i = 0; i < inputLength; i++) {\\n      inputs.push(parseAbiParameter(inputParams[i], {\\n        modifiers: functionModifiers,\\n        structs,\\n        type: \"function\"\\n      }));\\n    }\\n    const outputs = [];\\n    if (match.returns) {\\n      const outputParams = splitParameters(match.returns);\\n      const outputLength = outputParams.length;\\n      for (let i = 0; i < outputLength; i++) {\\n        outputs.push(parseAbiParameter(outputParams[i], {\\n          modifiers: functionModifiers,\\n          structs,\\n          type: \"function\"\\n        }));\\n      }\\n    }\\n    return {\\n      name: match.name,\\n      type: \"function\",\\n      stateMutability: match.stateMutability ?? \"nonpayable\",\\n      inputs,\\n      outputs\\n    };\\n  }\\n  function parseEventSignature(signature, structs = {}) {\\n    const match = execEventSignature(signature);\\n    if (!match)\\n      throw new InvalidSignatureError({ signature, type: \"event\" });\\n    const params = splitParameters(match.parameters);\\n    const abiParameters = [];\\n    const length = params.length;\\n    for (let i = 0; i < length; i++)\\n      abiParameters.push(parseAbiParameter(params[i], {\\n        modifiers: eventModifiers,\\n        structs,\\n        type: \"event\"\\n      }));\\n    return { name: match.name, type: \"event\", inputs: abiParameters };\\n  }\\n  function parseErrorSignature(signature, structs = {}) {\\n    const match = execErrorSignature(signature);\\n    if (!match)\\n      throw new InvalidSignatureError({ signature, type: \"error\" });\\n    const params = splitParameters(match.parameters);\\n    const abiParameters = [];\\n    const length = params.length;\\n    for (let i = 0; i < length; i++)\\n      abiParameters.push(parseAbiParameter(params[i], { structs, type: \"error\" }));\\n    return { name: match.name, type: \"error\", inputs: abiParameters };\\n  }\\n  function parseConstructorSignature(signature, structs = {}) {\\n    const match = execConstructorSignature(signature);\\n    if (!match)\\n      throw new InvalidSignatureError({ signature, type: \"constructor\" });\\n    const params = splitParameters(match.parameters);\\n    const abiParameters = [];\\n    const length = params.length;\\n    for (let i = 0; i < length; i++)\\n      abiParameters.push(parseAbiParameter(params[i], { structs, type: \"constructor\" }));\\n    return {\\n      type: \"constructor\",\\n      stateMutability: match.stateMutability ?? \"nonpayable\",\\n      inputs: abiParameters\\n    };\\n  }\\n  function parseFallbackSignature(signature) {\\n    const match = execFallbackSignature(signature);\\n    if (!match)\\n      throw new InvalidSignatureError({ signature, type: \"fallback\" });\\n    return {\\n      type: \"fallback\",\\n      stateMutability: match.stateMutability ?? \"nonpayable\"\\n    };\\n  }\\n  function parseAbiParameter(param, options) {\\n    const parameterCacheKey = getParameterCacheKey(param, options?.type, options?.structs);\\n    if (parameterCache.has(parameterCacheKey))\\n      return parameterCache.get(parameterCacheKey);\\n    const isTuple = isTupleRegex.test(param);\\n    const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\\n    if (!match)\\n      throw new InvalidParameterError({ param });\\n    if (match.name && isSolidityKeyword(match.name))\\n      throw new SolidityProtectedKeywordError({ param, name: match.name });\\n    const name = match.name ? { name: match.name } : {};\\n    const indexed = match.modifier === \"indexed\" ? { indexed: true } : {};\\n    const structs = options?.structs ?? {};\\n    let type;\\n    let components = {};\\n    if (isTuple) {\\n      type = \"tuple\";\\n      const params = splitParameters(match.type);\\n      const components_ = [];\\n      const length = params.length;\\n      for (let i = 0; i < length; i++) {\\n        components_.push(parseAbiParameter(params[i], { structs }));\\n      }\\n      components = { components: components_ };\\n    } else if (match.type in structs) {\\n      type = \"tuple\";\\n      components = { components: structs[match.type] };\\n    } else if (dynamicIntegerRegex.test(match.type)) {\\n      type = `${match.type}256`;\\n    } else {\\n      type = match.type;\\n      if (!(options?.type === \"struct\") && !isSolidityType(type))\\n        throw new UnknownSolidityTypeError({ type });\\n    }\\n    if (match.modifier) {\\n      if (!options?.modifiers?.has?.(match.modifier))\\n        throw new InvalidModifierError({\\n          param,\\n          type: options?.type,\\n          modifier: match.modifier\\n        });\\n      if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))\\n        throw new InvalidFunctionModifierError({\\n          param,\\n          type: options?.type,\\n          modifier: match.modifier\\n        });\\n    }\\n    const abiParameter = {\\n      type: `${type}${match.array ?? \"\"}`,\\n      ...name,\\n      ...indexed,\\n      ...components\\n    };\\n    parameterCache.set(parameterCacheKey, abiParameter);\\n    return abiParameter;\\n  }\\n  function splitParameters(params, result = [], current = \"\", depth = 0) {\\n    const length = params.trim().length;\\n    for (let i = 0; i < length; i++) {\\n      const char = params[i];\\n      const tail = params.slice(i + 1);\\n      switch (char) {\\n        case \",\":\\n          return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);\\n        case \"(\":\\n          return splitParameters(tail, result, `${current}${char}`, depth + 1);\\n        case \")\":\\n          return splitParameters(tail, result, `${current}${char}`, depth - 1);\\n        default:\\n          return splitParameters(tail, result, `${current}${char}`, depth);\\n      }\\n    }\\n    if (current === \"\")\\n      return result;\\n    if (depth !== 0)\\n      throw new InvalidParenthesisError({ current, depth });\\n    result.push(current.trim());\\n    return result;\\n  }\\n  function isSolidityType(type) {\\n    return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || bytesRegex.test(type) || integerRegex.test(type);\\n  }\\n  function isSolidityKeyword(name) {\\n    return name === \"address\" || name === \"bool\" || name === \"function\" || name === \"string\" || name === \"tuple\" || bytesRegex.test(name) || integerRegex.test(name) || protectedKeywordsRegex.test(name);\\n  }\\n  function isValidDataLocation(type, isArray) {\\n    return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\\n  }\\n  var abiParameterWithoutTupleRegex, abiParameterWithTupleRegex, dynamicIntegerRegex, protectedKeywordsRegex;\\n  var init_utils = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/utils.js\"() {\\n      init_regex();\\n      init_abiItem();\\n      init_abiParameter();\\n      init_signature();\\n      init_splitParameters();\\n      init_cache();\\n      init_signatures();\\n      abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\\\[\\\\d*?\\\\])+?)?(?:\\\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\\n      abiParameterWithTupleRegex = /^\\\\((?<type>.+?)\\\\)(?<array>(?:\\\\[\\\\d*?\\\\])+?)?(?:\\\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\\n      dynamicIntegerRegex = /^u?int$/;\\n      protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/structs.js\\n  function parseStructs(signatures) {\\n    const shallowStructs = {};\\n    const signaturesLength = signatures.length;\\n    for (let i = 0; i < signaturesLength; i++) {\\n      const signature = signatures[i];\\n      if (!isStructSignature(signature))\\n        continue;\\n      const match = execStructSignature(signature);\\n      if (!match)\\n        throw new InvalidSignatureError({ signature, type: \"struct\" });\\n      const properties = match.properties.split(\";\");\\n      const components = [];\\n      const propertiesLength = properties.length;\\n      for (let k = 0; k < propertiesLength; k++) {\\n        const property = properties[k];\\n        const trimmed = property.trim();\\n        if (!trimmed)\\n          continue;\\n        const abiParameter = parseAbiParameter(trimmed, {\\n          type: \"struct\"\\n        });\\n        components.push(abiParameter);\\n      }\\n      if (!components.length)\\n        throw new InvalidStructSignatureError({ signature });\\n      shallowStructs[match.name] = components;\\n    }\\n    const resolvedStructs = {};\\n    const entries = Object.entries(shallowStructs);\\n    const entriesLength = entries.length;\\n    for (let i = 0; i < entriesLength; i++) {\\n      const [name, parameters] = entries[i];\\n      resolvedStructs[name] = resolveStructs(parameters, shallowStructs);\\n    }\\n    return resolvedStructs;\\n  }\\n  function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {\\n    const components = [];\\n    const length = abiParameters.length;\\n    for (let i = 0; i < length; i++) {\\n      const abiParameter = abiParameters[i];\\n      const isTuple = isTupleRegex.test(abiParameter.type);\\n      if (isTuple)\\n        components.push(abiParameter);\\n      else {\\n        const match = execTyped(typeWithoutTupleRegex, abiParameter.type);\\n        if (!match?.type)\\n          throw new InvalidAbiTypeParameterError({ abiParameter });\\n        const { array, type } = match;\\n        if (type in structs) {\\n          if (ancestors.has(type))\\n            throw new CircularReferenceError({ type });\\n          components.push({\\n            ...abiParameter,\\n            type: `tuple${array ?? \"\"}`,\\n            components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))\\n          });\\n        } else {\\n          if (isSolidityType(type))\\n            components.push(abiParameter);\\n          else\\n            throw new UnknownTypeError({ type });\\n        }\\n      }\\n    }\\n    return components;\\n  }\\n  var typeWithoutTupleRegex;\\n  var init_structs = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/runtime/structs.js\"() {\\n      init_regex();\\n      init_abiItem();\\n      init_abiParameter();\\n      init_signature();\\n      init_struct();\\n      init_signatures();\\n      init_utils();\\n      typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\\\[\\\\d*?\\\\])+?)?$/;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/parseAbi.js\\n  function parseAbi(signatures) {\\n    const structs = parseStructs(signatures);\\n    const abi2 = [];\\n    const length = signatures.length;\\n    for (let i = 0; i < length; i++) {\\n      const signature = signatures[i];\\n      if (isStructSignature(signature))\\n        continue;\\n      abi2.push(parseSignature(signature, structs));\\n    }\\n    return abi2;\\n  }\\n  var init_parseAbi = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/parseAbi.js\"() {\\n      init_signatures();\\n      init_structs();\\n      init_utils();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js\\n  function parseAbiItem(signature) {\\n    let abiItem;\\n    if (typeof signature === \"string\")\\n      abiItem = parseSignature(signature);\\n    else {\\n      const structs = parseStructs(signature);\\n      const length = signature.length;\\n      for (let i = 0; i < length; i++) {\\n        const signature_ = signature[i];\\n        if (isStructSignature(signature_))\\n          continue;\\n        abiItem = parseSignature(signature_, structs);\\n        break;\\n      }\\n    }\\n    if (!abiItem)\\n      throw new InvalidAbiItemError({ signature });\\n    return abiItem;\\n  }\\n  var init_parseAbiItem = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js\"() {\\n      init_abiItem();\\n      init_signatures();\\n      init_structs();\\n      init_utils();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/exports/index.js\\n  var init_exports = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/abitype@1.0.8_typescript@5.8.3_zod@3.24.3/node_modules/abitype/dist/esm/exports/index.js\"() {\\n      init_formatAbiItem();\\n      init_parseAbi();\\n      init_parseAbiItem();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/formatAbiItem.js\\n  function formatAbiItem2(abiItem, { includeName = false } = {}) {\\n    if (abiItem.type !== \"function\" && abiItem.type !== \"event\" && abiItem.type !== \"error\")\\n      throw new InvalidDefinitionTypeError(abiItem.type);\\n    return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;\\n  }\\n  function formatAbiParams(params, { includeName = false } = {}) {\\n    if (!params)\\n      return \"\";\\n    return params.map((param) => formatAbiParam(param, { includeName })).join(includeName ? \", \" : \",\");\\n  }\\n  function formatAbiParam(param, { includeName }) {\\n    if (param.type.startsWith(\"tuple\")) {\\n      return `(${formatAbiParams(param.components, { includeName })})${param.type.slice(\"tuple\".length)}`;\\n    }\\n    return param.type + (includeName && param.name ? ` ${param.name}` : \"\");\\n  }\\n  var init_formatAbiItem2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/formatAbiItem.js\"() {\\n      init_abi();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/isHex.js\\n  function isHex(value, { strict = true } = {}) {\\n    if (!value)\\n      return false;\\n    if (typeof value !== \"string\")\\n      return false;\\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\\n  }\\n  var init_isHex = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/isHex.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/size.js\\n  function size(value) {\\n    if (isHex(value, { strict: false }))\\n      return Math.ceil((value.length - 2) / 2);\\n    return value.length;\\n  }\\n  var init_size = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/size.js\"() {\\n      init_isHex();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/version.js\\n  var version2;\\n  var init_version2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/version.js\"() {\\n      version2 = \"2.27.2\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/base.js\\n  function walk(err, fn) {\\n    if (fn?.(err))\\n      return err;\\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause !== void 0)\\n      return walk(err.cause, fn);\\n    return fn ? null : err;\\n  }\\n  var errorConfig, BaseError2;\\n  var init_base = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/base.js\"() {\\n      init_version2();\\n      errorConfig = {\\n        getDocsUrl: ({ docsBaseUrl, docsPath: docsPath8 = \"\", docsSlug }) => docsPath8 ? `${docsBaseUrl ?? \"https://viem.sh\"}${docsPath8}${docsSlug ? `#${docsSlug}` : \"\"}` : void 0,\\n        version: `viem@${version2}`\\n      };\\n      BaseError2 = class _BaseError extends Error {\\n        constructor(shortMessage, args = {}) {\\n          const details = (() => {\\n            if (args.cause instanceof _BaseError)\\n              return args.cause.details;\\n            if (args.cause?.message)\\n              return args.cause.message;\\n            return args.details;\\n          })();\\n          const docsPath8 = (() => {\\n            if (args.cause instanceof _BaseError)\\n              return args.cause.docsPath || args.docsPath;\\n            return args.docsPath;\\n          })();\\n          const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath: docsPath8 });\\n          const message = [\\n            shortMessage || \"An error occurred.\",\\n            \"\",\\n            ...args.metaMessages ? [...args.metaMessages, \"\"] : [],\\n            ...docsUrl ? [`Docs: ${docsUrl}`] : [],\\n            ...details ? [`Details: ${details}`] : [],\\n            ...errorConfig.version ? [`Version: ${errorConfig.version}`] : []\\n          ].join(\"\\\\n\");\\n          super(message, args.cause ? { cause: args.cause } : void 0);\\n          Object.defineProperty(this, \"details\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"docsPath\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"metaMessages\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"shortMessage\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"version\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"BaseError\"\\n          });\\n          this.details = details;\\n          this.docsPath = docsPath8;\\n          this.metaMessages = args.metaMessages;\\n          this.name = args.name ?? this.name;\\n          this.shortMessage = shortMessage;\\n          this.version = version2;\\n        }\\n        walk(fn) {\\n          return walk(this, fn);\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/abi.js\\n  var AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, AbiDecodingDataSizeTooSmallError, AbiDecodingZeroDataError, AbiEncodingArrayLengthMismatchError, AbiEncodingBytesSizeMismatchError, AbiEncodingLengthMismatchError, AbiErrorInputsNotFoundError, AbiErrorNotFoundError, AbiErrorSignatureNotFoundError, AbiEventSignatureEmptyTopicsError, AbiEventSignatureNotFoundError, AbiEventNotFoundError, AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, AbiFunctionSignatureNotFoundError, AbiItemAmbiguityError, BytesSizeMismatchError, DecodeLogDataMismatch, DecodeLogTopicsMismatch, InvalidAbiEncodingTypeError, InvalidAbiDecodingTypeError, InvalidArrayError, InvalidDefinitionTypeError;\\n  var init_abi = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/abi.js\"() {\\n      init_formatAbiItem2();\\n      init_size();\\n      init_base();\\n      AbiConstructorNotFoundError = class extends BaseError2 {\\n        constructor({ docsPath: docsPath8 }) {\\n          super([\\n            \"A constructor was not found on the ABI.\",\\n            \"Make sure you are using the correct ABI and that the constructor exists on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiConstructorNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiConstructorParamsNotFoundError = class extends BaseError2 {\\n        constructor({ docsPath: docsPath8 }) {\\n          super([\\n            \"Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.\",\\n            \"Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiConstructorParamsNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiDecodingDataSizeTooSmallError = class extends BaseError2 {\\n        constructor({ data, params, size: size5 }) {\\n          super([`Data size of ${size5} bytes is too small for given parameters.`].join(\"\\\\n\"), {\\n            metaMessages: [\\n              `Params: (${formatAbiParams(params, { includeName: true })})`,\\n              `Data:   ${data} (${size5} bytes)`\\n            ],\\n            name: \"AbiDecodingDataSizeTooSmallError\"\\n          });\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"params\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"size\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.data = data;\\n          this.params = params;\\n          this.size = size5;\\n        }\\n      };\\n      AbiDecodingZeroDataError = class extends BaseError2 {\\n        constructor() {\\n          super(\\'Cannot decode zero data (\"0x\") with ABI parameters.\\', {\\n            name: \"AbiDecodingZeroDataError\"\\n          });\\n        }\\n      };\\n      AbiEncodingArrayLengthMismatchError = class extends BaseError2 {\\n        constructor({ expectedLength, givenLength, type }) {\\n          super([\\n            `ABI encoding array length mismatch for type ${type}.`,\\n            `Expected length: ${expectedLength}`,\\n            `Given length: ${givenLength}`\\n          ].join(\"\\\\n\"), { name: \"AbiEncodingArrayLengthMismatchError\" });\\n        }\\n      };\\n      AbiEncodingBytesSizeMismatchError = class extends BaseError2 {\\n        constructor({ expectedSize, value }) {\\n          super(`Size of bytes \"${value}\" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`, { name: \"AbiEncodingBytesSizeMismatchError\" });\\n        }\\n      };\\n      AbiEncodingLengthMismatchError = class extends BaseError2 {\\n        constructor({ expectedLength, givenLength }) {\\n          super([\\n            \"ABI encoding params/values length mismatch.\",\\n            `Expected length (params): ${expectedLength}`,\\n            `Given length (values): ${givenLength}`\\n          ].join(\"\\\\n\"), { name: \"AbiEncodingLengthMismatchError\" });\\n        }\\n      };\\n      AbiErrorInputsNotFoundError = class extends BaseError2 {\\n        constructor(errorName, { docsPath: docsPath8 }) {\\n          super([\\n            `Arguments (\\\\`args\\\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\\\`inputs\\\\`).`,\\n            \"Cannot encode error result without knowing what the parameter types are.\",\\n            \"Make sure you are using the correct ABI and that the inputs exist on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiErrorInputsNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiErrorNotFoundError = class extends BaseError2 {\\n        constructor(errorName, { docsPath: docsPath8 } = {}) {\\n          super([\\n            `Error ${errorName ? `\"${errorName}\" ` : \"\"}not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the error exists on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiErrorNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiErrorSignatureNotFoundError = class extends BaseError2 {\\n        constructor(signature, { docsPath: docsPath8 }) {\\n          super([\\n            `Encoded error signature \"${signature}\" not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the error exists on it.\",\\n            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiErrorSignatureNotFoundError\"\\n          });\\n          Object.defineProperty(this, \"signature\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.signature = signature;\\n        }\\n      };\\n      AbiEventSignatureEmptyTopicsError = class extends BaseError2 {\\n        constructor({ docsPath: docsPath8 }) {\\n          super(\"Cannot extract event signature from empty topics.\", {\\n            docsPath: docsPath8,\\n            name: \"AbiEventSignatureEmptyTopicsError\"\\n          });\\n        }\\n      };\\n      AbiEventSignatureNotFoundError = class extends BaseError2 {\\n        constructor(signature, { docsPath: docsPath8 }) {\\n          super([\\n            `Encoded event signature \"${signature}\" not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the event exists on it.\",\\n            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiEventSignatureNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiEventNotFoundError = class extends BaseError2 {\\n        constructor(eventName, { docsPath: docsPath8 } = {}) {\\n          super([\\n            `Event ${eventName ? `\"${eventName}\" ` : \"\"}not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the event exists on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiEventNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiFunctionNotFoundError = class extends BaseError2 {\\n        constructor(functionName, { docsPath: docsPath8 } = {}) {\\n          super([\\n            `Function ${functionName ? `\"${functionName}\" ` : \"\"}not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the function exists on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiFunctionNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiFunctionOutputsNotFoundError = class extends BaseError2 {\\n        constructor(functionName, { docsPath: docsPath8 }) {\\n          super([\\n            `Function \"${functionName}\" does not contain any \\\\`outputs\\\\` on ABI.`,\\n            \"Cannot decode function result without knowing what the parameter types are.\",\\n            \"Make sure you are using the correct ABI and that the function exists on it.\"\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiFunctionOutputsNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiFunctionSignatureNotFoundError = class extends BaseError2 {\\n        constructor(signature, { docsPath: docsPath8 }) {\\n          super([\\n            `Encoded function signature \"${signature}\" not found on ABI.`,\\n            \"Make sure you are using the correct ABI and that the function exists on it.\",\\n            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`\\n          ].join(\"\\\\n\"), {\\n            docsPath: docsPath8,\\n            name: \"AbiFunctionSignatureNotFoundError\"\\n          });\\n        }\\n      };\\n      AbiItemAmbiguityError = class extends BaseError2 {\\n        constructor(x, y) {\\n          super(\"Found ambiguous types in overloaded ABI items.\", {\\n            metaMessages: [\\n              `\\\\`${x.type}\\\\` in \\\\`${formatAbiItem2(x.abiItem)}\\\\`, and`,\\n              `\\\\`${y.type}\\\\` in \\\\`${formatAbiItem2(y.abiItem)}\\\\``,\\n              \"\",\\n              \"These types encode differently and cannot be distinguished at runtime.\",\\n              \"Remove one of the ambiguous items in the ABI.\"\\n            ],\\n            name: \"AbiItemAmbiguityError\"\\n          });\\n        }\\n      };\\n      BytesSizeMismatchError = class extends BaseError2 {\\n        constructor({ expectedSize, givenSize }) {\\n          super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\\n            name: \"BytesSizeMismatchError\"\\n          });\\n        }\\n      };\\n      DecodeLogDataMismatch = class extends BaseError2 {\\n        constructor({ abiItem, data, params, size: size5 }) {\\n          super([\\n            `Data size of ${size5} bytes is too small for non-indexed event parameters.`\\n          ].join(\"\\\\n\"), {\\n            metaMessages: [\\n              `Params: (${formatAbiParams(params, { includeName: true })})`,\\n              `Data:   ${data} (${size5} bytes)`\\n            ],\\n            name: \"DecodeLogDataMismatch\"\\n          });\\n          Object.defineProperty(this, \"abiItem\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"params\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"size\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.abiItem = abiItem;\\n          this.data = data;\\n          this.params = params;\\n          this.size = size5;\\n        }\\n      };\\n      DecodeLogTopicsMismatch = class extends BaseError2 {\\n        constructor({ abiItem, param }) {\\n          super([\\n            `Expected a topic for indexed event parameter${param.name ? ` \"${param.name}\"` : \"\"} on event \"${formatAbiItem2(abiItem, { includeName: true })}\".`\\n          ].join(\"\\\\n\"), { name: \"DecodeLogTopicsMismatch\" });\\n          Object.defineProperty(this, \"abiItem\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.abiItem = abiItem;\\n        }\\n      };\\n      InvalidAbiEncodingTypeError = class extends BaseError2 {\\n        constructor(type, { docsPath: docsPath8 }) {\\n          super([\\n            `Type \"${type}\" is not a valid encoding type.`,\\n            \"Please provide a valid ABI type.\"\\n          ].join(\"\\\\n\"), { docsPath: docsPath8, name: \"InvalidAbiEncodingType\" });\\n        }\\n      };\\n      InvalidAbiDecodingTypeError = class extends BaseError2 {\\n        constructor(type, { docsPath: docsPath8 }) {\\n          super([\\n            `Type \"${type}\" is not a valid decoding type.`,\\n            \"Please provide a valid ABI type.\"\\n          ].join(\"\\\\n\"), { docsPath: docsPath8, name: \"InvalidAbiDecodingType\" });\\n        }\\n      };\\n      InvalidArrayError = class extends BaseError2 {\\n        constructor(value) {\\n          super([`Value \"${value}\" is not a valid array.`].join(\"\\\\n\"), {\\n            name: \"InvalidArrayError\"\\n          });\\n        }\\n      };\\n      InvalidDefinitionTypeError = class extends BaseError2 {\\n        constructor(type) {\\n          super([\\n            `\"${type}\" is not a valid definition type.`,\\n            \\'Valid types: \"function\", \"event\", \"error\"\\'\\n          ].join(\"\\\\n\"), { name: \"InvalidDefinitionTypeError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/data.js\\n  var SliceOffsetOutOfBoundsError, SizeExceedsPaddingSizeError, InvalidBytesLengthError;\\n  var init_data = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/data.js\"() {\\n      init_base();\\n      SliceOffsetOutOfBoundsError = class extends BaseError2 {\\n        constructor({ offset, position, size: size5 }) {\\n          super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \"${offset}\" is out-of-bounds (size: ${size5}).`, { name: \"SliceOffsetOutOfBoundsError\" });\\n        }\\n      };\\n      SizeExceedsPaddingSizeError = class extends BaseError2 {\\n        constructor({ size: size5, targetSize, type }) {\\n          super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size5}) exceeds padding size (${targetSize}).`, { name: \"SizeExceedsPaddingSizeError\" });\\n        }\\n      };\\n      InvalidBytesLengthError = class extends BaseError2 {\\n        constructor({ size: size5, targetSize, type }) {\\n          super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size5} ${type} long.`, { name: \"InvalidBytesLengthError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/pad.js\\n  function pad(hexOrBytes, { dir, size: size5 = 32 } = {}) {\\n    if (typeof hexOrBytes === \"string\")\\n      return padHex(hexOrBytes, { dir, size: size5 });\\n    return padBytes(hexOrBytes, { dir, size: size5 });\\n  }\\n  function padHex(hex_, { dir, size: size5 = 32 } = {}) {\\n    if (size5 === null)\\n      return hex_;\\n    const hex = hex_.replace(\"0x\", \"\");\\n    if (hex.length > size5 * 2)\\n      throw new SizeExceedsPaddingSizeError({\\n        size: Math.ceil(hex.length / 2),\\n        targetSize: size5,\\n        type: \"hex\"\\n      });\\n    return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size5 * 2, \"0\")}`;\\n  }\\n  function padBytes(bytes, { dir, size: size5 = 32 } = {}) {\\n    if (size5 === null)\\n      return bytes;\\n    if (bytes.length > size5)\\n      throw new SizeExceedsPaddingSizeError({\\n        size: bytes.length,\\n        targetSize: size5,\\n        type: \"bytes\"\\n      });\\n    const paddedBytes = new Uint8Array(size5);\\n    for (let i = 0; i < size5; i++) {\\n      const padEnd = dir === \"right\";\\n      paddedBytes[padEnd ? i : size5 - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\\n    }\\n    return paddedBytes;\\n  }\\n  var init_pad = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/pad.js\"() {\\n      init_data();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/encoding.js\\n  var IntegerOutOfRangeError, InvalidBytesBooleanError, InvalidHexBooleanError, SizeOverflowError;\\n  var init_encoding = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/encoding.js\"() {\\n      init_base();\\n      IntegerOutOfRangeError = class extends BaseError2 {\\n        constructor({ max, min, signed, size: size5, value }) {\\n          super(`Number \"${value}\" is not in safe ${size5 ? `${size5 * 8}-bit ${signed ? \"signed\" : \"unsigned\"} ` : \"\"}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: \"IntegerOutOfRangeError\" });\\n        }\\n      };\\n      InvalidBytesBooleanError = class extends BaseError2 {\\n        constructor(bytes) {\\n          super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\\n            name: \"InvalidBytesBooleanError\"\\n          });\\n        }\\n      };\\n      InvalidHexBooleanError = class extends BaseError2 {\\n        constructor(hex) {\\n          super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`, { name: \"InvalidHexBooleanError\" });\\n        }\\n      };\\n      SizeOverflowError = class extends BaseError2 {\\n        constructor({ givenSize, maxSize }) {\\n          super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: \"SizeOverflowError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/trim.js\\n  function trim(hexOrBytes, { dir = \"left\" } = {}) {\\n    let data = typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\\n    let sliceLength = 0;\\n    for (let i = 0; i < data.length - 1; i++) {\\n      if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\")\\n        sliceLength++;\\n      else\\n        break;\\n    }\\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\\n    if (typeof hexOrBytes === \"string\") {\\n      if (data.length === 1 && dir === \"right\")\\n        data = `${data}0`;\\n      return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\\n    }\\n    return data;\\n  }\\n  var init_trim = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/trim.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/fromHex.js\\n  function assertSize(hexOrBytes, { size: size5 }) {\\n    if (size(hexOrBytes) > size5)\\n      throw new SizeOverflowError({\\n        givenSize: size(hexOrBytes),\\n        maxSize: size5\\n      });\\n  }\\n  function hexToBigInt(hex, opts = {}) {\\n    const { signed } = opts;\\n    if (opts.size)\\n      assertSize(hex, { size: opts.size });\\n    const value = BigInt(hex);\\n    if (!signed)\\n      return value;\\n    const size5 = (hex.length - 2) / 2;\\n    const max = (1n << BigInt(size5) * 8n - 1n) - 1n;\\n    if (value <= max)\\n      return value;\\n    return value - BigInt(`0x${\"f\".padStart(size5 * 2, \"f\")}`) - 1n;\\n  }\\n  function hexToBool(hex_, opts = {}) {\\n    let hex = hex_;\\n    if (opts.size) {\\n      assertSize(hex, { size: opts.size });\\n      hex = trim(hex);\\n    }\\n    if (trim(hex) === \"0x00\")\\n      return false;\\n    if (trim(hex) === \"0x01\")\\n      return true;\\n    throw new InvalidHexBooleanError(hex);\\n  }\\n  function hexToNumber(hex, opts = {}) {\\n    return Number(hexToBigInt(hex, opts));\\n  }\\n  var init_fromHex = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/fromHex.js\"() {\\n      init_encoding();\\n      init_size();\\n      init_trim();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/toHex.js\\n  function toHex(value, opts = {}) {\\n    if (typeof value === \"number\" || typeof value === \"bigint\")\\n      return numberToHex(value, opts);\\n    if (typeof value === \"string\") {\\n      return stringToHex(value, opts);\\n    }\\n    if (typeof value === \"boolean\")\\n      return boolToHex(value, opts);\\n    return bytesToHex(value, opts);\\n  }\\n  function boolToHex(value, opts = {}) {\\n    const hex = `0x${Number(value)}`;\\n    if (typeof opts.size === \"number\") {\\n      assertSize(hex, { size: opts.size });\\n      return pad(hex, { size: opts.size });\\n    }\\n    return hex;\\n  }\\n  function bytesToHex(value, opts = {}) {\\n    let string = \"\";\\n    for (let i = 0; i < value.length; i++) {\\n      string += hexes[value[i]];\\n    }\\n    const hex = `0x${string}`;\\n    if (typeof opts.size === \"number\") {\\n      assertSize(hex, { size: opts.size });\\n      return pad(hex, { dir: \"right\", size: opts.size });\\n    }\\n    return hex;\\n  }\\n  function numberToHex(value_, opts = {}) {\\n    const { signed, size: size5 } = opts;\\n    const value = BigInt(value_);\\n    let maxValue;\\n    if (size5) {\\n      if (signed)\\n        maxValue = (1n << BigInt(size5) * 8n - 1n) - 1n;\\n      else\\n        maxValue = 2n ** (BigInt(size5) * 8n) - 1n;\\n    } else if (typeof value_ === \"number\") {\\n      maxValue = BigInt(Number.MAX_SAFE_INTEGER);\\n    }\\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\\n    if (maxValue && value > maxValue || value < minValue) {\\n      const suffix = typeof value_ === \"bigint\" ? \"n\" : \"\";\\n      throw new IntegerOutOfRangeError({\\n        max: maxValue ? `${maxValue}${suffix}` : void 0,\\n        min: `${minValue}${suffix}`,\\n        signed,\\n        size: size5,\\n        value: `${value_}${suffix}`\\n      });\\n    }\\n    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size5 * 8)) + BigInt(value) : value).toString(16)}`;\\n    if (size5)\\n      return pad(hex, { size: size5 });\\n    return hex;\\n  }\\n  function stringToHex(value_, opts = {}) {\\n    const value = encoder.encode(value_);\\n    return bytesToHex(value, opts);\\n  }\\n  var hexes, encoder;\\n  var init_toHex = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/toHex.js\"() {\\n      init_encoding();\\n      init_pad();\\n      init_fromHex();\\n      hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, \"0\"));\\n      encoder = /* @__PURE__ */ new TextEncoder();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/toBytes.js\\n  function toBytes(value, opts = {}) {\\n    if (typeof value === \"number\" || typeof value === \"bigint\")\\n      return numberToBytes(value, opts);\\n    if (typeof value === \"boolean\")\\n      return boolToBytes(value, opts);\\n    if (isHex(value))\\n      return hexToBytes(value, opts);\\n    return stringToBytes(value, opts);\\n  }\\n  function boolToBytes(value, opts = {}) {\\n    const bytes = new Uint8Array(1);\\n    bytes[0] = Number(value);\\n    if (typeof opts.size === \"number\") {\\n      assertSize(bytes, { size: opts.size });\\n      return pad(bytes, { size: opts.size });\\n    }\\n    return bytes;\\n  }\\n  function charCodeToBase16(char) {\\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine)\\n      return char - charCodeMap.zero;\\n    if (char >= charCodeMap.A && char <= charCodeMap.F)\\n      return char - (charCodeMap.A - 10);\\n    if (char >= charCodeMap.a && char <= charCodeMap.f)\\n      return char - (charCodeMap.a - 10);\\n    return void 0;\\n  }\\n  function hexToBytes(hex_, opts = {}) {\\n    let hex = hex_;\\n    if (opts.size) {\\n      assertSize(hex, { size: opts.size });\\n      hex = pad(hex, { dir: \"right\", size: opts.size });\\n    }\\n    let hexString = hex.slice(2);\\n    if (hexString.length % 2)\\n      hexString = `0${hexString}`;\\n    const length = hexString.length / 2;\\n    const bytes = new Uint8Array(length);\\n    for (let index2 = 0, j = 0; index2 < length; index2++) {\\n      const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\\n      const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\\n      if (nibbleLeft === void 0 || nibbleRight === void 0) {\\n        throw new BaseError2(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\\n      }\\n      bytes[index2] = nibbleLeft * 16 + nibbleRight;\\n    }\\n    return bytes;\\n  }\\n  function numberToBytes(value, opts) {\\n    const hex = numberToHex(value, opts);\\n    return hexToBytes(hex);\\n  }\\n  function stringToBytes(value, opts = {}) {\\n    const bytes = encoder2.encode(value);\\n    if (typeof opts.size === \"number\") {\\n      assertSize(bytes, { size: opts.size });\\n      return pad(bytes, { dir: \"right\", size: opts.size });\\n    }\\n    return bytes;\\n  }\\n  var encoder2, charCodeMap;\\n  var init_toBytes = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/toBytes.js\"() {\\n      init_base();\\n      init_isHex();\\n      init_pad();\\n      init_fromHex();\\n      init_toHex();\\n      encoder2 = /* @__PURE__ */ new TextEncoder();\\n      charCodeMap = {\\n        zero: 48,\\n        nine: 57,\\n        A: 65,\\n        F: 70,\\n        a: 97,\\n        f: 102\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_assert.js\\n  function anumber(n) {\\n    if (!Number.isSafeInteger(n) || n < 0)\\n      throw new Error(\"positive integer expected, got \" + n);\\n  }\\n  function isBytes(a) {\\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\\n  }\\n  function abytes(b, ...lengths) {\\n    if (!isBytes(b))\\n      throw new Error(\"Uint8Array expected\");\\n    if (lengths.length > 0 && !lengths.includes(b.length))\\n      throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\\n  }\\n  function ahash(h) {\\n    if (typeof h !== \"function\" || typeof h.create !== \"function\")\\n      throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\\n    anumber(h.outputLen);\\n    anumber(h.blockLen);\\n  }\\n  function aexists(instance, checkFinished = true) {\\n    if (instance.destroyed)\\n      throw new Error(\"Hash instance has been destroyed\");\\n    if (checkFinished && instance.finished)\\n      throw new Error(\"Hash#digest() has already been called\");\\n  }\\n  function aoutput(out, instance) {\\n    abytes(out);\\n    const min = instance.outputLen;\\n    if (out.length < min) {\\n      throw new Error(\"digestInto() expects output buffer of length at least \" + min);\\n    }\\n  }\\n  var init_assert = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_assert.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_u64.js\\n  function fromBig(n, le = false) {\\n    if (le)\\n      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };\\n    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\\n  }\\n  function split(lst, le = false) {\\n    let Ah = new Uint32Array(lst.length);\\n    let Al = new Uint32Array(lst.length);\\n    for (let i = 0; i < lst.length; i++) {\\n      const { h, l } = fromBig(lst[i], le);\\n      [Ah[i], Al[i]] = [h, l];\\n    }\\n    return [Ah, Al];\\n  }\\n  var U32_MASK64, _32n, rotlSH, rotlSL, rotlBH, rotlBL;\\n  var init_u64 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_u64.js\"() {\\n      U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\\n      _32n = /* @__PURE__ */ BigInt(32);\\n      rotlSH = (h, l, s) => h << s | l >>> 32 - s;\\n      rotlSL = (h, l, s) => l << s | h >>> 32 - s;\\n      rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\\n      rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/crypto.js\\n  var crypto2;\\n  var init_crypto = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/crypto.js\"() {\\n      crypto2 = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/utils.js\\n  function u32(arr) {\\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\\n  }\\n  function createView(arr) {\\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\\n  }\\n  function rotr(word, shift) {\\n    return word << 32 - shift | word >>> shift;\\n  }\\n  function byteSwap(word) {\\n    return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;\\n  }\\n  function byteSwap32(arr) {\\n    for (let i = 0; i < arr.length; i++) {\\n      arr[i] = byteSwap(arr[i]);\\n    }\\n  }\\n  function utf8ToBytes(str) {\\n    if (typeof str !== \"string\")\\n      throw new Error(\"utf8ToBytes expected string, got \" + typeof str);\\n    return new Uint8Array(new TextEncoder().encode(str));\\n  }\\n  function toBytes2(data) {\\n    if (typeof data === \"string\")\\n      data = utf8ToBytes(data);\\n    abytes(data);\\n    return data;\\n  }\\n  function concatBytes(...arrays) {\\n    let sum = 0;\\n    for (let i = 0; i < arrays.length; i++) {\\n      const a = arrays[i];\\n      abytes(a);\\n      sum += a.length;\\n    }\\n    const res = new Uint8Array(sum);\\n    for (let i = 0, pad4 = 0; i < arrays.length; i++) {\\n      const a = arrays[i];\\n      res.set(a, pad4);\\n      pad4 += a.length;\\n    }\\n    return res;\\n  }\\n  function wrapConstructor(hashCons) {\\n    const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();\\n    const tmp = hashCons();\\n    hashC.outputLen = tmp.outputLen;\\n    hashC.blockLen = tmp.blockLen;\\n    hashC.create = () => hashCons();\\n    return hashC;\\n  }\\n  function wrapXOFConstructorWithOpts(hashCons) {\\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();\\n    const tmp = hashCons({});\\n    hashC.outputLen = tmp.outputLen;\\n    hashC.blockLen = tmp.blockLen;\\n    hashC.create = (opts) => hashCons(opts);\\n    return hashC;\\n  }\\n  function randomBytes(bytesLength = 32) {\\n    if (crypto2 && typeof crypto2.getRandomValues === \"function\") {\\n      return crypto2.getRandomValues(new Uint8Array(bytesLength));\\n    }\\n    if (crypto2 && typeof crypto2.randomBytes === \"function\") {\\n      return crypto2.randomBytes(bytesLength);\\n    }\\n    throw new Error(\"crypto.getRandomValues must be defined\");\\n  }\\n  var isLE, Hash;\\n  var init_utils2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/utils.js\"() {\\n      init_crypto();\\n      init_assert();\\n      isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();\\n      Hash = class {\\n        // Safe version that clones internal state\\n        clone() {\\n          return this._cloneInto();\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha3.js\\n  function keccakP(s, rounds = 24) {\\n    const B = new Uint32Array(5 * 2);\\n    for (let round = 24 - rounds; round < 24; round++) {\\n      for (let x = 0; x < 10; x++)\\n        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\\n      for (let x = 0; x < 10; x += 2) {\\n        const idx1 = (x + 8) % 10;\\n        const idx0 = (x + 2) % 10;\\n        const B0 = B[idx0];\\n        const B1 = B[idx0 + 1];\\n        const Th = rotlH(B0, B1, 1) ^ B[idx1];\\n        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\\n        for (let y = 0; y < 50; y += 10) {\\n          s[x + y] ^= Th;\\n          s[x + y + 1] ^= Tl;\\n        }\\n      }\\n      let curH = s[2];\\n      let curL = s[3];\\n      for (let t = 0; t < 24; t++) {\\n        const shift = SHA3_ROTL[t];\\n        const Th = rotlH(curH, curL, shift);\\n        const Tl = rotlL(curH, curL, shift);\\n        const PI = SHA3_PI[t];\\n        curH = s[PI];\\n        curL = s[PI + 1];\\n        s[PI] = Th;\\n        s[PI + 1] = Tl;\\n      }\\n      for (let y = 0; y < 50; y += 10) {\\n        for (let x = 0; x < 10; x++)\\n          B[x] = s[y + x];\\n        for (let x = 0; x < 10; x++)\\n          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\\n      }\\n      s[0] ^= SHA3_IOTA_H[round];\\n      s[1] ^= SHA3_IOTA_L[round];\\n    }\\n    B.fill(0);\\n  }\\n  var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;\\n  var init_sha3 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha3.js\"() {\\n      init_assert();\\n      init_u64();\\n      init_utils2();\\n      SHA3_PI = [];\\n      SHA3_ROTL = [];\\n      _SHA3_IOTA = [];\\n      _0n = /* @__PURE__ */ BigInt(0);\\n      _1n = /* @__PURE__ */ BigInt(1);\\n      _2n = /* @__PURE__ */ BigInt(2);\\n      _7n = /* @__PURE__ */ BigInt(7);\\n      _256n = /* @__PURE__ */ BigInt(256);\\n      _0x71n = /* @__PURE__ */ BigInt(113);\\n      for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\\n        [x, y] = [y, (2 * x + 3 * y) % 5];\\n        SHA3_PI.push(2 * (5 * y + x));\\n        SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\\n        let t = _0n;\\n        for (let j = 0; j < 7; j++) {\\n          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\\n          if (R & _2n)\\n            t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\\n        }\\n        _SHA3_IOTA.push(t);\\n      }\\n      [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\\n      rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\\n      rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\\n      Keccak = class _Keccak extends Hash {\\n        // NOTE: we accept arguments in bytes instead of bits here.\\n        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\\n          super();\\n          this.blockLen = blockLen;\\n          this.suffix = suffix;\\n          this.outputLen = outputLen;\\n          this.enableXOF = enableXOF;\\n          this.rounds = rounds;\\n          this.pos = 0;\\n          this.posOut = 0;\\n          this.finished = false;\\n          this.destroyed = false;\\n          anumber(outputLen);\\n          if (0 >= this.blockLen || this.blockLen >= 200)\\n            throw new Error(\"Sha3 supports only keccak-f1600 function\");\\n          this.state = new Uint8Array(200);\\n          this.state32 = u32(this.state);\\n        }\\n        keccak() {\\n          if (!isLE)\\n            byteSwap32(this.state32);\\n          keccakP(this.state32, this.rounds);\\n          if (!isLE)\\n            byteSwap32(this.state32);\\n          this.posOut = 0;\\n          this.pos = 0;\\n        }\\n        update(data) {\\n          aexists(this);\\n          const { blockLen, state } = this;\\n          data = toBytes2(data);\\n          const len = data.length;\\n          for (let pos = 0; pos < len; ) {\\n            const take = Math.min(blockLen - this.pos, len - pos);\\n            for (let i = 0; i < take; i++)\\n              state[this.pos++] ^= data[pos++];\\n            if (this.pos === blockLen)\\n              this.keccak();\\n          }\\n          return this;\\n        }\\n        finish() {\\n          if (this.finished)\\n            return;\\n          this.finished = true;\\n          const { state, suffix, pos, blockLen } = this;\\n          state[pos] ^= suffix;\\n          if ((suffix & 128) !== 0 && pos === blockLen - 1)\\n            this.keccak();\\n          state[blockLen - 1] ^= 128;\\n          this.keccak();\\n        }\\n        writeInto(out) {\\n          aexists(this, false);\\n          abytes(out);\\n          this.finish();\\n          const bufferOut = this.state;\\n          const { blockLen } = this;\\n          for (let pos = 0, len = out.length; pos < len; ) {\\n            if (this.posOut >= blockLen)\\n              this.keccak();\\n            const take = Math.min(blockLen - this.posOut, len - pos);\\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\\n            this.posOut += take;\\n            pos += take;\\n          }\\n          return out;\\n        }\\n        xofInto(out) {\\n          if (!this.enableXOF)\\n            throw new Error(\"XOF is not possible for this instance\");\\n          return this.writeInto(out);\\n        }\\n        xof(bytes) {\\n          anumber(bytes);\\n          return this.xofInto(new Uint8Array(bytes));\\n        }\\n        digestInto(out) {\\n          aoutput(out, this);\\n          if (this.finished)\\n            throw new Error(\"digest() was already called\");\\n          this.writeInto(out);\\n          this.destroy();\\n          return out;\\n        }\\n        digest() {\\n          return this.digestInto(new Uint8Array(this.outputLen));\\n        }\\n        destroy() {\\n          this.destroyed = true;\\n          this.state.fill(0);\\n        }\\n        _cloneInto(to) {\\n          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\\n          to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\\n          to.state32.set(this.state32);\\n          to.pos = this.pos;\\n          to.posOut = this.posOut;\\n          to.finished = this.finished;\\n          to.rounds = rounds;\\n          to.suffix = suffix;\\n          to.outputLen = outputLen;\\n          to.enableXOF = enableXOF;\\n          to.destroyed = this.destroyed;\\n          return to;\\n        }\\n      };\\n      gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\\n      sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);\\n      sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);\\n      sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);\\n      sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);\\n      keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);\\n      keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);\\n      keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);\\n      keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);\\n      genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));\\n      shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);\\n      shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/keccak256.js\\n  function keccak256(value, to_) {\\n    const to = to_ || \"hex\";\\n    const bytes = keccak_256(isHex(value, { strict: false }) ? toBytes(value) : value);\\n    if (to === \"bytes\")\\n      return bytes;\\n    return toHex(bytes);\\n  }\\n  var init_keccak256 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/keccak256.js\"() {\\n      init_sha3();\\n      init_isHex();\\n      init_toBytes();\\n      init_toHex();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/hashSignature.js\\n  function hashSignature(sig) {\\n    return hash(sig);\\n  }\\n  var hash;\\n  var init_hashSignature = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/hashSignature.js\"() {\\n      init_toBytes();\\n      init_keccak256();\\n      hash = (value) => keccak256(toBytes(value));\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/normalizeSignature.js\\n  function normalizeSignature(signature) {\\n    let active = true;\\n    let current = \"\";\\n    let level = 0;\\n    let result = \"\";\\n    let valid = false;\\n    for (let i = 0; i < signature.length; i++) {\\n      const char = signature[i];\\n      if ([\"(\", \")\", \",\"].includes(char))\\n        active = true;\\n      if (char === \"(\")\\n        level++;\\n      if (char === \")\")\\n        level--;\\n      if (!active)\\n        continue;\\n      if (level === 0) {\\n        if (char === \" \" && [\"event\", \"function\", \"\"].includes(result))\\n          result = \"\";\\n        else {\\n          result += char;\\n          if (char === \")\") {\\n            valid = true;\\n            break;\\n          }\\n        }\\n        continue;\\n      }\\n      if (char === \" \") {\\n        if (signature[i - 1] !== \",\" && current !== \",\" && current !== \",(\") {\\n          current = \"\";\\n          active = false;\\n        }\\n        continue;\\n      }\\n      result += char;\\n      current += char;\\n    }\\n    if (!valid)\\n      throw new BaseError2(\"Unable to normalize signature.\");\\n    return result;\\n  }\\n  var init_normalizeSignature = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/normalizeSignature.js\"() {\\n      init_base();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toSignature.js\\n  var toSignature;\\n  var init_toSignature = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toSignature.js\"() {\\n      init_exports();\\n      init_normalizeSignature();\\n      toSignature = (def) => {\\n        const def_ = (() => {\\n          if (typeof def === \"string\")\\n            return def;\\n          return formatAbiItem(def);\\n        })();\\n        return normalizeSignature(def_);\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toSignatureHash.js\\n  function toSignatureHash(fn) {\\n    return hashSignature(toSignature(fn));\\n  }\\n  var init_toSignatureHash = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toSignatureHash.js\"() {\\n      init_hashSignature();\\n      init_toSignature();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toEventSelector.js\\n  var toEventSelector;\\n  var init_toEventSelector = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toEventSelector.js\"() {\\n      init_toSignatureHash();\\n      toEventSelector = toSignatureHash;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/address.js\\n  var InvalidAddressError;\\n  var init_address = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/address.js\"() {\\n      init_base();\\n      InvalidAddressError = class extends BaseError2 {\\n        constructor({ address }) {\\n          super(`Address \"${address}\" is invalid.`, {\\n            metaMessages: [\\n              \"- Address must be a hex value of 20 bytes (40 hex characters).\",\\n              \"- Address must match its checksum counterpart.\"\\n            ],\\n            name: \"InvalidAddressError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/lru.js\\n  var LruMap;\\n  var init_lru = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/lru.js\"() {\\n      LruMap = class extends Map {\\n        constructor(size5) {\\n          super();\\n          Object.defineProperty(this, \"maxSize\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.maxSize = size5;\\n        }\\n        get(key) {\\n          const value = super.get(key);\\n          if (super.has(key) && value !== void 0) {\\n            this.delete(key);\\n            super.set(key, value);\\n          }\\n          return value;\\n        }\\n        set(key, value) {\\n          super.set(key, value);\\n          if (this.maxSize && this.size > this.maxSize) {\\n            const firstKey = this.keys().next().value;\\n            if (firstKey)\\n              this.delete(firstKey);\\n          }\\n          return this;\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/getAddress.js\\n  function checksumAddress(address_, chainId) {\\n    if (checksumAddressCache.has(`${address_}.${chainId}`))\\n      return checksumAddressCache.get(`${address_}.${chainId}`);\\n    const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();\\n    const hash2 = keccak256(stringToBytes(hexAddress), \"bytes\");\\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split(\"\");\\n    for (let i = 0; i < 40; i += 2) {\\n      if (hash2[i >> 1] >> 4 >= 8 && address[i]) {\\n        address[i] = address[i].toUpperCase();\\n      }\\n      if ((hash2[i >> 1] & 15) >= 8 && address[i + 1]) {\\n        address[i + 1] = address[i + 1].toUpperCase();\\n      }\\n    }\\n    const result = `0x${address.join(\"\")}`;\\n    checksumAddressCache.set(`${address_}.${chainId}`, result);\\n    return result;\\n  }\\n  function getAddress(address, chainId) {\\n    if (!isAddress(address, { strict: false }))\\n      throw new InvalidAddressError({ address });\\n    return checksumAddress(address, chainId);\\n  }\\n  var checksumAddressCache;\\n  var init_getAddress = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/getAddress.js\"() {\\n      init_address();\\n      init_toBytes();\\n      init_keccak256();\\n      init_lru();\\n      init_isAddress();\\n      checksumAddressCache = /* @__PURE__ */ new LruMap(8192);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/isAddress.js\\n  function isAddress(address, options) {\\n    const { strict = true } = options ?? {};\\n    const cacheKey2 = `${address}.${strict}`;\\n    if (isAddressCache.has(cacheKey2))\\n      return isAddressCache.get(cacheKey2);\\n    const result = (() => {\\n      if (!addressRegex.test(address))\\n        return false;\\n      if (address.toLowerCase() === address)\\n        return true;\\n      if (strict)\\n        return checksumAddress(address) === address;\\n      return true;\\n    })();\\n    isAddressCache.set(cacheKey2, result);\\n    return result;\\n  }\\n  var addressRegex, isAddressCache;\\n  var init_isAddress = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/isAddress.js\"() {\\n      init_lru();\\n      init_getAddress();\\n      addressRegex = /^0x[a-fA-F0-9]{40}$/;\\n      isAddressCache = /* @__PURE__ */ new LruMap(8192);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/concat.js\\n  function concat(values) {\\n    if (typeof values[0] === \"string\")\\n      return concatHex(values);\\n    return concatBytes2(values);\\n  }\\n  function concatBytes2(values) {\\n    let length = 0;\\n    for (const arr of values) {\\n      length += arr.length;\\n    }\\n    const result = new Uint8Array(length);\\n    let offset = 0;\\n    for (const arr of values) {\\n      result.set(arr, offset);\\n      offset += arr.length;\\n    }\\n    return result;\\n  }\\n  function concatHex(values) {\\n    return `0x${values.reduce((acc, x) => acc + x.replace(\"0x\", \"\"), \"\")}`;\\n  }\\n  var init_concat = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/concat.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/slice.js\\n  function slice(value, start, end, { strict } = {}) {\\n    if (isHex(value, { strict: false }))\\n      return sliceHex(value, start, end, {\\n        strict\\n      });\\n    return sliceBytes(value, start, end, {\\n      strict\\n    });\\n  }\\n  function assertStartOffset(value, start) {\\n    if (typeof start === \"number\" && start > 0 && start > size(value) - 1)\\n      throw new SliceOffsetOutOfBoundsError({\\n        offset: start,\\n        position: \"start\",\\n        size: size(value)\\n      });\\n  }\\n  function assertEndOffset(value, start, end) {\\n    if (typeof start === \"number\" && typeof end === \"number\" && size(value) !== end - start) {\\n      throw new SliceOffsetOutOfBoundsError({\\n        offset: end,\\n        position: \"end\",\\n        size: size(value)\\n      });\\n    }\\n  }\\n  function sliceBytes(value_, start, end, { strict } = {}) {\\n    assertStartOffset(value_, start);\\n    const value = value_.slice(start, end);\\n    if (strict)\\n      assertEndOffset(value, start, end);\\n    return value;\\n  }\\n  function sliceHex(value_, start, end, { strict } = {}) {\\n    assertStartOffset(value_, start);\\n    const value = `0x${value_.replace(\"0x\", \"\").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\\n    if (strict)\\n      assertEndOffset(value, start, end);\\n    return value;\\n  }\\n  var init_slice = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/data/slice.js\"() {\\n      init_data();\\n      init_isHex();\\n      init_size();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/regex.js\\n  var bytesRegex2, integerRegex2;\\n  var init_regex2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/regex.js\"() {\\n      bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\\n      integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\\n  function encodeAbiParameters(params, values) {\\n    if (params.length !== values.length)\\n      throw new AbiEncodingLengthMismatchError({\\n        expectedLength: params.length,\\n        givenLength: values.length\\n      });\\n    const preparedParams = prepareParams({\\n      params,\\n      values\\n    });\\n    const data = encodeParams(preparedParams);\\n    if (data.length === 0)\\n      return \"0x\";\\n    return data;\\n  }\\n  function prepareParams({ params, values }) {\\n    const preparedParams = [];\\n    for (let i = 0; i < params.length; i++) {\\n      preparedParams.push(prepareParam({ param: params[i], value: values[i] }));\\n    }\\n    return preparedParams;\\n  }\\n  function prepareParam({ param, value }) {\\n    const arrayComponents = getArrayComponents(param.type);\\n    if (arrayComponents) {\\n      const [length, type] = arrayComponents;\\n      return encodeArray(value, { length, param: { ...param, type } });\\n    }\\n    if (param.type === \"tuple\") {\\n      return encodeTuple(value, {\\n        param\\n      });\\n    }\\n    if (param.type === \"address\") {\\n      return encodeAddress(value);\\n    }\\n    if (param.type === \"bool\") {\\n      return encodeBool(value);\\n    }\\n    if (param.type.startsWith(\"uint\") || param.type.startsWith(\"int\")) {\\n      const signed = param.type.startsWith(\"int\");\\n      const [, , size5 = \"256\"] = integerRegex2.exec(param.type) ?? [];\\n      return encodeNumber(value, {\\n        signed,\\n        size: Number(size5)\\n      });\\n    }\\n    if (param.type.startsWith(\"bytes\")) {\\n      return encodeBytes(value, { param });\\n    }\\n    if (param.type === \"string\") {\\n      return encodeString(value);\\n    }\\n    throw new InvalidAbiEncodingTypeError(param.type, {\\n      docsPath: \"/docs/contract/encodeAbiParameters\"\\n    });\\n  }\\n  function encodeParams(preparedParams) {\\n    let staticSize = 0;\\n    for (let i = 0; i < preparedParams.length; i++) {\\n      const { dynamic, encoded } = preparedParams[i];\\n      if (dynamic)\\n        staticSize += 32;\\n      else\\n        staticSize += size(encoded);\\n    }\\n    const staticParams = [];\\n    const dynamicParams = [];\\n    let dynamicSize = 0;\\n    for (let i = 0; i < preparedParams.length; i++) {\\n      const { dynamic, encoded } = preparedParams[i];\\n      if (dynamic) {\\n        staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }));\\n        dynamicParams.push(encoded);\\n        dynamicSize += size(encoded);\\n      } else {\\n        staticParams.push(encoded);\\n      }\\n    }\\n    return concat([...staticParams, ...dynamicParams]);\\n  }\\n  function encodeAddress(value) {\\n    if (!isAddress(value))\\n      throw new InvalidAddressError({ address: value });\\n    return { dynamic: false, encoded: padHex(value.toLowerCase()) };\\n  }\\n  function encodeArray(value, { length, param }) {\\n    const dynamic = length === null;\\n    if (!Array.isArray(value))\\n      throw new InvalidArrayError(value);\\n    if (!dynamic && value.length !== length)\\n      throw new AbiEncodingArrayLengthMismatchError({\\n        expectedLength: length,\\n        givenLength: value.length,\\n        type: `${param.type}[${length}]`\\n      });\\n    let dynamicChild = false;\\n    const preparedParams = [];\\n    for (let i = 0; i < value.length; i++) {\\n      const preparedParam = prepareParam({ param, value: value[i] });\\n      if (preparedParam.dynamic)\\n        dynamicChild = true;\\n      preparedParams.push(preparedParam);\\n    }\\n    if (dynamic || dynamicChild) {\\n      const data = encodeParams(preparedParams);\\n      if (dynamic) {\\n        const length2 = numberToHex(preparedParams.length, { size: 32 });\\n        return {\\n          dynamic: true,\\n          encoded: preparedParams.length > 0 ? concat([length2, data]) : length2\\n        };\\n      }\\n      if (dynamicChild)\\n        return { dynamic: true, encoded: data };\\n    }\\n    return {\\n      dynamic: false,\\n      encoded: concat(preparedParams.map(({ encoded }) => encoded))\\n    };\\n  }\\n  function encodeBytes(value, { param }) {\\n    const [, paramSize] = param.type.split(\"bytes\");\\n    const bytesSize = size(value);\\n    if (!paramSize) {\\n      let value_ = value;\\n      if (bytesSize % 32 !== 0)\\n        value_ = padHex(value_, {\\n          dir: \"right\",\\n          size: Math.ceil((value.length - 2) / 2 / 32) * 32\\n        });\\n      return {\\n        dynamic: true,\\n        encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_])\\n      };\\n    }\\n    if (bytesSize !== Number.parseInt(paramSize))\\n      throw new AbiEncodingBytesSizeMismatchError({\\n        expectedSize: Number.parseInt(paramSize),\\n        value\\n      });\\n    return { dynamic: false, encoded: padHex(value, { dir: \"right\" }) };\\n  }\\n  function encodeBool(value) {\\n    if (typeof value !== \"boolean\")\\n      throw new BaseError2(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\\\`true\\\\` or \\\\`false\\\\`.`);\\n    return { dynamic: false, encoded: padHex(boolToHex(value)) };\\n  }\\n  function encodeNumber(value, { signed, size: size5 = 256 }) {\\n    if (typeof size5 === \"number\") {\\n      const max = 2n ** (BigInt(size5) - (signed ? 1n : 0n)) - 1n;\\n      const min = signed ? -max - 1n : 0n;\\n      if (value > max || value < min)\\n        throw new IntegerOutOfRangeError({\\n          max: max.toString(),\\n          min: min.toString(),\\n          signed,\\n          size: size5 / 8,\\n          value: value.toString()\\n        });\\n    }\\n    return {\\n      dynamic: false,\\n      encoded: numberToHex(value, {\\n        size: 32,\\n        signed\\n      })\\n    };\\n  }\\n  function encodeString(value) {\\n    const hexValue = stringToHex(value);\\n    const partsLength = Math.ceil(size(hexValue) / 32);\\n    const parts = [];\\n    for (let i = 0; i < partsLength; i++) {\\n      parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {\\n        dir: \"right\"\\n      }));\\n    }\\n    return {\\n      dynamic: true,\\n      encoded: concat([\\n        padHex(numberToHex(size(hexValue), { size: 32 })),\\n        ...parts\\n      ])\\n    };\\n  }\\n  function encodeTuple(value, { param }) {\\n    let dynamic = false;\\n    const preparedParams = [];\\n    for (let i = 0; i < param.components.length; i++) {\\n      const param_ = param.components[i];\\n      const index2 = Array.isArray(value) ? i : param_.name;\\n      const preparedParam = prepareParam({\\n        param: param_,\\n        value: value[index2]\\n      });\\n      preparedParams.push(preparedParam);\\n      if (preparedParam.dynamic)\\n        dynamic = true;\\n    }\\n    return {\\n      dynamic,\\n      encoded: dynamic ? encodeParams(preparedParams) : concat(preparedParams.map(({ encoded }) => encoded))\\n    };\\n  }\\n  function getArrayComponents(type) {\\n    const matches = type.match(/^(.*)\\\\[(\\\\d+)?\\\\]$/);\\n    return matches ? (\\n      // Return `null` if the array is dynamic.\\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\\n    ) : void 0;\\n  }\\n  var init_encodeAbiParameters = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\"() {\\n      init_abi();\\n      init_address();\\n      init_base();\\n      init_encoding();\\n      init_isAddress();\\n      init_concat();\\n      init_pad();\\n      init_size();\\n      init_slice();\\n      init_toHex();\\n      init_regex2();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toFunctionSelector.js\\n  var toFunctionSelector;\\n  var init_toFunctionSelector = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/toFunctionSelector.js\"() {\\n      init_slice();\\n      init_toSignatureHash();\\n      toFunctionSelector = (fn) => slice(toSignatureHash(fn), 0, 4);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/getAbiItem.js\\n  function getAbiItem(parameters) {\\n    const { abi: abi2, args = [], name } = parameters;\\n    const isSelector = isHex(name, { strict: false });\\n    const abiItems = abi2.filter((abiItem) => {\\n      if (isSelector) {\\n        if (abiItem.type === \"function\")\\n          return toFunctionSelector(abiItem) === name;\\n        if (abiItem.type === \"event\")\\n          return toEventSelector(abiItem) === name;\\n        return false;\\n      }\\n      return \"name\" in abiItem && abiItem.name === name;\\n    });\\n    if (abiItems.length === 0)\\n      return void 0;\\n    if (abiItems.length === 1)\\n      return abiItems[0];\\n    let matchedAbiItem = void 0;\\n    for (const abiItem of abiItems) {\\n      if (!(\"inputs\" in abiItem))\\n        continue;\\n      if (!args || args.length === 0) {\\n        if (!abiItem.inputs || abiItem.inputs.length === 0)\\n          return abiItem;\\n        continue;\\n      }\\n      if (!abiItem.inputs)\\n        continue;\\n      if (abiItem.inputs.length === 0)\\n        continue;\\n      if (abiItem.inputs.length !== args.length)\\n        continue;\\n      const matched = args.every((arg, index2) => {\\n        const abiParameter = \"inputs\" in abiItem && abiItem.inputs[index2];\\n        if (!abiParameter)\\n          return false;\\n        return isArgOfType(arg, abiParameter);\\n      });\\n      if (matched) {\\n        if (matchedAbiItem && \"inputs\" in matchedAbiItem && matchedAbiItem.inputs) {\\n          const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\\n          if (ambiguousTypes)\\n            throw new AbiItemAmbiguityError({\\n              abiItem,\\n              type: ambiguousTypes[0]\\n            }, {\\n              abiItem: matchedAbiItem,\\n              type: ambiguousTypes[1]\\n            });\\n        }\\n        matchedAbiItem = abiItem;\\n      }\\n    }\\n    if (matchedAbiItem)\\n      return matchedAbiItem;\\n    return abiItems[0];\\n  }\\n  function isArgOfType(arg, abiParameter) {\\n    const argType = typeof arg;\\n    const abiParameterType = abiParameter.type;\\n    switch (abiParameterType) {\\n      case \"address\":\\n        return isAddress(arg, { strict: false });\\n      case \"bool\":\\n        return argType === \"boolean\";\\n      case \"function\":\\n        return argType === \"string\";\\n      case \"string\":\\n        return argType === \"string\";\\n      default: {\\n        if (abiParameterType === \"tuple\" && \"components\" in abiParameter)\\n          return Object.values(abiParameter.components).every((component, index2) => {\\n            return isArgOfType(Object.values(arg)[index2], component);\\n          });\\n        if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\\n          return argType === \"number\" || argType === \"bigint\";\\n        if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\\n          return argType === \"string\" || arg instanceof Uint8Array;\\n        if (/[a-z]+[1-9]{0,3}(\\\\[[0-9]{0,}\\\\])+$/.test(abiParameterType)) {\\n          return Array.isArray(arg) && arg.every((x) => isArgOfType(x, {\\n            ...abiParameter,\\n            // Pop off `[]` or `[M]` from end of type\\n            type: abiParameterType.replace(/(\\\\[[0-9]{0,}\\\\])$/, \"\")\\n          }));\\n        }\\n        return false;\\n      }\\n    }\\n  }\\n  function getAmbiguousTypes(sourceParameters, targetParameters, args) {\\n    for (const parameterIndex in sourceParameters) {\\n      const sourceParameter = sourceParameters[parameterIndex];\\n      const targetParameter = targetParameters[parameterIndex];\\n      if (sourceParameter.type === \"tuple\" && targetParameter.type === \"tuple\" && \"components\" in sourceParameter && \"components\" in targetParameter)\\n        return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\\n      const types = [sourceParameter.type, targetParameter.type];\\n      const ambiguous = (() => {\\n        if (types.includes(\"address\") && types.includes(\"bytes20\"))\\n          return true;\\n        if (types.includes(\"address\") && types.includes(\"string\"))\\n          return isAddress(args[parameterIndex], { strict: false });\\n        if (types.includes(\"address\") && types.includes(\"bytes\"))\\n          return isAddress(args[parameterIndex], { strict: false });\\n        return false;\\n      })();\\n      if (ambiguous)\\n        return types;\\n    }\\n    return;\\n  }\\n  var init_getAbiItem = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/getAbiItem.js\"() {\\n      init_abi();\\n      init_isHex();\\n      init_isAddress();\\n      init_toEventSelector();\\n      init_toFunctionSelector();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/accounts/utils/parseAccount.js\\n  function parseAccount(account) {\\n    if (typeof account === \"string\")\\n      return { address: account, type: \"json-rpc\" };\\n    return account;\\n  }\\n  var init_parseAccount = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/accounts/utils/parseAccount.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js\\n  function prepareEncodeFunctionData(parameters) {\\n    const { abi: abi2, args, functionName } = parameters;\\n    let abiItem = abi2[0];\\n    if (functionName) {\\n      const item = getAbiItem({\\n        abi: abi2,\\n        args,\\n        name: functionName\\n      });\\n      if (!item)\\n        throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath2 });\\n      abiItem = item;\\n    }\\n    if (abiItem.type !== \"function\")\\n      throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath2 });\\n    return {\\n      abi: [abiItem],\\n      functionName: toFunctionSelector(formatAbiItem2(abiItem))\\n    };\\n  }\\n  var docsPath2;\\n  var init_prepareEncodeFunctionData = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js\"() {\\n      init_abi();\\n      init_toFunctionSelector();\\n      init_formatAbiItem2();\\n      init_getAbiItem();\\n      docsPath2 = \"/docs/contract/encodeFunctionData\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeFunctionData.js\\n  function encodeFunctionData(parameters) {\\n    const { args } = parameters;\\n    const { abi: abi2, functionName } = (() => {\\n      if (parameters.abi.length === 1 && parameters.functionName?.startsWith(\"0x\"))\\n        return parameters;\\n      return prepareEncodeFunctionData(parameters);\\n    })();\\n    const abiItem = abi2[0];\\n    const signature = functionName;\\n    const data = \"inputs\" in abiItem && abiItem.inputs ? encodeAbiParameters(abiItem.inputs, args ?? []) : void 0;\\n    return concatHex([signature, data ?? \"0x\"]);\\n  }\\n  var init_encodeFunctionData = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeFunctionData.js\"() {\\n      init_concat();\\n      init_encodeAbiParameters();\\n      init_prepareEncodeFunctionData();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/solidity.js\\n  var panicReasons, solidityError, solidityPanic;\\n  var init_solidity = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/solidity.js\"() {\\n      panicReasons = {\\n        1: \"An `assert` condition failed.\",\\n        17: \"Arithmetic operation resulted in underflow or overflow.\",\\n        18: \"Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).\",\\n        33: \"Attempted to convert to an invalid type.\",\\n        34: \"Attempted to access a storage byte array that is incorrectly encoded.\",\\n        49: \"Performed `.pop()` on an empty array\",\\n        50: \"Array index is out of bounds.\",\\n        65: \"Allocated too much memory or created an array which is too large.\",\\n        81: \"Attempted to call a zero-initialized variable of internal function type.\"\\n      };\\n      solidityError = {\\n        inputs: [\\n          {\\n            name: \"message\",\\n            type: \"string\"\\n          }\\n        ],\\n        name: \"Error\",\\n        type: \"error\"\\n      };\\n      solidityPanic = {\\n        inputs: [\\n          {\\n            name: \"reason\",\\n            type: \"uint256\"\\n          }\\n        ],\\n        name: \"Panic\",\\n        type: \"error\"\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/cursor.js\\n  var NegativeOffsetError, PositionOutOfBoundsError, RecursiveReadLimitExceededError;\\n  var init_cursor = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/cursor.js\"() {\\n      init_base();\\n      NegativeOffsetError = class extends BaseError2 {\\n        constructor({ offset }) {\\n          super(`Offset \\\\`${offset}\\\\` cannot be negative.`, {\\n            name: \"NegativeOffsetError\"\\n          });\\n        }\\n      };\\n      PositionOutOfBoundsError = class extends BaseError2 {\\n        constructor({ length, position }) {\\n          super(`Position \\\\`${position}\\\\` is out of bounds (\\\\`0 < position < ${length}\\\\`).`, { name: \"PositionOutOfBoundsError\" });\\n        }\\n      };\\n      RecursiveReadLimitExceededError = class extends BaseError2 {\\n        constructor({ count, limit }) {\\n          super(`Recursive read limit of \\\\`${limit}\\\\` exceeded (recursive read count: \\\\`${count}\\\\`).`, { name: \"RecursiveReadLimitExceededError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/cursor.js\\n  function createCursor(bytes, { recursiveReadLimit = 8192 } = {}) {\\n    const cursor = Object.create(staticCursor);\\n    cursor.bytes = bytes;\\n    cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\\n    cursor.positionReadCount = /* @__PURE__ */ new Map();\\n    cursor.recursiveReadLimit = recursiveReadLimit;\\n    return cursor;\\n  }\\n  var staticCursor;\\n  var init_cursor2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/cursor.js\"() {\\n      init_cursor();\\n      staticCursor = {\\n        bytes: new Uint8Array(),\\n        dataView: new DataView(new ArrayBuffer(0)),\\n        position: 0,\\n        positionReadCount: /* @__PURE__ */ new Map(),\\n        recursiveReadCount: 0,\\n        recursiveReadLimit: Number.POSITIVE_INFINITY,\\n        assertReadLimit() {\\n          if (this.recursiveReadCount >= this.recursiveReadLimit)\\n            throw new RecursiveReadLimitExceededError({\\n              count: this.recursiveReadCount + 1,\\n              limit: this.recursiveReadLimit\\n            });\\n        },\\n        assertPosition(position) {\\n          if (position < 0 || position > this.bytes.length - 1)\\n            throw new PositionOutOfBoundsError({\\n              length: this.bytes.length,\\n              position\\n            });\\n        },\\n        decrementPosition(offset) {\\n          if (offset < 0)\\n            throw new NegativeOffsetError({ offset });\\n          const position = this.position - offset;\\n          this.assertPosition(position);\\n          this.position = position;\\n        },\\n        getReadCount(position) {\\n          return this.positionReadCount.get(position || this.position) || 0;\\n        },\\n        incrementPosition(offset) {\\n          if (offset < 0)\\n            throw new NegativeOffsetError({ offset });\\n          const position = this.position + offset;\\n          this.assertPosition(position);\\n          this.position = position;\\n        },\\n        inspectByte(position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position);\\n          return this.bytes[position];\\n        },\\n        inspectBytes(length, position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position + length - 1);\\n          return this.bytes.subarray(position, position + length);\\n        },\\n        inspectUint8(position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position);\\n          return this.bytes[position];\\n        },\\n        inspectUint16(position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position + 1);\\n          return this.dataView.getUint16(position);\\n        },\\n        inspectUint24(position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position + 2);\\n          return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);\\n        },\\n        inspectUint32(position_) {\\n          const position = position_ ?? this.position;\\n          this.assertPosition(position + 3);\\n          return this.dataView.getUint32(position);\\n        },\\n        pushByte(byte) {\\n          this.assertPosition(this.position);\\n          this.bytes[this.position] = byte;\\n          this.position++;\\n        },\\n        pushBytes(bytes) {\\n          this.assertPosition(this.position + bytes.length - 1);\\n          this.bytes.set(bytes, this.position);\\n          this.position += bytes.length;\\n        },\\n        pushUint8(value) {\\n          this.assertPosition(this.position);\\n          this.bytes[this.position] = value;\\n          this.position++;\\n        },\\n        pushUint16(value) {\\n          this.assertPosition(this.position + 1);\\n          this.dataView.setUint16(this.position, value);\\n          this.position += 2;\\n        },\\n        pushUint24(value) {\\n          this.assertPosition(this.position + 2);\\n          this.dataView.setUint16(this.position, value >> 8);\\n          this.dataView.setUint8(this.position + 2, value & ~4294967040);\\n          this.position += 3;\\n        },\\n        pushUint32(value) {\\n          this.assertPosition(this.position + 3);\\n          this.dataView.setUint32(this.position, value);\\n          this.position += 4;\\n        },\\n        readByte() {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectByte();\\n          this.position++;\\n          return value;\\n        },\\n        readBytes(length, size5) {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectBytes(length);\\n          this.position += size5 ?? length;\\n          return value;\\n        },\\n        readUint8() {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectUint8();\\n          this.position += 1;\\n          return value;\\n        },\\n        readUint16() {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectUint16();\\n          this.position += 2;\\n          return value;\\n        },\\n        readUint24() {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectUint24();\\n          this.position += 3;\\n          return value;\\n        },\\n        readUint32() {\\n          this.assertReadLimit();\\n          this._touch();\\n          const value = this.inspectUint32();\\n          this.position += 4;\\n          return value;\\n        },\\n        get remaining() {\\n          return this.bytes.length - this.position;\\n        },\\n        setPosition(position) {\\n          const oldPosition = this.position;\\n          this.assertPosition(position);\\n          this.position = position;\\n          return () => this.position = oldPosition;\\n        },\\n        _touch() {\\n          if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)\\n            return;\\n          const count = this.getReadCount();\\n          this.positionReadCount.set(this.position, count + 1);\\n          if (count > 0)\\n            this.recursiveReadCount++;\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/fromBytes.js\\n  function bytesToBigInt(bytes, opts = {}) {\\n    if (typeof opts.size !== \"undefined\")\\n      assertSize(bytes, { size: opts.size });\\n    const hex = bytesToHex(bytes, opts);\\n    return hexToBigInt(hex, opts);\\n  }\\n  function bytesToBool(bytes_, opts = {}) {\\n    let bytes = bytes_;\\n    if (typeof opts.size !== \"undefined\") {\\n      assertSize(bytes, { size: opts.size });\\n      bytes = trim(bytes);\\n    }\\n    if (bytes.length > 1 || bytes[0] > 1)\\n      throw new InvalidBytesBooleanError(bytes);\\n    return Boolean(bytes[0]);\\n  }\\n  function bytesToNumber(bytes, opts = {}) {\\n    if (typeof opts.size !== \"undefined\")\\n      assertSize(bytes, { size: opts.size });\\n    const hex = bytesToHex(bytes, opts);\\n    return hexToNumber(hex, opts);\\n  }\\n  function bytesToString(bytes_, opts = {}) {\\n    let bytes = bytes_;\\n    if (typeof opts.size !== \"undefined\") {\\n      assertSize(bytes, { size: opts.size });\\n      bytes = trim(bytes, { dir: \"right\" });\\n    }\\n    return new TextDecoder().decode(bytes);\\n  }\\n  var init_fromBytes = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/fromBytes.js\"() {\\n      init_encoding();\\n      init_trim();\\n      init_fromHex();\\n      init_toHex();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\\n  function decodeAbiParameters(params, data) {\\n    const bytes = typeof data === \"string\" ? hexToBytes(data) : data;\\n    const cursor = createCursor(bytes);\\n    if (size(bytes) === 0 && params.length > 0)\\n      throw new AbiDecodingZeroDataError();\\n    if (size(data) && size(data) < 32)\\n      throw new AbiDecodingDataSizeTooSmallError({\\n        data: typeof data === \"string\" ? data : bytesToHex(data),\\n        params,\\n        size: size(data)\\n      });\\n    let consumed = 0;\\n    const values = [];\\n    for (let i = 0; i < params.length; ++i) {\\n      const param = params[i];\\n      cursor.setPosition(consumed);\\n      const [data2, consumed_] = decodeParameter(cursor, param, {\\n        staticPosition: 0\\n      });\\n      consumed += consumed_;\\n      values.push(data2);\\n    }\\n    return values;\\n  }\\n  function decodeParameter(cursor, param, { staticPosition }) {\\n    const arrayComponents = getArrayComponents(param.type);\\n    if (arrayComponents) {\\n      const [length, type] = arrayComponents;\\n      return decodeArray(cursor, { ...param, type }, { length, staticPosition });\\n    }\\n    if (param.type === \"tuple\")\\n      return decodeTuple(cursor, param, { staticPosition });\\n    if (param.type === \"address\")\\n      return decodeAddress(cursor);\\n    if (param.type === \"bool\")\\n      return decodeBool(cursor);\\n    if (param.type.startsWith(\"bytes\"))\\n      return decodeBytes(cursor, param, { staticPosition });\\n    if (param.type.startsWith(\"uint\") || param.type.startsWith(\"int\"))\\n      return decodeNumber(cursor, param);\\n    if (param.type === \"string\")\\n      return decodeString(cursor, { staticPosition });\\n    throw new InvalidAbiDecodingTypeError(param.type, {\\n      docsPath: \"/docs/contract/decodeAbiParameters\"\\n    });\\n  }\\n  function decodeAddress(cursor) {\\n    const value = cursor.readBytes(32);\\n    return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32];\\n  }\\n  function decodeArray(cursor, param, { length, staticPosition }) {\\n    if (!length) {\\n      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\\n      const start = staticPosition + offset;\\n      const startOfData = start + sizeOfLength;\\n      cursor.setPosition(start);\\n      const length2 = bytesToNumber(cursor.readBytes(sizeOfLength));\\n      const dynamicChild = hasDynamicChild(param);\\n      let consumed2 = 0;\\n      const value2 = [];\\n      for (let i = 0; i < length2; ++i) {\\n        cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));\\n        const [data, consumed_] = decodeParameter(cursor, param, {\\n          staticPosition: startOfData\\n        });\\n        consumed2 += consumed_;\\n        value2.push(data);\\n      }\\n      cursor.setPosition(staticPosition + 32);\\n      return [value2, 32];\\n    }\\n    if (hasDynamicChild(param)) {\\n      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\\n      const start = staticPosition + offset;\\n      const value2 = [];\\n      for (let i = 0; i < length; ++i) {\\n        cursor.setPosition(start + i * 32);\\n        const [data] = decodeParameter(cursor, param, {\\n          staticPosition: start\\n        });\\n        value2.push(data);\\n      }\\n      cursor.setPosition(staticPosition + 32);\\n      return [value2, 32];\\n    }\\n    let consumed = 0;\\n    const value = [];\\n    for (let i = 0; i < length; ++i) {\\n      const [data, consumed_] = decodeParameter(cursor, param, {\\n        staticPosition: staticPosition + consumed\\n      });\\n      consumed += consumed_;\\n      value.push(data);\\n    }\\n    return [value, consumed];\\n  }\\n  function decodeBool(cursor) {\\n    return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32];\\n  }\\n  function decodeBytes(cursor, param, { staticPosition }) {\\n    const [_, size5] = param.type.split(\"bytes\");\\n    if (!size5) {\\n      const offset = bytesToNumber(cursor.readBytes(32));\\n      cursor.setPosition(staticPosition + offset);\\n      const length = bytesToNumber(cursor.readBytes(32));\\n      if (length === 0) {\\n        cursor.setPosition(staticPosition + 32);\\n        return [\"0x\", 32];\\n      }\\n      const data = cursor.readBytes(length);\\n      cursor.setPosition(staticPosition + 32);\\n      return [bytesToHex(data), 32];\\n    }\\n    const value = bytesToHex(cursor.readBytes(Number.parseInt(size5), 32));\\n    return [value, 32];\\n  }\\n  function decodeNumber(cursor, param) {\\n    const signed = param.type.startsWith(\"int\");\\n    const size5 = Number.parseInt(param.type.split(\"int\")[1] || \"256\");\\n    const value = cursor.readBytes(32);\\n    return [\\n      size5 > 48 ? bytesToBigInt(value, { signed }) : bytesToNumber(value, { signed }),\\n      32\\n    ];\\n  }\\n  function decodeTuple(cursor, param, { staticPosition }) {\\n    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);\\n    const value = hasUnnamedChild ? [] : {};\\n    let consumed = 0;\\n    if (hasDynamicChild(param)) {\\n      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\\n      const start = staticPosition + offset;\\n      for (let i = 0; i < param.components.length; ++i) {\\n        const component = param.components[i];\\n        cursor.setPosition(start + consumed);\\n        const [data, consumed_] = decodeParameter(cursor, component, {\\n          staticPosition: start\\n        });\\n        consumed += consumed_;\\n        value[hasUnnamedChild ? i : component?.name] = data;\\n      }\\n      cursor.setPosition(staticPosition + 32);\\n      return [value, 32];\\n    }\\n    for (let i = 0; i < param.components.length; ++i) {\\n      const component = param.components[i];\\n      const [data, consumed_] = decodeParameter(cursor, component, {\\n        staticPosition\\n      });\\n      value[hasUnnamedChild ? i : component?.name] = data;\\n      consumed += consumed_;\\n    }\\n    return [value, consumed];\\n  }\\n  function decodeString(cursor, { staticPosition }) {\\n    const offset = bytesToNumber(cursor.readBytes(32));\\n    const start = staticPosition + offset;\\n    cursor.setPosition(start);\\n    const length = bytesToNumber(cursor.readBytes(32));\\n    if (length === 0) {\\n      cursor.setPosition(staticPosition + 32);\\n      return [\"\", 32];\\n    }\\n    const data = cursor.readBytes(length, 32);\\n    const value = bytesToString(trim(data));\\n    cursor.setPosition(staticPosition + 32);\\n    return [value, 32];\\n  }\\n  function hasDynamicChild(param) {\\n    const { type } = param;\\n    if (type === \"string\")\\n      return true;\\n    if (type === \"bytes\")\\n      return true;\\n    if (type.endsWith(\"[]\"))\\n      return true;\\n    if (type === \"tuple\")\\n      return param.components?.some(hasDynamicChild);\\n    const arrayComponents = getArrayComponents(param.type);\\n    if (arrayComponents && hasDynamicChild({ ...param, type: arrayComponents[1] }))\\n      return true;\\n    return false;\\n  }\\n  var sizeOfLength, sizeOfOffset;\\n  var init_decodeAbiParameters = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\"() {\\n      init_abi();\\n      init_getAddress();\\n      init_cursor2();\\n      init_size();\\n      init_slice();\\n      init_trim();\\n      init_fromBytes();\\n      init_toBytes();\\n      init_toHex();\\n      init_encodeAbiParameters();\\n      sizeOfLength = 32;\\n      sizeOfOffset = 32;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeErrorResult.js\\n  function decodeErrorResult(parameters) {\\n    const { abi: abi2, data } = parameters;\\n    const signature = slice(data, 0, 4);\\n    if (signature === \"0x\")\\n      throw new AbiDecodingZeroDataError();\\n    const abi_ = [...abi2 || [], solidityError, solidityPanic];\\n    const abiItem = abi_.find((x) => x.type === \"error\" && signature === toFunctionSelector(formatAbiItem2(x)));\\n    if (!abiItem)\\n      throw new AbiErrorSignatureNotFoundError(signature, {\\n        docsPath: \"/docs/contract/decodeErrorResult\"\\n      });\\n    return {\\n      abiItem,\\n      args: \"inputs\" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? decodeAbiParameters(abiItem.inputs, slice(data, 4)) : void 0,\\n      errorName: abiItem.name\\n    };\\n  }\\n  var init_decodeErrorResult = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeErrorResult.js\"() {\\n      init_solidity();\\n      init_abi();\\n      init_slice();\\n      init_toFunctionSelector();\\n      init_decodeAbiParameters();\\n      init_formatAbiItem2();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/stringify.js\\n  var stringify;\\n  var init_stringify = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/stringify.js\"() {\\n      stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {\\n        const value2 = typeof value_ === \"bigint\" ? value_.toString() : value_;\\n        return typeof replacer === \"function\" ? replacer(key, value2) : value2;\\n      }, space);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/formatAbiItemWithArgs.js\\n  function formatAbiItemWithArgs({ abiItem, args, includeFunctionName = true, includeName = false }) {\\n    if (!(\"name\" in abiItem))\\n      return;\\n    if (!(\"inputs\" in abiItem))\\n      return;\\n    if (!abiItem.inputs)\\n      return;\\n    return `${includeFunctionName ? abiItem.name : \"\"}(${abiItem.inputs.map((input, i) => `${includeName && input.name ? `${input.name}: ` : \"\"}${typeof args[i] === \"object\" ? stringify(args[i]) : args[i]}`).join(\", \")})`;\\n  }\\n  var init_formatAbiItemWithArgs = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/formatAbiItemWithArgs.js\"() {\\n      init_stringify();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/unit.js\\n  var etherUnits, gweiUnits;\\n  var init_unit = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/unit.js\"() {\\n      etherUnits = {\\n        gwei: 9,\\n        wei: 18\\n      };\\n      gweiUnits = {\\n        ether: -9,\\n        wei: 9\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatUnits.js\\n  function formatUnits(value, decimals) {\\n    let display = value.toString();\\n    const negative = display.startsWith(\"-\");\\n    if (negative)\\n      display = display.slice(1);\\n    display = display.padStart(decimals, \"0\");\\n    let [integer, fraction] = [\\n      display.slice(0, display.length - decimals),\\n      display.slice(display.length - decimals)\\n    ];\\n    fraction = fraction.replace(/(0+)$/, \"\");\\n    return `${negative ? \"-\" : \"\"}${integer || \"0\"}${fraction ? `.${fraction}` : \"\"}`;\\n  }\\n  var init_formatUnits = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatUnits.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatEther.js\\n  function formatEther(wei, unit = \"wei\") {\\n    return formatUnits(wei, etherUnits[unit]);\\n  }\\n  var init_formatEther = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatEther.js\"() {\\n      init_unit();\\n      init_formatUnits();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatGwei.js\\n  function formatGwei(wei, unit = \"wei\") {\\n    return formatUnits(wei, gweiUnits[unit]);\\n  }\\n  var init_formatGwei = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/unit/formatGwei.js\"() {\\n      init_unit();\\n      init_formatUnits();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/stateOverride.js\\n  function prettyStateMapping(stateMapping) {\\n    return stateMapping.reduce((pretty, { slot, value }) => {\\n      return `${pretty}        ${slot}: ${value}\\n`;\\n    }, \"\");\\n  }\\n  function prettyStateOverride(stateOverride) {\\n    return stateOverride.reduce((pretty, { address, ...state }) => {\\n      let val = `${pretty}    ${address}:\\n`;\\n      if (state.nonce)\\n        val += `      nonce: ${state.nonce}\\n`;\\n      if (state.balance)\\n        val += `      balance: ${state.balance}\\n`;\\n      if (state.code)\\n        val += `      code: ${state.code}\\n`;\\n      if (state.state) {\\n        val += \"      state:\\\\n\";\\n        val += prettyStateMapping(state.state);\\n      }\\n      if (state.stateDiff) {\\n        val += \"      stateDiff:\\\\n\";\\n        val += prettyStateMapping(state.stateDiff);\\n      }\\n      return val;\\n    }, \"  State Override:\\\\n\").slice(0, -1);\\n  }\\n  var AccountStateConflictError, StateAssignmentConflictError;\\n  var init_stateOverride = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/stateOverride.js\"() {\\n      init_base();\\n      AccountStateConflictError = class extends BaseError2 {\\n        constructor({ address }) {\\n          super(`State for account \"${address}\" is set multiple times.`, {\\n            name: \"AccountStateConflictError\"\\n          });\\n        }\\n      };\\n      StateAssignmentConflictError = class extends BaseError2 {\\n        constructor() {\\n          super(\"state and stateDiff are set on the same account.\", {\\n            name: \"StateAssignmentConflictError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/transaction.js\\n  function prettyPrint(args) {\\n    const entries = Object.entries(args).map(([key, value]) => {\\n      if (value === void 0 || value === false)\\n        return null;\\n      return [key, value];\\n    }).filter(Boolean);\\n    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);\\n    return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join(\"\\\\n\");\\n  }\\n  var FeeConflictError, InvalidLegacyVError, InvalidSerializableTransactionError, InvalidStorageKeySizeError, TransactionExecutionError, TransactionNotFoundError, TransactionReceiptNotFoundError, WaitForTransactionReceiptTimeoutError;\\n  var init_transaction = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/transaction.js\"() {\\n      init_formatEther();\\n      init_formatGwei();\\n      init_base();\\n      FeeConflictError = class extends BaseError2 {\\n        constructor() {\\n          super([\\n            \"Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.\",\\n            \"Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.\"\\n          ].join(\"\\\\n\"), { name: \"FeeConflictError\" });\\n        }\\n      };\\n      InvalidLegacyVError = class extends BaseError2 {\\n        constructor({ v }) {\\n          super(`Invalid \\\\`v\\\\` value \"${v}\". Expected 27 or 28.`, {\\n            name: \"InvalidLegacyVError\"\\n          });\\n        }\\n      };\\n      InvalidSerializableTransactionError = class extends BaseError2 {\\n        constructor({ transaction }) {\\n          super(\"Cannot infer a transaction type from provided transaction.\", {\\n            metaMessages: [\\n              \"Provided Transaction:\",\\n              \"{\",\\n              prettyPrint(transaction),\\n              \"}\",\\n              \"\",\\n              \"To infer the type, either provide:\",\\n              \"- a `type` to the Transaction, or\",\\n              \"- an EIP-1559 Transaction with `maxFeePerGas`, or\",\\n              \"- an EIP-2930 Transaction with `gasPrice` & `accessList`, or\",\\n              \"- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or\",\\n              \"- an EIP-7702 Transaction with `authorizationList`, or\",\\n              \"- a Legacy Transaction with `gasPrice`\"\\n            ],\\n            name: \"InvalidSerializableTransactionError\"\\n          });\\n        }\\n      };\\n      InvalidStorageKeySizeError = class extends BaseError2 {\\n        constructor({ storageKey }) {\\n          super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`, { name: \"InvalidStorageKeySizeError\" });\\n        }\\n      };\\n      TransactionExecutionError = class extends BaseError2 {\\n        constructor(cause, { account, docsPath: docsPath8, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {\\n          const prettyArgs = prettyPrint({\\n            chain: chain && `${chain?.name} (id: ${chain?.id})`,\\n            from: account?.address,\\n            to,\\n            value: typeof value !== \"undefined\" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || \"ETH\"}`,\\n            data,\\n            gas,\\n            gasPrice: typeof gasPrice !== \"undefined\" && `${formatGwei(gasPrice)} gwei`,\\n            maxFeePerGas: typeof maxFeePerGas !== \"undefined\" && `${formatGwei(maxFeePerGas)} gwei`,\\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== \"undefined\" && `${formatGwei(maxPriorityFeePerGas)} gwei`,\\n            nonce\\n          });\\n          super(cause.shortMessage, {\\n            cause,\\n            docsPath: docsPath8,\\n            metaMessages: [\\n              ...cause.metaMessages ? [...cause.metaMessages, \" \"] : [],\\n              \"Request Arguments:\",\\n              prettyArgs\\n            ].filter(Boolean),\\n            name: \"TransactionExecutionError\"\\n          });\\n          Object.defineProperty(this, \"cause\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.cause = cause;\\n        }\\n      };\\n      TransactionNotFoundError = class extends BaseError2 {\\n        constructor({ blockHash, blockNumber, blockTag, hash: hash2, index: index2 }) {\\n          let identifier = \"Transaction\";\\n          if (blockTag && index2 !== void 0)\\n            identifier = `Transaction at block time \"${blockTag}\" at index \"${index2}\"`;\\n          if (blockHash && index2 !== void 0)\\n            identifier = `Transaction at block hash \"${blockHash}\" at index \"${index2}\"`;\\n          if (blockNumber && index2 !== void 0)\\n            identifier = `Transaction at block number \"${blockNumber}\" at index \"${index2}\"`;\\n          if (hash2)\\n            identifier = `Transaction with hash \"${hash2}\"`;\\n          super(`${identifier} could not be found.`, {\\n            name: \"TransactionNotFoundError\"\\n          });\\n        }\\n      };\\n      TransactionReceiptNotFoundError = class extends BaseError2 {\\n        constructor({ hash: hash2 }) {\\n          super(`Transaction receipt with hash \"${hash2}\" could not be found. The Transaction may not be processed on a block yet.`, {\\n            name: \"TransactionReceiptNotFoundError\"\\n          });\\n        }\\n      };\\n      WaitForTransactionReceiptTimeoutError = class extends BaseError2 {\\n        constructor({ hash: hash2 }) {\\n          super(`Timed out while waiting for transaction with hash \"${hash2}\" to be confirmed.`, { name: \"WaitForTransactionReceiptTimeoutError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/utils.js\\n  var getContractAddress, getUrl;\\n  var init_utils3 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/utils.js\"() {\\n      getContractAddress = (address) => address;\\n      getUrl = (url) => url;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/contract.js\\n  var CallExecutionError, ContractFunctionExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, CounterfactualDeploymentFailedError, RawContractError;\\n  var init_contract = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/contract.js\"() {\\n      init_parseAccount();\\n      init_solidity();\\n      init_decodeErrorResult();\\n      init_formatAbiItem2();\\n      init_formatAbiItemWithArgs();\\n      init_getAbiItem();\\n      init_formatEther();\\n      init_formatGwei();\\n      init_abi();\\n      init_base();\\n      init_stateOverride();\\n      init_transaction();\\n      init_utils3();\\n      CallExecutionError = class extends BaseError2 {\\n        constructor(cause, { account: account_, docsPath: docsPath8, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {\\n          const account = account_ ? parseAccount(account_) : void 0;\\n          let prettyArgs = prettyPrint({\\n            from: account?.address,\\n            to,\\n            value: typeof value !== \"undefined\" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || \"ETH\"}`,\\n            data,\\n            gas,\\n            gasPrice: typeof gasPrice !== \"undefined\" && `${formatGwei(gasPrice)} gwei`,\\n            maxFeePerGas: typeof maxFeePerGas !== \"undefined\" && `${formatGwei(maxFeePerGas)} gwei`,\\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== \"undefined\" && `${formatGwei(maxPriorityFeePerGas)} gwei`,\\n            nonce\\n          });\\n          if (stateOverride) {\\n            prettyArgs += `\\n${prettyStateOverride(stateOverride)}`;\\n          }\\n          super(cause.shortMessage, {\\n            cause,\\n            docsPath: docsPath8,\\n            metaMessages: [\\n              ...cause.metaMessages ? [...cause.metaMessages, \" \"] : [],\\n              \"Raw Call Arguments:\",\\n              prettyArgs\\n            ].filter(Boolean),\\n            name: \"CallExecutionError\"\\n          });\\n          Object.defineProperty(this, \"cause\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.cause = cause;\\n        }\\n      };\\n      ContractFunctionExecutionError = class extends BaseError2 {\\n        constructor(cause, { abi: abi2, args, contractAddress, docsPath: docsPath8, functionName, sender }) {\\n          const abiItem = getAbiItem({ abi: abi2, args, name: functionName });\\n          const formattedArgs = abiItem ? formatAbiItemWithArgs({\\n            abiItem,\\n            args,\\n            includeFunctionName: false,\\n            includeName: false\\n          }) : void 0;\\n          const functionWithParams = abiItem ? formatAbiItem2(abiItem, { includeName: true }) : void 0;\\n          const prettyArgs = prettyPrint({\\n            address: contractAddress && getContractAddress(contractAddress),\\n            function: functionWithParams,\\n            args: formattedArgs && formattedArgs !== \"()\" && `${[...Array(functionName?.length ?? 0).keys()].map(() => \" \").join(\"\")}${formattedArgs}`,\\n            sender\\n          });\\n          super(cause.shortMessage || `An unknown error occurred while executing the contract function \"${functionName}\".`, {\\n            cause,\\n            docsPath: docsPath8,\\n            metaMessages: [\\n              ...cause.metaMessages ? [...cause.metaMessages, \" \"] : [],\\n              prettyArgs && \"Contract Call:\",\\n              prettyArgs\\n            ].filter(Boolean),\\n            name: \"ContractFunctionExecutionError\"\\n          });\\n          Object.defineProperty(this, \"abi\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"args\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"cause\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"contractAddress\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"formattedArgs\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"functionName\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"sender\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.abi = abi2;\\n          this.args = args;\\n          this.cause = cause;\\n          this.contractAddress = contractAddress;\\n          this.functionName = functionName;\\n          this.sender = sender;\\n        }\\n      };\\n      ContractFunctionRevertedError = class extends BaseError2 {\\n        constructor({ abi: abi2, data, functionName, message }) {\\n          let cause;\\n          let decodedData = void 0;\\n          let metaMessages;\\n          let reason;\\n          if (data && data !== \"0x\") {\\n            try {\\n              decodedData = decodeErrorResult({ abi: abi2, data });\\n              const { abiItem, errorName, args: errorArgs } = decodedData;\\n              if (errorName === \"Error\") {\\n                reason = errorArgs[0];\\n              } else if (errorName === \"Panic\") {\\n                const [firstArg] = errorArgs;\\n                reason = panicReasons[firstArg];\\n              } else {\\n                const errorWithParams = abiItem ? formatAbiItem2(abiItem, { includeName: true }) : void 0;\\n                const formattedArgs = abiItem && errorArgs ? formatAbiItemWithArgs({\\n                  abiItem,\\n                  args: errorArgs,\\n                  includeFunctionName: false,\\n                  includeName: false\\n                }) : void 0;\\n                metaMessages = [\\n                  errorWithParams ? `Error: ${errorWithParams}` : \"\",\\n                  formattedArgs && formattedArgs !== \"()\" ? `       ${[...Array(errorName?.length ?? 0).keys()].map(() => \" \").join(\"\")}${formattedArgs}` : \"\"\\n                ];\\n              }\\n            } catch (err) {\\n              cause = err;\\n            }\\n          } else if (message)\\n            reason = message;\\n          let signature;\\n          if (cause instanceof AbiErrorSignatureNotFoundError) {\\n            signature = cause.signature;\\n            metaMessages = [\\n              `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\\n              \"Make sure you are using the correct ABI and that the error exists on it.\",\\n              `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`\\n            ];\\n          }\\n          super(reason && reason !== \"execution reverted\" || signature ? [\\n            `The contract function \"${functionName}\" reverted with the following ${signature ? \"signature\" : \"reason\"}:`,\\n            reason || signature\\n          ].join(\"\\\\n\") : `The contract function \"${functionName}\" reverted.`, {\\n            cause,\\n            metaMessages,\\n            name: \"ContractFunctionRevertedError\"\\n          });\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"raw\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"reason\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"signature\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.data = decodedData;\\n          this.raw = data;\\n          this.reason = reason;\\n          this.signature = signature;\\n        }\\n      };\\n      ContractFunctionZeroDataError = class extends BaseError2 {\\n        constructor({ functionName }) {\\n          super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\\n            metaMessages: [\\n              \"This could be due to any of the following:\",\\n              `  - The contract does not have the function \"${functionName}\",`,\\n              \"  - The parameters passed to the contract function may be invalid, or\",\\n              \"  - The address is not a contract.\"\\n            ],\\n            name: \"ContractFunctionZeroDataError\"\\n          });\\n        }\\n      };\\n      CounterfactualDeploymentFailedError = class extends BaseError2 {\\n        constructor({ factory }) {\\n          super(`Deployment for counterfactual contract call failed${factory ? ` for factory \"${factory}\".` : \"\"}`, {\\n            metaMessages: [\\n              \"Please ensure:\",\\n              \"- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).\",\\n              \"- The `factoryData` is a valid encoded function call for contract deployment function on the factory.\"\\n            ],\\n            name: \"CounterfactualDeploymentFailedError\"\\n          });\\n        }\\n      };\\n      RawContractError = class extends BaseError2 {\\n        constructor({ data, message }) {\\n          super(message || \"\", { name: \"RawContractError\" });\\n          Object.defineProperty(this, \"code\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: 3\\n          });\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.data = data;\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/request.js\\n  var HttpRequestError, RpcRequestError, TimeoutError;\\n  var init_request = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/request.js\"() {\\n      init_stringify();\\n      init_base();\\n      init_utils3();\\n      HttpRequestError = class extends BaseError2 {\\n        constructor({ body, cause, details, headers, status, url }) {\\n          super(\"HTTP request failed.\", {\\n            cause,\\n            details,\\n            metaMessages: [\\n              status && `Status: ${status}`,\\n              `URL: ${getUrl(url)}`,\\n              body && `Request body: ${stringify(body)}`\\n            ].filter(Boolean),\\n            name: \"HttpRequestError\"\\n          });\\n          Object.defineProperty(this, \"body\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"headers\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"status\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"url\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.body = body;\\n          this.headers = headers;\\n          this.status = status;\\n          this.url = url;\\n        }\\n      };\\n      RpcRequestError = class extends BaseError2 {\\n        constructor({ body, error, url }) {\\n          super(\"RPC Request failed.\", {\\n            cause: error,\\n            details: error.message,\\n            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\\n            name: \"RpcRequestError\"\\n          });\\n          Object.defineProperty(this, \"code\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.code = error.code;\\n          this.data = error.data;\\n        }\\n      };\\n      TimeoutError = class extends BaseError2 {\\n        constructor({ body, url }) {\\n          super(\"The request took too long to respond.\", {\\n            details: \"The request timed out.\",\\n            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\\n            name: \"TimeoutError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/rpc.js\\n  var unknownErrorCode, RpcError, ProviderRpcError, ParseRpcError, InvalidRequestRpcError, MethodNotFoundRpcError, InvalidParamsRpcError, InternalRpcError, InvalidInputRpcError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, TransactionRejectedRpcError, MethodNotSupportedRpcError, LimitExceededRpcError, JsonRpcVersionUnsupportedError, UserRejectedRequestError, UnauthorizedProviderError, UnsupportedProviderMethodError, ProviderDisconnectedError, ChainDisconnectedError, SwitchChainError, UnsupportedNonOptionalCapabilityError, UnsupportedChainIdError, DuplicateIdError, UnknownBundleIdError, BundleTooLargeError, AtomicReadyWalletRejectedUpgradeError, AtomicityNotSupportedError, UnknownRpcError;\\n  var init_rpc = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/rpc.js\"() {\\n      init_base();\\n      init_request();\\n      unknownErrorCode = -1;\\n      RpcError = class extends BaseError2 {\\n        constructor(cause, { code, docsPath: docsPath8, metaMessages, name, shortMessage }) {\\n          super(shortMessage, {\\n            cause,\\n            docsPath: docsPath8,\\n            metaMessages: metaMessages || cause?.metaMessages,\\n            name: name || \"RpcError\"\\n          });\\n          Object.defineProperty(this, \"code\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.name = name || cause.name;\\n          this.code = cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode;\\n        }\\n      };\\n      ProviderRpcError = class extends RpcError {\\n        constructor(cause, options) {\\n          super(cause, options);\\n          Object.defineProperty(this, \"data\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: void 0\\n          });\\n          this.data = options.data;\\n        }\\n      };\\n      ParseRpcError = class _ParseRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _ParseRpcError.code,\\n            name: \"ParseRpcError\",\\n            shortMessage: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ParseRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32700\\n      });\\n      InvalidRequestRpcError = class _InvalidRequestRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _InvalidRequestRpcError.code,\\n            name: \"InvalidRequestRpcError\",\\n            shortMessage: \"JSON is not a valid request object.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(InvalidRequestRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32600\\n      });\\n      MethodNotFoundRpcError = class _MethodNotFoundRpcError extends RpcError {\\n        constructor(cause, { method } = {}) {\\n          super(cause, {\\n            code: _MethodNotFoundRpcError.code,\\n            name: \"MethodNotFoundRpcError\",\\n            shortMessage: `The method${method ? ` \"${method}\"` : \"\"} does not exist / is not available.`\\n          });\\n        }\\n      };\\n      Object.defineProperty(MethodNotFoundRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32601\\n      });\\n      InvalidParamsRpcError = class _InvalidParamsRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _InvalidParamsRpcError.code,\\n            name: \"InvalidParamsRpcError\",\\n            shortMessage: [\\n              \"Invalid parameters were provided to the RPC method.\",\\n              \"Double check you have provided the correct parameters.\"\\n            ].join(\"\\\\n\")\\n          });\\n        }\\n      };\\n      Object.defineProperty(InvalidParamsRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32602\\n      });\\n      InternalRpcError = class _InternalRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _InternalRpcError.code,\\n            name: \"InternalRpcError\",\\n            shortMessage: \"An internal error was received.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(InternalRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32603\\n      });\\n      InvalidInputRpcError = class _InvalidInputRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _InvalidInputRpcError.code,\\n            name: \"InvalidInputRpcError\",\\n            shortMessage: [\\n              \"Missing or invalid parameters.\",\\n              \"Double check you have provided the correct parameters.\"\\n            ].join(\"\\\\n\")\\n          });\\n        }\\n      };\\n      Object.defineProperty(InvalidInputRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32e3\\n      });\\n      ResourceNotFoundRpcError = class _ResourceNotFoundRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _ResourceNotFoundRpcError.code,\\n            name: \"ResourceNotFoundRpcError\",\\n            shortMessage: \"Requested resource not found.\"\\n          });\\n          Object.defineProperty(this, \"name\", {\\n            enumerable: true,\\n            configurable: true,\\n            writable: true,\\n            value: \"ResourceNotFoundRpcError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ResourceNotFoundRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32001\\n      });\\n      ResourceUnavailableRpcError = class _ResourceUnavailableRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _ResourceUnavailableRpcError.code,\\n            name: \"ResourceUnavailableRpcError\",\\n            shortMessage: \"Requested resource not available.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ResourceUnavailableRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32002\\n      });\\n      TransactionRejectedRpcError = class _TransactionRejectedRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _TransactionRejectedRpcError.code,\\n            name: \"TransactionRejectedRpcError\",\\n            shortMessage: \"Transaction creation failed.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(TransactionRejectedRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32003\\n      });\\n      MethodNotSupportedRpcError = class _MethodNotSupportedRpcError extends RpcError {\\n        constructor(cause, { method } = {}) {\\n          super(cause, {\\n            code: _MethodNotSupportedRpcError.code,\\n            name: \"MethodNotSupportedRpcError\",\\n            shortMessage: `Method${method ? ` \"${method}\"` : \"\"} is not supported.`\\n          });\\n        }\\n      };\\n      Object.defineProperty(MethodNotSupportedRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32004\\n      });\\n      LimitExceededRpcError = class _LimitExceededRpcError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _LimitExceededRpcError.code,\\n            name: \"LimitExceededRpcError\",\\n            shortMessage: \"Request exceeds defined limit.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(LimitExceededRpcError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32005\\n      });\\n      JsonRpcVersionUnsupportedError = class _JsonRpcVersionUnsupportedError extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _JsonRpcVersionUnsupportedError.code,\\n            name: \"JsonRpcVersionUnsupportedError\",\\n            shortMessage: \"Version of JSON-RPC protocol is not supported.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(JsonRpcVersionUnsupportedError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: -32006\\n      });\\n      UserRejectedRequestError = class _UserRejectedRequestError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _UserRejectedRequestError.code,\\n            name: \"UserRejectedRequestError\",\\n            shortMessage: \"User rejected the request.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(UserRejectedRequestError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4001\\n      });\\n      UnauthorizedProviderError = class _UnauthorizedProviderError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _UnauthorizedProviderError.code,\\n            name: \"UnauthorizedProviderError\",\\n            shortMessage: \"The requested method and/or account has not been authorized by the user.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(UnauthorizedProviderError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4100\\n      });\\n      UnsupportedProviderMethodError = class _UnsupportedProviderMethodError extends ProviderRpcError {\\n        constructor(cause, { method } = {}) {\\n          super(cause, {\\n            code: _UnsupportedProviderMethodError.code,\\n            name: \"UnsupportedProviderMethodError\",\\n            shortMessage: `The Provider does not support the requested method${method ? ` \" ${method}\"` : \"\"}.`\\n          });\\n        }\\n      };\\n      Object.defineProperty(UnsupportedProviderMethodError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4200\\n      });\\n      ProviderDisconnectedError = class _ProviderDisconnectedError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _ProviderDisconnectedError.code,\\n            name: \"ProviderDisconnectedError\",\\n            shortMessage: \"The Provider is disconnected from all chains.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ProviderDisconnectedError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4900\\n      });\\n      ChainDisconnectedError = class _ChainDisconnectedError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _ChainDisconnectedError.code,\\n            name: \"ChainDisconnectedError\",\\n            shortMessage: \"The Provider is not connected to the requested chain.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ChainDisconnectedError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4901\\n      });\\n      SwitchChainError = class _SwitchChainError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _SwitchChainError.code,\\n            name: \"SwitchChainError\",\\n            shortMessage: \"An error occurred when attempting to switch chain.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(SwitchChainError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 4902\\n      });\\n      UnsupportedNonOptionalCapabilityError = class _UnsupportedNonOptionalCapabilityError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _UnsupportedNonOptionalCapabilityError.code,\\n            name: \"UnsupportedNonOptionalCapabilityError\",\\n            shortMessage: \"This Wallet does not support a capability that was not marked as optional.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(UnsupportedNonOptionalCapabilityError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5700\\n      });\\n      UnsupportedChainIdError = class _UnsupportedChainIdError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _UnsupportedChainIdError.code,\\n            name: \"UnsupportedChainIdError\",\\n            shortMessage: \"This Wallet does not support the requested chain ID.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(UnsupportedChainIdError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5710\\n      });\\n      DuplicateIdError = class _DuplicateIdError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _DuplicateIdError.code,\\n            name: \"DuplicateIdError\",\\n            shortMessage: \"There is already a bundle submitted with this ID.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(DuplicateIdError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5720\\n      });\\n      UnknownBundleIdError = class _UnknownBundleIdError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _UnknownBundleIdError.code,\\n            name: \"UnknownBundleIdError\",\\n            shortMessage: \"This bundle id is unknown / has not been submitted\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(UnknownBundleIdError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5730\\n      });\\n      BundleTooLargeError = class _BundleTooLargeError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _BundleTooLargeError.code,\\n            name: \"BundleTooLargeError\",\\n            shortMessage: \"The call bundle is too large for the Wallet to process.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(BundleTooLargeError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5740\\n      });\\n      AtomicReadyWalletRejectedUpgradeError = class _AtomicReadyWalletRejectedUpgradeError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _AtomicReadyWalletRejectedUpgradeError.code,\\n            name: \"AtomicReadyWalletRejectedUpgradeError\",\\n            shortMessage: \"The Wallet can support atomicity after an upgrade, but the user rejected the upgrade.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(AtomicReadyWalletRejectedUpgradeError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5750\\n      });\\n      AtomicityNotSupportedError = class _AtomicityNotSupportedError extends ProviderRpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            code: _AtomicityNotSupportedError.code,\\n            name: \"AtomicityNotSupportedError\",\\n            shortMessage: \"The wallet does not support atomic execution but the request requires it.\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(AtomicityNotSupportedError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 5760\\n      });\\n      UnknownRpcError = class extends RpcError {\\n        constructor(cause) {\\n          super(cause, {\\n            name: \"UnknownRpcError\",\\n            shortMessage: \"An unknown RPC error occurred.\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_md.js\\n  function setBigUint64(view, byteOffset, value, isLE3) {\\n    if (typeof view.setBigUint64 === \"function\")\\n      return view.setBigUint64(byteOffset, value, isLE3);\\n    const _32n3 = BigInt(32);\\n    const _u32_max = BigInt(4294967295);\\n    const wh = Number(value >> _32n3 & _u32_max);\\n    const wl = Number(value & _u32_max);\\n    const h = isLE3 ? 4 : 0;\\n    const l = isLE3 ? 0 : 4;\\n    view.setUint32(byteOffset + h, wh, isLE3);\\n    view.setUint32(byteOffset + l, wl, isLE3);\\n  }\\n  function Chi(a, b, c) {\\n    return a & b ^ ~a & c;\\n  }\\n  function Maj(a, b, c) {\\n    return a & b ^ a & c ^ b & c;\\n  }\\n  var HashMD;\\n  var init_md = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_md.js\"() {\\n      init_assert();\\n      init_utils2();\\n      HashMD = class extends Hash {\\n        constructor(blockLen, outputLen, padOffset, isLE3) {\\n          super();\\n          this.blockLen = blockLen;\\n          this.outputLen = outputLen;\\n          this.padOffset = padOffset;\\n          this.isLE = isLE3;\\n          this.finished = false;\\n          this.length = 0;\\n          this.pos = 0;\\n          this.destroyed = false;\\n          this.buffer = new Uint8Array(blockLen);\\n          this.view = createView(this.buffer);\\n        }\\n        update(data) {\\n          aexists(this);\\n          const { view, buffer: buffer2, blockLen } = this;\\n          data = toBytes2(data);\\n          const len = data.length;\\n          for (let pos = 0; pos < len; ) {\\n            const take = Math.min(blockLen - this.pos, len - pos);\\n            if (take === blockLen) {\\n              const dataView = createView(data);\\n              for (; blockLen <= len - pos; pos += blockLen)\\n                this.process(dataView, pos);\\n              continue;\\n            }\\n            buffer2.set(data.subarray(pos, pos + take), this.pos);\\n            this.pos += take;\\n            pos += take;\\n            if (this.pos === blockLen) {\\n              this.process(view, 0);\\n              this.pos = 0;\\n            }\\n          }\\n          this.length += data.length;\\n          this.roundClean();\\n          return this;\\n        }\\n        digestInto(out) {\\n          aexists(this);\\n          aoutput(out, this);\\n          this.finished = true;\\n          const { buffer: buffer2, view, blockLen, isLE: isLE3 } = this;\\n          let { pos } = this;\\n          buffer2[pos++] = 128;\\n          this.buffer.subarray(pos).fill(0);\\n          if (this.padOffset > blockLen - pos) {\\n            this.process(view, 0);\\n            pos = 0;\\n          }\\n          for (let i = pos; i < blockLen; i++)\\n            buffer2[i] = 0;\\n          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE3);\\n          this.process(view, 0);\\n          const oview = createView(out);\\n          const len = this.outputLen;\\n          if (len % 4)\\n            throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\\n          const outLen = len / 4;\\n          const state = this.get();\\n          if (outLen > state.length)\\n            throw new Error(\"_sha2: outputLen bigger than state\");\\n          for (let i = 0; i < outLen; i++)\\n            oview.setUint32(4 * i, state[i], isLE3);\\n        }\\n        digest() {\\n          const { buffer: buffer2, outputLen } = this;\\n          this.digestInto(buffer2);\\n          const res = buffer2.slice(0, outputLen);\\n          this.destroy();\\n          return res;\\n        }\\n        _cloneInto(to) {\\n          to || (to = new this.constructor());\\n          to.set(...this.get());\\n          const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;\\n          to.length = length;\\n          to.pos = pos;\\n          to.finished = finished;\\n          to.destroyed = destroyed;\\n          if (length % blockLen)\\n            to.buffer.set(buffer2);\\n          return to;\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha256.js\\n  var SHA256_K, SHA256_IV, SHA256_W, SHA256, sha256;\\n  var init_sha256 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha256.js\"() {\\n      init_md();\\n      init_utils2();\\n      SHA256_K = /* @__PURE__ */ new Uint32Array([\\n        1116352408,\\n        1899447441,\\n        3049323471,\\n        3921009573,\\n        961987163,\\n        1508970993,\\n        2453635748,\\n        2870763221,\\n        3624381080,\\n        310598401,\\n        607225278,\\n        1426881987,\\n        1925078388,\\n        2162078206,\\n        2614888103,\\n        3248222580,\\n        3835390401,\\n        4022224774,\\n        264347078,\\n        604807628,\\n        770255983,\\n        1249150122,\\n        1555081692,\\n        1996064986,\\n        2554220882,\\n        2821834349,\\n        2952996808,\\n        3210313671,\\n        3336571891,\\n        3584528711,\\n        113926993,\\n        338241895,\\n        666307205,\\n        773529912,\\n        1294757372,\\n        1396182291,\\n        1695183700,\\n        1986661051,\\n        2177026350,\\n        2456956037,\\n        2730485921,\\n        2820302411,\\n        3259730800,\\n        3345764771,\\n        3516065817,\\n        3600352804,\\n        4094571909,\\n        275423344,\\n        430227734,\\n        506948616,\\n        659060556,\\n        883997877,\\n        958139571,\\n        1322822218,\\n        1537002063,\\n        1747873779,\\n        1955562222,\\n        2024104815,\\n        2227730452,\\n        2361852424,\\n        2428436474,\\n        2756734187,\\n        3204031479,\\n        3329325298\\n      ]);\\n      SHA256_IV = /* @__PURE__ */ new Uint32Array([\\n        1779033703,\\n        3144134277,\\n        1013904242,\\n        2773480762,\\n        1359893119,\\n        2600822924,\\n        528734635,\\n        1541459225\\n      ]);\\n      SHA256_W = /* @__PURE__ */ new Uint32Array(64);\\n      SHA256 = class extends HashMD {\\n        constructor() {\\n          super(64, 32, 8, false);\\n          this.A = SHA256_IV[0] | 0;\\n          this.B = SHA256_IV[1] | 0;\\n          this.C = SHA256_IV[2] | 0;\\n          this.D = SHA256_IV[3] | 0;\\n          this.E = SHA256_IV[4] | 0;\\n          this.F = SHA256_IV[5] | 0;\\n          this.G = SHA256_IV[6] | 0;\\n          this.H = SHA256_IV[7] | 0;\\n        }\\n        get() {\\n          const { A, B, C, D, E, F, G, H } = this;\\n          return [A, B, C, D, E, F, G, H];\\n        }\\n        // prettier-ignore\\n        set(A, B, C, D, E, F, G, H) {\\n          this.A = A | 0;\\n          this.B = B | 0;\\n          this.C = C | 0;\\n          this.D = D | 0;\\n          this.E = E | 0;\\n          this.F = F | 0;\\n          this.G = G | 0;\\n          this.H = H | 0;\\n        }\\n        process(view, offset) {\\n          for (let i = 0; i < 16; i++, offset += 4)\\n            SHA256_W[i] = view.getUint32(offset, false);\\n          for (let i = 16; i < 64; i++) {\\n            const W15 = SHA256_W[i - 15];\\n            const W2 = SHA256_W[i - 2];\\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\\n          }\\n          let { A, B, C, D, E, F, G, H } = this;\\n          for (let i = 0; i < 64; i++) {\\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\\n            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\\n            const T2 = sigma0 + Maj(A, B, C) | 0;\\n            H = G;\\n            G = F;\\n            F = E;\\n            E = D + T1 | 0;\\n            D = C;\\n            C = B;\\n            B = A;\\n            A = T1 + T2 | 0;\\n          }\\n          A = A + this.A | 0;\\n          B = B + this.B | 0;\\n          C = C + this.C | 0;\\n          D = D + this.D | 0;\\n          E = E + this.E | 0;\\n          F = F + this.F | 0;\\n          G = G + this.G | 0;\\n          H = H + this.H | 0;\\n          this.set(A, B, C, D, E, F, G, H);\\n        }\\n        roundClean() {\\n          SHA256_W.fill(0);\\n        }\\n        destroy() {\\n          this.set(0, 0, 0, 0, 0, 0, 0, 0);\\n          this.buffer.fill(0);\\n        }\\n      };\\n      sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/hmac.js\\n  var HMAC, hmac;\\n  var init_hmac = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/hmac.js\"() {\\n      init_assert();\\n      init_utils2();\\n      HMAC = class extends Hash {\\n        constructor(hash2, _key) {\\n          super();\\n          this.finished = false;\\n          this.destroyed = false;\\n          ahash(hash2);\\n          const key = toBytes2(_key);\\n          this.iHash = hash2.create();\\n          if (typeof this.iHash.update !== \"function\")\\n            throw new Error(\"Expected instance of class which extends utils.Hash\");\\n          this.blockLen = this.iHash.blockLen;\\n          this.outputLen = this.iHash.outputLen;\\n          const blockLen = this.blockLen;\\n          const pad4 = new Uint8Array(blockLen);\\n          pad4.set(key.length > blockLen ? hash2.create().update(key).digest() : key);\\n          for (let i = 0; i < pad4.length; i++)\\n            pad4[i] ^= 54;\\n          this.iHash.update(pad4);\\n          this.oHash = hash2.create();\\n          for (let i = 0; i < pad4.length; i++)\\n            pad4[i] ^= 54 ^ 92;\\n          this.oHash.update(pad4);\\n          pad4.fill(0);\\n        }\\n        update(buf) {\\n          aexists(this);\\n          this.iHash.update(buf);\\n          return this;\\n        }\\n        digestInto(out) {\\n          aexists(this);\\n          abytes(out, this.outputLen);\\n          this.finished = true;\\n          this.iHash.digestInto(out);\\n          this.oHash.update(out);\\n          this.oHash.digestInto(out);\\n          this.destroy();\\n        }\\n        digest() {\\n          const out = new Uint8Array(this.oHash.outputLen);\\n          this.digestInto(out);\\n          return out;\\n        }\\n        _cloneInto(to) {\\n          to || (to = Object.create(Object.getPrototypeOf(this), {}));\\n          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\\n          to = to;\\n          to.finished = finished;\\n          to.destroyed = destroyed;\\n          to.blockLen = blockLen;\\n          to.outputLen = outputLen;\\n          to.oHash = oHash._cloneInto(to.oHash);\\n          to.iHash = iHash._cloneInto(to.iHash);\\n          return to;\\n        }\\n        destroy() {\\n          this.destroyed = true;\\n          this.oHash.destroy();\\n          this.iHash.destroy();\\n        }\\n      };\\n      hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();\\n      hmac.create = (hash2, key) => new HMAC(hash2, key);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/utils.js\\n  var utils_exports = {};\\n  __export(utils_exports, {\\n    aInRange: () => aInRange,\\n    abool: () => abool,\\n    abytes: () => abytes2,\\n    bitGet: () => bitGet,\\n    bitLen: () => bitLen,\\n    bitMask: () => bitMask,\\n    bitSet: () => bitSet,\\n    bytesToHex: () => bytesToHex2,\\n    bytesToNumberBE: () => bytesToNumberBE,\\n    bytesToNumberLE: () => bytesToNumberLE,\\n    concatBytes: () => concatBytes3,\\n    createHmacDrbg: () => createHmacDrbg,\\n    ensureBytes: () => ensureBytes,\\n    equalBytes: () => equalBytes,\\n    hexToBytes: () => hexToBytes2,\\n    hexToNumber: () => hexToNumber2,\\n    inRange: () => inRange,\\n    isBytes: () => isBytes2,\\n    memoized: () => memoized,\\n    notImplemented: () => notImplemented,\\n    numberToBytesBE: () => numberToBytesBE,\\n    numberToBytesLE: () => numberToBytesLE,\\n    numberToHexUnpadded: () => numberToHexUnpadded,\\n    numberToVarBytesBE: () => numberToVarBytesBE,\\n    utf8ToBytes: () => utf8ToBytes2,\\n    validateObject: () => validateObject\\n  });\\n  function isBytes2(a) {\\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\\n  }\\n  function abytes2(item) {\\n    if (!isBytes2(item))\\n      throw new Error(\"Uint8Array expected\");\\n  }\\n  function abool(title, value) {\\n    if (typeof value !== \"boolean\")\\n      throw new Error(title + \" boolean expected, got \" + value);\\n  }\\n  function bytesToHex2(bytes) {\\n    abytes2(bytes);\\n    let hex = \"\";\\n    for (let i = 0; i < bytes.length; i++) {\\n      hex += hexes2[bytes[i]];\\n    }\\n    return hex;\\n  }\\n  function numberToHexUnpadded(num2) {\\n    const hex = num2.toString(16);\\n    return hex.length & 1 ? \"0\" + hex : hex;\\n  }\\n  function hexToNumber2(hex) {\\n    if (typeof hex !== \"string\")\\n      throw new Error(\"hex string expected, got \" + typeof hex);\\n    return hex === \"\" ? _0n2 : BigInt(\"0x\" + hex);\\n  }\\n  function asciiToBase16(ch) {\\n    if (ch >= asciis._0 && ch <= asciis._9)\\n      return ch - asciis._0;\\n    if (ch >= asciis.A && ch <= asciis.F)\\n      return ch - (asciis.A - 10);\\n    if (ch >= asciis.a && ch <= asciis.f)\\n      return ch - (asciis.a - 10);\\n    return;\\n  }\\n  function hexToBytes2(hex) {\\n    if (typeof hex !== \"string\")\\n      throw new Error(\"hex string expected, got \" + typeof hex);\\n    const hl = hex.length;\\n    const al = hl / 2;\\n    if (hl % 2)\\n      throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\\n    const array = new Uint8Array(al);\\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\\n      const n1 = asciiToBase16(hex.charCodeAt(hi));\\n      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\\n      if (n1 === void 0 || n2 === void 0) {\\n        const char = hex[hi] + hex[hi + 1];\\n        throw new Error(\\'hex string expected, got non-hex character \"\\' + char + \\'\" at index \\' + hi);\\n      }\\n      array[ai] = n1 * 16 + n2;\\n    }\\n    return array;\\n  }\\n  function bytesToNumberBE(bytes) {\\n    return hexToNumber2(bytesToHex2(bytes));\\n  }\\n  function bytesToNumberLE(bytes) {\\n    abytes2(bytes);\\n    return hexToNumber2(bytesToHex2(Uint8Array.from(bytes).reverse()));\\n  }\\n  function numberToBytesBE(n, len) {\\n    return hexToBytes2(n.toString(16).padStart(len * 2, \"0\"));\\n  }\\n  function numberToBytesLE(n, len) {\\n    return numberToBytesBE(n, len).reverse();\\n  }\\n  function numberToVarBytesBE(n) {\\n    return hexToBytes2(numberToHexUnpadded(n));\\n  }\\n  function ensureBytes(title, hex, expectedLength) {\\n    let res;\\n    if (typeof hex === \"string\") {\\n      try {\\n        res = hexToBytes2(hex);\\n      } catch (e) {\\n        throw new Error(title + \" must be hex string or Uint8Array, cause: \" + e);\\n      }\\n    } else if (isBytes2(hex)) {\\n      res = Uint8Array.from(hex);\\n    } else {\\n      throw new Error(title + \" must be hex string or Uint8Array\");\\n    }\\n    const len = res.length;\\n    if (typeof expectedLength === \"number\" && len !== expectedLength)\\n      throw new Error(title + \" of length \" + expectedLength + \" expected, got \" + len);\\n    return res;\\n  }\\n  function concatBytes3(...arrays) {\\n    let sum = 0;\\n    for (let i = 0; i < arrays.length; i++) {\\n      const a = arrays[i];\\n      abytes2(a);\\n      sum += a.length;\\n    }\\n    const res = new Uint8Array(sum);\\n    for (let i = 0, pad4 = 0; i < arrays.length; i++) {\\n      const a = arrays[i];\\n      res.set(a, pad4);\\n      pad4 += a.length;\\n    }\\n    return res;\\n  }\\n  function equalBytes(a, b) {\\n    if (a.length !== b.length)\\n      return false;\\n    let diff = 0;\\n    for (let i = 0; i < a.length; i++)\\n      diff |= a[i] ^ b[i];\\n    return diff === 0;\\n  }\\n  function utf8ToBytes2(str) {\\n    if (typeof str !== \"string\")\\n      throw new Error(\"string expected\");\\n    return new Uint8Array(new TextEncoder().encode(str));\\n  }\\n  function inRange(n, min, max) {\\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\\n  }\\n  function aInRange(title, n, min, max) {\\n    if (!inRange(n, min, max))\\n      throw new Error(\"expected valid \" + title + \": \" + min + \" <= n < \" + max + \", got \" + n);\\n  }\\n  function bitLen(n) {\\n    let len;\\n    for (len = 0; n > _0n2; n >>= _1n2, len += 1)\\n      ;\\n    return len;\\n  }\\n  function bitGet(n, pos) {\\n    return n >> BigInt(pos) & _1n2;\\n  }\\n  function bitSet(n, pos, value) {\\n    return n | (value ? _1n2 : _0n2) << BigInt(pos);\\n  }\\n  function createHmacDrbg(hashLen, qByteLen, hmacFn) {\\n    if (typeof hashLen !== \"number\" || hashLen < 2)\\n      throw new Error(\"hashLen must be a number\");\\n    if (typeof qByteLen !== \"number\" || qByteLen < 2)\\n      throw new Error(\"qByteLen must be a number\");\\n    if (typeof hmacFn !== \"function\")\\n      throw new Error(\"hmacFn must be a function\");\\n    let v = u8n(hashLen);\\n    let k = u8n(hashLen);\\n    let i = 0;\\n    const reset = () => {\\n      v.fill(1);\\n      k.fill(0);\\n      i = 0;\\n    };\\n    const h = (...b) => hmacFn(k, v, ...b);\\n    const reseed = (seed = u8n()) => {\\n      k = h(u8fr([0]), seed);\\n      v = h();\\n      if (seed.length === 0)\\n        return;\\n      k = h(u8fr([1]), seed);\\n      v = h();\\n    };\\n    const gen3 = () => {\\n      if (i++ >= 1e3)\\n        throw new Error(\"drbg: tried 1000 values\");\\n      let len = 0;\\n      const out = [];\\n      while (len < qByteLen) {\\n        v = h();\\n        const sl = v.slice();\\n        out.push(sl);\\n        len += v.length;\\n      }\\n      return concatBytes3(...out);\\n    };\\n    const genUntil = (seed, pred) => {\\n      reset();\\n      reseed(seed);\\n      let res = void 0;\\n      while (!(res = pred(gen3())))\\n        reseed();\\n      reset();\\n      return res;\\n    };\\n    return genUntil;\\n  }\\n  function validateObject(object, validators, optValidators = {}) {\\n    const checkField = (fieldName, type, isOptional) => {\\n      const checkVal = validatorFns[type];\\n      if (typeof checkVal !== \"function\")\\n        throw new Error(\"invalid validator function\");\\n      const val = object[fieldName];\\n      if (isOptional && val === void 0)\\n        return;\\n      if (!checkVal(val, object)) {\\n        throw new Error(\"param \" + String(fieldName) + \" is invalid. Expected \" + type + \", got \" + val);\\n      }\\n    };\\n    for (const [fieldName, type] of Object.entries(validators))\\n      checkField(fieldName, type, false);\\n    for (const [fieldName, type] of Object.entries(optValidators))\\n      checkField(fieldName, type, true);\\n    return object;\\n  }\\n  function memoized(fn) {\\n    const map = /* @__PURE__ */ new WeakMap();\\n    return (arg, ...args) => {\\n      const val = map.get(arg);\\n      if (val !== void 0)\\n        return val;\\n      const computed = fn(arg, ...args);\\n      map.set(arg, computed);\\n      return computed;\\n    };\\n  }\\n  var _0n2, _1n2, _2n2, hexes2, asciis, isPosBig, bitMask, u8n, u8fr, validatorFns, notImplemented;\\n  var init_utils4 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/utils.js\"() {\\n      _0n2 = /* @__PURE__ */ BigInt(0);\\n      _1n2 = /* @__PURE__ */ BigInt(1);\\n      _2n2 = /* @__PURE__ */ BigInt(2);\\n      hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, \"0\"));\\n      asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\\n      isPosBig = (n) => typeof n === \"bigint\" && _0n2 <= n;\\n      bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2;\\n      u8n = (data) => new Uint8Array(data);\\n      u8fr = (arr) => Uint8Array.from(arr);\\n      validatorFns = {\\n        bigint: (val) => typeof val === \"bigint\",\\n        function: (val) => typeof val === \"function\",\\n        boolean: (val) => typeof val === \"boolean\",\\n        string: (val) => typeof val === \"string\",\\n        stringOrUint8Array: (val) => typeof val === \"string\" || isBytes2(val),\\n        isSafeInteger: (val) => Number.isSafeInteger(val),\\n        array: (val) => Array.isArray(val),\\n        field: (val, object) => object.Fp.isValid(val),\\n        hash: (val) => typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\\n      };\\n      notImplemented = () => {\\n        throw new Error(\"not implemented\");\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/modular.js\\n  function mod(a, b) {\\n    const result = a % b;\\n    return result >= _0n3 ? result : b + result;\\n  }\\n  function pow(num2, power, modulo) {\\n    if (power < _0n3)\\n      throw new Error(\"invalid exponent, negatives unsupported\");\\n    if (modulo <= _0n3)\\n      throw new Error(\"invalid modulus\");\\n    if (modulo === _1n3)\\n      return _0n3;\\n    let res = _1n3;\\n    while (power > _0n3) {\\n      if (power & _1n3)\\n        res = res * num2 % modulo;\\n      num2 = num2 * num2 % modulo;\\n      power >>= _1n3;\\n    }\\n    return res;\\n  }\\n  function pow2(x, power, modulo) {\\n    let res = x;\\n    while (power-- > _0n3) {\\n      res *= res;\\n      res %= modulo;\\n    }\\n    return res;\\n  }\\n  function invert(number, modulo) {\\n    if (number === _0n3)\\n      throw new Error(\"invert: expected non-zero number\");\\n    if (modulo <= _0n3)\\n      throw new Error(\"invert: expected positive modulus, got \" + modulo);\\n    let a = mod(number, modulo);\\n    let b = modulo;\\n    let x = _0n3, y = _1n3, u = _1n3, v = _0n3;\\n    while (a !== _0n3) {\\n      const q = b / a;\\n      const r = b % a;\\n      const m = x - u * q;\\n      const n = y - v * q;\\n      b = a, a = r, x = u, y = v, u = m, v = n;\\n    }\\n    const gcd = b;\\n    if (gcd !== _1n3)\\n      throw new Error(\"invert: does not exist\");\\n    return mod(x, modulo);\\n  }\\n  function tonelliShanks(P) {\\n    const legendreC = (P - _1n3) / _2n3;\\n    let Q, S, Z;\\n    for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)\\n      ;\\n    for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++) {\\n      if (Z > 1e3)\\n        throw new Error(\"Cannot find square root: likely non-prime P\");\\n    }\\n    if (S === 1) {\\n      const p1div4 = (P + _1n3) / _4n;\\n      return function tonelliFast(Fp, n) {\\n        const root = Fp.pow(n, p1div4);\\n        if (!Fp.eql(Fp.sqr(root), n))\\n          throw new Error(\"Cannot find square root\");\\n        return root;\\n      };\\n    }\\n    const Q1div2 = (Q + _1n3) / _2n3;\\n    return function tonelliSlow(Fp, n) {\\n      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\\n        throw new Error(\"Cannot find square root\");\\n      let r = S;\\n      let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);\\n      let x = Fp.pow(n, Q1div2);\\n      let b = Fp.pow(n, Q);\\n      while (!Fp.eql(b, Fp.ONE)) {\\n        if (Fp.eql(b, Fp.ZERO))\\n          return Fp.ZERO;\\n        let m = 1;\\n        for (let t2 = Fp.sqr(b); m < r; m++) {\\n          if (Fp.eql(t2, Fp.ONE))\\n            break;\\n          t2 = Fp.sqr(t2);\\n        }\\n        const ge = Fp.pow(g, _1n3 << BigInt(r - m - 1));\\n        g = Fp.sqr(ge);\\n        x = Fp.mul(x, ge);\\n        b = Fp.mul(b, g);\\n        r = m;\\n      }\\n      return x;\\n    };\\n  }\\n  function FpSqrt(P) {\\n    if (P % _4n === _3n) {\\n      const p1div4 = (P + _1n3) / _4n;\\n      return function sqrt3mod4(Fp, n) {\\n        const root = Fp.pow(n, p1div4);\\n        if (!Fp.eql(Fp.sqr(root), n))\\n          throw new Error(\"Cannot find square root\");\\n        return root;\\n      };\\n    }\\n    if (P % _8n === _5n) {\\n      const c1 = (P - _5n) / _8n;\\n      return function sqrt5mod8(Fp, n) {\\n        const n2 = Fp.mul(n, _2n3);\\n        const v = Fp.pow(n2, c1);\\n        const nv = Fp.mul(n, v);\\n        const i = Fp.mul(Fp.mul(nv, _2n3), v);\\n        const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\\n        if (!Fp.eql(Fp.sqr(root), n))\\n          throw new Error(\"Cannot find square root\");\\n        return root;\\n      };\\n    }\\n    if (P % _16n === _9n) {\\n    }\\n    return tonelliShanks(P);\\n  }\\n  function validateField(field) {\\n    const initial = {\\n      ORDER: \"bigint\",\\n      MASK: \"bigint\",\\n      BYTES: \"isSafeInteger\",\\n      BITS: \"isSafeInteger\"\\n    };\\n    const opts = FIELD_FIELDS.reduce((map, val) => {\\n      map[val] = \"function\";\\n      return map;\\n    }, initial);\\n    return validateObject(field, opts);\\n  }\\n  function FpPow(f, num2, power) {\\n    if (power < _0n3)\\n      throw new Error(\"invalid exponent, negatives unsupported\");\\n    if (power === _0n3)\\n      return f.ONE;\\n    if (power === _1n3)\\n      return num2;\\n    let p = f.ONE;\\n    let d = num2;\\n    while (power > _0n3) {\\n      if (power & _1n3)\\n        p = f.mul(p, d);\\n      d = f.sqr(d);\\n      power >>= _1n3;\\n    }\\n    return p;\\n  }\\n  function FpInvertBatch(f, nums) {\\n    const tmp = new Array(nums.length);\\n    const lastMultiplied = nums.reduce((acc, num2, i) => {\\n      if (f.is0(num2))\\n        return acc;\\n      tmp[i] = acc;\\n      return f.mul(acc, num2);\\n    }, f.ONE);\\n    const inverted = f.inv(lastMultiplied);\\n    nums.reduceRight((acc, num2, i) => {\\n      if (f.is0(num2))\\n        return acc;\\n      tmp[i] = f.mul(acc, tmp[i]);\\n      return f.mul(acc, num2);\\n    }, inverted);\\n    return tmp;\\n  }\\n  function nLength(n, nBitLength) {\\n    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;\\n    const nByteLength = Math.ceil(_nBitLength / 8);\\n    return { nBitLength: _nBitLength, nByteLength };\\n  }\\n  function Field(ORDER, bitLen2, isLE3 = false, redef = {}) {\\n    if (ORDER <= _0n3)\\n      throw new Error(\"invalid field: expected ORDER > 0, got \" + ORDER);\\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);\\n    if (BYTES > 2048)\\n      throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\\n    let sqrtP;\\n    const f = Object.freeze({\\n      ORDER,\\n      isLE: isLE3,\\n      BITS,\\n      BYTES,\\n      MASK: bitMask(BITS),\\n      ZERO: _0n3,\\n      ONE: _1n3,\\n      create: (num2) => mod(num2, ORDER),\\n      isValid: (num2) => {\\n        if (typeof num2 !== \"bigint\")\\n          throw new Error(\"invalid field element: expected bigint, got \" + typeof num2);\\n        return _0n3 <= num2 && num2 < ORDER;\\n      },\\n      is0: (num2) => num2 === _0n3,\\n      isOdd: (num2) => (num2 & _1n3) === _1n3,\\n      neg: (num2) => mod(-num2, ORDER),\\n      eql: (lhs, rhs) => lhs === rhs,\\n      sqr: (num2) => mod(num2 * num2, ORDER),\\n      add: (lhs, rhs) => mod(lhs + rhs, ORDER),\\n      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\\n      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\\n      pow: (num2, power) => FpPow(f, num2, power),\\n      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\\n      // Same as above, but doesn\\'t normalize\\n      sqrN: (num2) => num2 * num2,\\n      addN: (lhs, rhs) => lhs + rhs,\\n      subN: (lhs, rhs) => lhs - rhs,\\n      mulN: (lhs, rhs) => lhs * rhs,\\n      inv: (num2) => invert(num2, ORDER),\\n      sqrt: redef.sqrt || ((n) => {\\n        if (!sqrtP)\\n          sqrtP = FpSqrt(ORDER);\\n        return sqrtP(f, n);\\n      }),\\n      invertBatch: (lst) => FpInvertBatch(f, lst),\\n      // TODO: do we really need constant cmov?\\n      // We don\\'t have const-time bigints anyway, so probably will be not very useful\\n      cmov: (a, b, c) => c ? b : a,\\n      toBytes: (num2) => isLE3 ? numberToBytesLE(num2, BYTES) : numberToBytesBE(num2, BYTES),\\n      fromBytes: (bytes) => {\\n        if (bytes.length !== BYTES)\\n          throw new Error(\"Field.fromBytes: expected \" + BYTES + \" bytes, got \" + bytes.length);\\n        return isLE3 ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\\n      }\\n    });\\n    return Object.freeze(f);\\n  }\\n  function getFieldBytesLength(fieldOrder) {\\n    if (typeof fieldOrder !== \"bigint\")\\n      throw new Error(\"field order must be bigint\");\\n    const bitLength = fieldOrder.toString(2).length;\\n    return Math.ceil(bitLength / 8);\\n  }\\n  function getMinHashLength(fieldOrder) {\\n    const length = getFieldBytesLength(fieldOrder);\\n    return length + Math.ceil(length / 2);\\n  }\\n  function mapHashToField(key, fieldOrder, isLE3 = false) {\\n    const len = key.length;\\n    const fieldLen = getFieldBytesLength(fieldOrder);\\n    const minLen = getMinHashLength(fieldOrder);\\n    if (len < 16 || len < minLen || len > 1024)\\n      throw new Error(\"expected \" + minLen + \"-1024 bytes of input, got \" + len);\\n    const num2 = isLE3 ? bytesToNumberLE(key) : bytesToNumberBE(key);\\n    const reduced = mod(num2, fieldOrder - _1n3) + _1n3;\\n    return isLE3 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\\n  }\\n  var _0n3, _1n3, _2n3, _3n, _4n, _5n, _8n, _9n, _16n, FIELD_FIELDS;\\n  var init_modular = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/modular.js\"() {\\n      init_utils4();\\n      _0n3 = BigInt(0);\\n      _1n3 = BigInt(1);\\n      _2n3 = /* @__PURE__ */ BigInt(2);\\n      _3n = /* @__PURE__ */ BigInt(3);\\n      _4n = /* @__PURE__ */ BigInt(4);\\n      _5n = /* @__PURE__ */ BigInt(5);\\n      _8n = /* @__PURE__ */ BigInt(8);\\n      _9n = /* @__PURE__ */ BigInt(9);\\n      _16n = /* @__PURE__ */ BigInt(16);\\n      FIELD_FIELDS = [\\n        \"create\",\\n        \"isValid\",\\n        \"is0\",\\n        \"neg\",\\n        \"inv\",\\n        \"sqrt\",\\n        \"sqr\",\\n        \"eql\",\\n        \"add\",\\n        \"sub\",\\n        \"mul\",\\n        \"pow\",\\n        \"div\",\\n        \"addN\",\\n        \"subN\",\\n        \"mulN\",\\n        \"sqrN\"\\n      ];\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/curve.js\\n  function constTimeNegate(condition, item) {\\n    const neg = item.negate();\\n    return condition ? neg : item;\\n  }\\n  function validateW(W, bits) {\\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\\n      throw new Error(\"invalid window size, expected [1..\" + bits + \"], got W=\" + W);\\n  }\\n  function calcWOpts(W, bits) {\\n    validateW(W, bits);\\n    const windows = Math.ceil(bits / W) + 1;\\n    const windowSize = 2 ** (W - 1);\\n    return { windows, windowSize };\\n  }\\n  function validateMSMPoints(points, c) {\\n    if (!Array.isArray(points))\\n      throw new Error(\"array expected\");\\n    points.forEach((p, i) => {\\n      if (!(p instanceof c))\\n        throw new Error(\"invalid point at index \" + i);\\n    });\\n  }\\n  function validateMSMScalars(scalars, field) {\\n    if (!Array.isArray(scalars))\\n      throw new Error(\"array of scalars expected\");\\n    scalars.forEach((s, i) => {\\n      if (!field.isValid(s))\\n        throw new Error(\"invalid scalar at index \" + i);\\n    });\\n  }\\n  function getW(P) {\\n    return pointWindowSizes.get(P) || 1;\\n  }\\n  function wNAF(c, bits) {\\n    return {\\n      constTimeNegate,\\n      hasPrecomputes(elm) {\\n        return getW(elm) !== 1;\\n      },\\n      // non-const time multiplication ladder\\n      unsafeLadder(elm, n, p = c.ZERO) {\\n        let d = elm;\\n        while (n > _0n4) {\\n          if (n & _1n4)\\n            p = p.add(d);\\n          d = d.double();\\n          n >>= _1n4;\\n        }\\n        return p;\\n      },\\n      /**\\n       * Creates a wNAF precomputation window. Used for caching.\\n       * Default window size is set by `utils.precompute()` and is equal to 8.\\n       * Number of precomputed points depends on the curve size:\\n       * 2^(\\u{1D44A}\\u22121) * (Math.ceil(\\u{1D45B} / \\u{1D44A}) + 1), where:\\n       * - \\u{1D44A} is the window size\\n       * - \\u{1D45B} is the bitlength of the curve order.\\n       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\\n       * @param elm Point instance\\n       * @param W window size\\n       * @returns precomputed point tables flattened to a single array\\n       */\\n      precomputeWindow(elm, W) {\\n        const { windows, windowSize } = calcWOpts(W, bits);\\n        const points = [];\\n        let p = elm;\\n        let base2 = p;\\n        for (let window2 = 0; window2 < windows; window2++) {\\n          base2 = p;\\n          points.push(base2);\\n          for (let i = 1; i < windowSize; i++) {\\n            base2 = base2.add(p);\\n            points.push(base2);\\n          }\\n          p = base2.double();\\n        }\\n        return points;\\n      },\\n      /**\\n       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\\n       * @param W window size\\n       * @param precomputes precomputed tables\\n       * @param n scalar (we don\\'t check here, but should be less than curve order)\\n       * @returns real and fake (for const-time) points\\n       */\\n      wNAF(W, precomputes, n) {\\n        const { windows, windowSize } = calcWOpts(W, bits);\\n        let p = c.ZERO;\\n        let f = c.BASE;\\n        const mask = BigInt(2 ** W - 1);\\n        const maxNumber = 2 ** W;\\n        const shiftBy = BigInt(W);\\n        for (let window2 = 0; window2 < windows; window2++) {\\n          const offset = window2 * windowSize;\\n          let wbits = Number(n & mask);\\n          n >>= shiftBy;\\n          if (wbits > windowSize) {\\n            wbits -= maxNumber;\\n            n += _1n4;\\n          }\\n          const offset1 = offset;\\n          const offset2 = offset + Math.abs(wbits) - 1;\\n          const cond1 = window2 % 2 !== 0;\\n          const cond2 = wbits < 0;\\n          if (wbits === 0) {\\n            f = f.add(constTimeNegate(cond1, precomputes[offset1]));\\n          } else {\\n            p = p.add(constTimeNegate(cond2, precomputes[offset2]));\\n          }\\n        }\\n        return { p, f };\\n      },\\n      /**\\n       * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\\n       * @param W window size\\n       * @param precomputes precomputed tables\\n       * @param n scalar (we don\\'t check here, but should be less than curve order)\\n       * @param acc accumulator point to add result of multiplication\\n       * @returns point\\n       */\\n      wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\\n        const { windows, windowSize } = calcWOpts(W, bits);\\n        const mask = BigInt(2 ** W - 1);\\n        const maxNumber = 2 ** W;\\n        const shiftBy = BigInt(W);\\n        for (let window2 = 0; window2 < windows; window2++) {\\n          const offset = window2 * windowSize;\\n          if (n === _0n4)\\n            break;\\n          let wbits = Number(n & mask);\\n          n >>= shiftBy;\\n          if (wbits > windowSize) {\\n            wbits -= maxNumber;\\n            n += _1n4;\\n          }\\n          if (wbits === 0)\\n            continue;\\n          let curr = precomputes[offset + Math.abs(wbits) - 1];\\n          if (wbits < 0)\\n            curr = curr.negate();\\n          acc = acc.add(curr);\\n        }\\n        return acc;\\n      },\\n      getPrecomputes(W, P, transform) {\\n        let comp = pointPrecomputes.get(P);\\n        if (!comp) {\\n          comp = this.precomputeWindow(P, W);\\n          if (W !== 1)\\n            pointPrecomputes.set(P, transform(comp));\\n        }\\n        return comp;\\n      },\\n      wNAFCached(P, n, transform) {\\n        const W = getW(P);\\n        return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\\n      },\\n      wNAFCachedUnsafe(P, n, transform, prev) {\\n        const W = getW(P);\\n        if (W === 1)\\n          return this.unsafeLadder(P, n, prev);\\n        return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\\n      },\\n      // We calculate precomputes for elliptic curve point multiplication\\n      // using windowed method. This specifies window size and\\n      // stores precomputed values. Usually only base point would be precomputed.\\n      setWindowSize(P, W) {\\n        validateW(W, bits);\\n        pointWindowSizes.set(P, W);\\n        pointPrecomputes.delete(P);\\n      }\\n    };\\n  }\\n  function pippenger(c, fieldN, points, scalars) {\\n    validateMSMPoints(points, c);\\n    validateMSMScalars(scalars, fieldN);\\n    if (points.length !== scalars.length)\\n      throw new Error(\"arrays of points and scalars must have equal length\");\\n    const zero = c.ZERO;\\n    const wbits = bitLen(BigInt(points.length));\\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;\\n    const MASK = (1 << windowSize) - 1;\\n    const buckets = new Array(MASK + 1).fill(zero);\\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\\n    let sum = zero;\\n    for (let i = lastBits; i >= 0; i -= windowSize) {\\n      buckets.fill(zero);\\n      for (let j = 0; j < scalars.length; j++) {\\n        const scalar = scalars[j];\\n        const wbits2 = Number(scalar >> BigInt(i) & BigInt(MASK));\\n        buckets[wbits2] = buckets[wbits2].add(points[j]);\\n      }\\n      let resI = zero;\\n      for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\\n        sumI = sumI.add(buckets[j]);\\n        resI = resI.add(sumI);\\n      }\\n      sum = sum.add(resI);\\n      if (i !== 0)\\n        for (let j = 0; j < windowSize; j++)\\n          sum = sum.double();\\n    }\\n    return sum;\\n  }\\n  function validateBasic(curve) {\\n    validateField(curve.Fp);\\n    validateObject(curve, {\\n      n: \"bigint\",\\n      h: \"bigint\",\\n      Gx: \"field\",\\n      Gy: \"field\"\\n    }, {\\n      nBitLength: \"isSafeInteger\",\\n      nByteLength: \"isSafeInteger\"\\n    });\\n    return Object.freeze({\\n      ...nLength(curve.n, curve.nBitLength),\\n      ...curve,\\n      ...{ p: curve.Fp.ORDER }\\n    });\\n  }\\n  var _0n4, _1n4, pointPrecomputes, pointWindowSizes;\\n  var init_curve = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/curve.js\"() {\\n      init_modular();\\n      init_utils4();\\n      _0n4 = BigInt(0);\\n      _1n4 = BigInt(1);\\n      pointPrecomputes = /* @__PURE__ */ new WeakMap();\\n      pointWindowSizes = /* @__PURE__ */ new WeakMap();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/weierstrass.js\\n  function validateSigVerOpts(opts) {\\n    if (opts.lowS !== void 0)\\n      abool(\"lowS\", opts.lowS);\\n    if (opts.prehash !== void 0)\\n      abool(\"prehash\", opts.prehash);\\n  }\\n  function validatePointOpts(curve) {\\n    const opts = validateBasic(curve);\\n    validateObject(opts, {\\n      a: \"field\",\\n      b: \"field\"\\n    }, {\\n      allowedPrivateKeyLengths: \"array\",\\n      wrapPrivateKey: \"boolean\",\\n      isTorsionFree: \"function\",\\n      clearCofactor: \"function\",\\n      allowInfinityPoint: \"boolean\",\\n      fromBytes: \"function\",\\n      toBytes: \"function\"\\n    });\\n    const { endo, Fp, a } = opts;\\n    if (endo) {\\n      if (!Fp.eql(a, Fp.ZERO)) {\\n        throw new Error(\"invalid endomorphism, can only be defined for Koblitz curves that have a=0\");\\n      }\\n      if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") {\\n        throw new Error(\"invalid endomorphism, expected beta: bigint and splitScalar: function\");\\n      }\\n    }\\n    return Object.freeze({ ...opts });\\n  }\\n  function weierstrassPoints(opts) {\\n    const CURVE = validatePointOpts(opts);\\n    const { Fp } = CURVE;\\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\\n    const toBytes4 = CURVE.toBytes || ((_c, point, _isCompressed) => {\\n      const a = point.toAffine();\\n      return concatBytes3(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));\\n    });\\n    const fromBytes2 = CURVE.fromBytes || ((bytes) => {\\n      const tail = bytes.subarray(1);\\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\\n      return { x, y };\\n    });\\n    function weierstrassEquation(x) {\\n      const { a, b } = CURVE;\\n      const x2 = Fp.sqr(x);\\n      const x3 = Fp.mul(x2, x);\\n      return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);\\n    }\\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\\n      throw new Error(\"bad generator point: equation left != right\");\\n    function isWithinCurveOrder(num2) {\\n      return inRange(num2, _1n5, CURVE.n);\\n    }\\n    function normPrivateKeyToScalar(key) {\\n      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\\n      if (lengths && typeof key !== \"bigint\") {\\n        if (isBytes2(key))\\n          key = bytesToHex2(key);\\n        if (typeof key !== \"string\" || !lengths.includes(key.length))\\n          throw new Error(\"invalid private key\");\\n        key = key.padStart(nByteLength * 2, \"0\");\\n      }\\n      let num2;\\n      try {\\n        num2 = typeof key === \"bigint\" ? key : bytesToNumberBE(ensureBytes(\"private key\", key, nByteLength));\\n      } catch (error) {\\n        throw new Error(\"invalid private key, expected hex or \" + nByteLength + \" bytes, got \" + typeof key);\\n      }\\n      if (wrapPrivateKey)\\n        num2 = mod(num2, N);\\n      aInRange(\"private key\", num2, _1n5, N);\\n      return num2;\\n    }\\n    function assertPrjPoint(other) {\\n      if (!(other instanceof Point2))\\n        throw new Error(\"ProjectivePoint expected\");\\n    }\\n    const toAffineMemo = memoized((p, iz) => {\\n      const { px: x, py: y, pz: z2 } = p;\\n      if (Fp.eql(z2, Fp.ONE))\\n        return { x, y };\\n      const is0 = p.is0();\\n      if (iz == null)\\n        iz = is0 ? Fp.ONE : Fp.inv(z2);\\n      const ax = Fp.mul(x, iz);\\n      const ay = Fp.mul(y, iz);\\n      const zz = Fp.mul(z2, iz);\\n      if (is0)\\n        return { x: Fp.ZERO, y: Fp.ZERO };\\n      if (!Fp.eql(zz, Fp.ONE))\\n        throw new Error(\"invZ was invalid\");\\n      return { x: ax, y: ay };\\n    });\\n    const assertValidMemo = memoized((p) => {\\n      if (p.is0()) {\\n        if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\\n          return;\\n        throw new Error(\"bad point: ZERO\");\\n      }\\n      const { x, y } = p.toAffine();\\n      if (!Fp.isValid(x) || !Fp.isValid(y))\\n        throw new Error(\"bad point: x or y not FE\");\\n      const left = Fp.sqr(y);\\n      const right = weierstrassEquation(x);\\n      if (!Fp.eql(left, right))\\n        throw new Error(\"bad point: equation left != right\");\\n      if (!p.isTorsionFree())\\n        throw new Error(\"bad point: not in prime-order subgroup\");\\n      return true;\\n    });\\n    class Point2 {\\n      constructor(px, py, pz) {\\n        this.px = px;\\n        this.py = py;\\n        this.pz = pz;\\n        if (px == null || !Fp.isValid(px))\\n          throw new Error(\"x required\");\\n        if (py == null || !Fp.isValid(py))\\n          throw new Error(\"y required\");\\n        if (pz == null || !Fp.isValid(pz))\\n          throw new Error(\"z required\");\\n        Object.freeze(this);\\n      }\\n      // Does not validate if the point is on-curve.\\n      // Use fromHex instead, or call assertValidity() later.\\n      static fromAffine(p) {\\n        const { x, y } = p || {};\\n        if (!p || !Fp.isValid(x) || !Fp.isValid(y))\\n          throw new Error(\"invalid affine point\");\\n        if (p instanceof Point2)\\n          throw new Error(\"projective point not allowed\");\\n        const is0 = (i) => Fp.eql(i, Fp.ZERO);\\n        if (is0(x) && is0(y))\\n          return Point2.ZERO;\\n        return new Point2(x, y, Fp.ONE);\\n      }\\n      get x() {\\n        return this.toAffine().x;\\n      }\\n      get y() {\\n        return this.toAffine().y;\\n      }\\n      /**\\n       * Takes a bunch of Projective Points but executes only one\\n       * inversion on all of them. Inversion is very slow operation,\\n       * so this improves performance massively.\\n       * Optimization: converts a list of projective points to a list of identical points with Z=1.\\n       */\\n      static normalizeZ(points) {\\n        const toInv = Fp.invertBatch(points.map((p) => p.pz));\\n        return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);\\n      }\\n      /**\\n       * Converts hash string or Uint8Array to Point.\\n       * @param hex short/long ECDSA hex\\n       */\\n      static fromHex(hex) {\\n        const P = Point2.fromAffine(fromBytes2(ensureBytes(\"pointHex\", hex)));\\n        P.assertValidity();\\n        return P;\\n      }\\n      // Multiplies generator point by privateKey.\\n      static fromPrivateKey(privateKey) {\\n        return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));\\n      }\\n      // Multiscalar Multiplication\\n      static msm(points, scalars) {\\n        return pippenger(Point2, Fn, points, scalars);\\n      }\\n      // \"Private method\", don\\'t use it directly\\n      _setWindowSize(windowSize) {\\n        wnaf.setWindowSize(this, windowSize);\\n      }\\n      // A point on curve is valid if it conforms to equation.\\n      assertValidity() {\\n        assertValidMemo(this);\\n      }\\n      hasEvenY() {\\n        const { y } = this.toAffine();\\n        if (Fp.isOdd)\\n          return !Fp.isOdd(y);\\n        throw new Error(\"Field doesn\\'t support isOdd\");\\n      }\\n      /**\\n       * Compare one point to another.\\n       */\\n      equals(other) {\\n        assertPrjPoint(other);\\n        const { px: X1, py: Y1, pz: Z1 } = this;\\n        const { px: X2, py: Y2, pz: Z2 } = other;\\n        const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\\n        const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\\n        return U1 && U2;\\n      }\\n      /**\\n       * Flips point to one corresponding to (x, -y) in Affine coordinates.\\n       */\\n      negate() {\\n        return new Point2(this.px, Fp.neg(this.py), this.pz);\\n      }\\n      // Renes-Costello-Batina exception-free doubling formula.\\n      // There is 30% faster Jacobian formula, but it is not complete.\\n      // https://eprint.iacr.org/2015/1060, algorithm 3\\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\\n      double() {\\n        const { a, b } = CURVE;\\n        const b3 = Fp.mul(b, _3n2);\\n        const { px: X1, py: Y1, pz: Z1 } = this;\\n        let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;\\n        let t0 = Fp.mul(X1, X1);\\n        let t1 = Fp.mul(Y1, Y1);\\n        let t2 = Fp.mul(Z1, Z1);\\n        let t3 = Fp.mul(X1, Y1);\\n        t3 = Fp.add(t3, t3);\\n        Z3 = Fp.mul(X1, Z1);\\n        Z3 = Fp.add(Z3, Z3);\\n        X3 = Fp.mul(a, Z3);\\n        Y3 = Fp.mul(b3, t2);\\n        Y3 = Fp.add(X3, Y3);\\n        X3 = Fp.sub(t1, Y3);\\n        Y3 = Fp.add(t1, Y3);\\n        Y3 = Fp.mul(X3, Y3);\\n        X3 = Fp.mul(t3, X3);\\n        Z3 = Fp.mul(b3, Z3);\\n        t2 = Fp.mul(a, t2);\\n        t3 = Fp.sub(t0, t2);\\n        t3 = Fp.mul(a, t3);\\n        t3 = Fp.add(t3, Z3);\\n        Z3 = Fp.add(t0, t0);\\n        t0 = Fp.add(Z3, t0);\\n        t0 = Fp.add(t0, t2);\\n        t0 = Fp.mul(t0, t3);\\n        Y3 = Fp.add(Y3, t0);\\n        t2 = Fp.mul(Y1, Z1);\\n        t2 = Fp.add(t2, t2);\\n        t0 = Fp.mul(t2, t3);\\n        X3 = Fp.sub(X3, t0);\\n        Z3 = Fp.mul(t2, t1);\\n        Z3 = Fp.add(Z3, Z3);\\n        Z3 = Fp.add(Z3, Z3);\\n        return new Point2(X3, Y3, Z3);\\n      }\\n      // Renes-Costello-Batina exception-free addition formula.\\n      // There is 30% faster Jacobian formula, but it is not complete.\\n      // https://eprint.iacr.org/2015/1060, algorithm 1\\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\\n      add(other) {\\n        assertPrjPoint(other);\\n        const { px: X1, py: Y1, pz: Z1 } = this;\\n        const { px: X2, py: Y2, pz: Z2 } = other;\\n        let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;\\n        const a = CURVE.a;\\n        const b3 = Fp.mul(CURVE.b, _3n2);\\n        let t0 = Fp.mul(X1, X2);\\n        let t1 = Fp.mul(Y1, Y2);\\n        let t2 = Fp.mul(Z1, Z2);\\n        let t3 = Fp.add(X1, Y1);\\n        let t4 = Fp.add(X2, Y2);\\n        t3 = Fp.mul(t3, t4);\\n        t4 = Fp.add(t0, t1);\\n        t3 = Fp.sub(t3, t4);\\n        t4 = Fp.add(X1, Z1);\\n        let t5 = Fp.add(X2, Z2);\\n        t4 = Fp.mul(t4, t5);\\n        t5 = Fp.add(t0, t2);\\n        t4 = Fp.sub(t4, t5);\\n        t5 = Fp.add(Y1, Z1);\\n        X3 = Fp.add(Y2, Z2);\\n        t5 = Fp.mul(t5, X3);\\n        X3 = Fp.add(t1, t2);\\n        t5 = Fp.sub(t5, X3);\\n        Z3 = Fp.mul(a, t4);\\n        X3 = Fp.mul(b3, t2);\\n        Z3 = Fp.add(X3, Z3);\\n        X3 = Fp.sub(t1, Z3);\\n        Z3 = Fp.add(t1, Z3);\\n        Y3 = Fp.mul(X3, Z3);\\n        t1 = Fp.add(t0, t0);\\n        t1 = Fp.add(t1, t0);\\n        t2 = Fp.mul(a, t2);\\n        t4 = Fp.mul(b3, t4);\\n        t1 = Fp.add(t1, t2);\\n        t2 = Fp.sub(t0, t2);\\n        t2 = Fp.mul(a, t2);\\n        t4 = Fp.add(t4, t2);\\n        t0 = Fp.mul(t1, t4);\\n        Y3 = Fp.add(Y3, t0);\\n        t0 = Fp.mul(t5, t4);\\n        X3 = Fp.mul(t3, X3);\\n        X3 = Fp.sub(X3, t0);\\n        t0 = Fp.mul(t3, t1);\\n        Z3 = Fp.mul(t5, Z3);\\n        Z3 = Fp.add(Z3, t0);\\n        return new Point2(X3, Y3, Z3);\\n      }\\n      subtract(other) {\\n        return this.add(other.negate());\\n      }\\n      is0() {\\n        return this.equals(Point2.ZERO);\\n      }\\n      wNAF(n) {\\n        return wnaf.wNAFCached(this, n, Point2.normalizeZ);\\n      }\\n      /**\\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\\n       * It\\'s faster, but should only be used when you don\\'t care about\\n       * an exposed private key e.g. sig verification, which works over *public* keys.\\n       */\\n      multiplyUnsafe(sc) {\\n        const { endo, n: N } = CURVE;\\n        aInRange(\"scalar\", sc, _0n5, N);\\n        const I = Point2.ZERO;\\n        if (sc === _0n5)\\n          return I;\\n        if (this.is0() || sc === _1n5)\\n          return this;\\n        if (!endo || wnaf.hasPrecomputes(this))\\n          return wnaf.wNAFCachedUnsafe(this, sc, Point2.normalizeZ);\\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\\n        let k1p = I;\\n        let k2p = I;\\n        let d = this;\\n        while (k1 > _0n5 || k2 > _0n5) {\\n          if (k1 & _1n5)\\n            k1p = k1p.add(d);\\n          if (k2 & _1n5)\\n            k2p = k2p.add(d);\\n          d = d.double();\\n          k1 >>= _1n5;\\n          k2 >>= _1n5;\\n        }\\n        if (k1neg)\\n          k1p = k1p.negate();\\n        if (k2neg)\\n          k2p = k2p.negate();\\n        k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\\n        return k1p.add(k2p);\\n      }\\n      /**\\n       * Constant time multiplication.\\n       * Uses wNAF method. Windowed method may be 10% faster,\\n       * but takes 2x longer to generate and consumes 2x memory.\\n       * Uses precomputes when available.\\n       * Uses endomorphism for Koblitz curves.\\n       * @param scalar by which the point would be multiplied\\n       * @returns New point\\n       */\\n      multiply(scalar) {\\n        const { endo, n: N } = CURVE;\\n        aInRange(\"scalar\", scalar, _1n5, N);\\n        let point, fake;\\n        if (endo) {\\n          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\\n          let { p: k1p, f: f1p } = this.wNAF(k1);\\n          let { p: k2p, f: f2p } = this.wNAF(k2);\\n          k1p = wnaf.constTimeNegate(k1neg, k1p);\\n          k2p = wnaf.constTimeNegate(k2neg, k2p);\\n          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\\n          point = k1p.add(k2p);\\n          fake = f1p.add(f2p);\\n        } else {\\n          const { p, f } = this.wNAF(scalar);\\n          point = p;\\n          fake = f;\\n        }\\n        return Point2.normalizeZ([point, fake])[0];\\n      }\\n      /**\\n       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\\n       * Not using Strauss-Shamir trick: precomputation tables are faster.\\n       * The trick could be useful if both P and Q are not G (not in our case).\\n       * @returns non-zero affine point\\n       */\\n      multiplyAndAddUnsafe(Q, a, b) {\\n        const G = Point2.BASE;\\n        const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);\\n        const sum = mul(this, a).add(mul(Q, b));\\n        return sum.is0() ? void 0 : sum;\\n      }\\n      // Converts Projective point to affine (x, y) coordinates.\\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\\n      // (x, y, z) \\u220B (x=x/z, y=y/z)\\n      toAffine(iz) {\\n        return toAffineMemo(this, iz);\\n      }\\n      isTorsionFree() {\\n        const { h: cofactor, isTorsionFree } = CURVE;\\n        if (cofactor === _1n5)\\n          return true;\\n        if (isTorsionFree)\\n          return isTorsionFree(Point2, this);\\n        throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\\n      }\\n      clearCofactor() {\\n        const { h: cofactor, clearCofactor } = CURVE;\\n        if (cofactor === _1n5)\\n          return this;\\n        if (clearCofactor)\\n          return clearCofactor(Point2, this);\\n        return this.multiplyUnsafe(CURVE.h);\\n      }\\n      toRawBytes(isCompressed = true) {\\n        abool(\"isCompressed\", isCompressed);\\n        this.assertValidity();\\n        return toBytes4(Point2, this, isCompressed);\\n      }\\n      toHex(isCompressed = true) {\\n        abool(\"isCompressed\", isCompressed);\\n        return bytesToHex2(this.toRawBytes(isCompressed));\\n      }\\n    }\\n    Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);\\n    Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);\\n    const _bits = CURVE.nBitLength;\\n    const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\\n    return {\\n      CURVE,\\n      ProjectivePoint: Point2,\\n      normPrivateKeyToScalar,\\n      weierstrassEquation,\\n      isWithinCurveOrder\\n    };\\n  }\\n  function validateOpts(curve) {\\n    const opts = validateBasic(curve);\\n    validateObject(opts, {\\n      hash: \"hash\",\\n      hmac: \"function\",\\n      randomBytes: \"function\"\\n    }, {\\n      bits2int: \"function\",\\n      bits2int_modN: \"function\",\\n      lowS: \"boolean\"\\n    });\\n    return Object.freeze({ lowS: true, ...opts });\\n  }\\n  function weierstrass(curveDef) {\\n    const CURVE = validateOpts(curveDef);\\n    const { Fp, n: CURVE_ORDER } = CURVE;\\n    const compressedLen = Fp.BYTES + 1;\\n    const uncompressedLen = 2 * Fp.BYTES + 1;\\n    function modN2(a) {\\n      return mod(a, CURVE_ORDER);\\n    }\\n    function invN(a) {\\n      return invert(a, CURVE_ORDER);\\n    }\\n    const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({\\n      ...CURVE,\\n      toBytes(_c, point, isCompressed) {\\n        const a = point.toAffine();\\n        const x = Fp.toBytes(a.x);\\n        const cat = concatBytes3;\\n        abool(\"isCompressed\", isCompressed);\\n        if (isCompressed) {\\n          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);\\n        } else {\\n          return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));\\n        }\\n      },\\n      fromBytes(bytes) {\\n        const len = bytes.length;\\n        const head = bytes[0];\\n        const tail = bytes.subarray(1);\\n        if (len === compressedLen && (head === 2 || head === 3)) {\\n          const x = bytesToNumberBE(tail);\\n          if (!inRange(x, _1n5, Fp.ORDER))\\n            throw new Error(\"Point is not on curve\");\\n          const y2 = weierstrassEquation(x);\\n          let y;\\n          try {\\n            y = Fp.sqrt(y2);\\n          } catch (sqrtError) {\\n            const suffix = sqrtError instanceof Error ? \": \" + sqrtError.message : \"\";\\n            throw new Error(\"Point is not on curve\" + suffix);\\n          }\\n          const isYOdd = (y & _1n5) === _1n5;\\n          const isHeadOdd = (head & 1) === 1;\\n          if (isHeadOdd !== isYOdd)\\n            y = Fp.neg(y);\\n          return { x, y };\\n        } else if (len === uncompressedLen && head === 4) {\\n          const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\\n          const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\\n          return { x, y };\\n        } else {\\n          const cl = compressedLen;\\n          const ul = uncompressedLen;\\n          throw new Error(\"invalid Point, expected length of \" + cl + \", or uncompressed \" + ul + \", got \" + len);\\n        }\\n      }\\n    });\\n    const numToNByteStr = (num2) => bytesToHex2(numberToBytesBE(num2, CURVE.nByteLength));\\n    function isBiggerThanHalfOrder(number) {\\n      const HALF = CURVE_ORDER >> _1n5;\\n      return number > HALF;\\n    }\\n    function normalizeS(s) {\\n      return isBiggerThanHalfOrder(s) ? modN2(-s) : s;\\n    }\\n    const slcNum = (b, from5, to) => bytesToNumberBE(b.slice(from5, to));\\n    class Signature {\\n      constructor(r, s, recovery) {\\n        this.r = r;\\n        this.s = s;\\n        this.recovery = recovery;\\n        this.assertValidity();\\n      }\\n      // pair (bytes of r, bytes of s)\\n      static fromCompact(hex) {\\n        const l = CURVE.nByteLength;\\n        hex = ensureBytes(\"compactSignature\", hex, l * 2);\\n        return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\\n      }\\n      // DER encoded ECDSA signature\\n      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\\n      static fromDER(hex) {\\n        const { r, s } = DER.toSig(ensureBytes(\"DER\", hex));\\n        return new Signature(r, s);\\n      }\\n      assertValidity() {\\n        aInRange(\"r\", this.r, _1n5, CURVE_ORDER);\\n        aInRange(\"s\", this.s, _1n5, CURVE_ORDER);\\n      }\\n      addRecoveryBit(recovery) {\\n        return new Signature(this.r, this.s, recovery);\\n      }\\n      recoverPublicKey(msgHash) {\\n        const { r, s, recovery: rec } = this;\\n        const h = bits2int_modN(ensureBytes(\"msgHash\", msgHash));\\n        if (rec == null || ![0, 1, 2, 3].includes(rec))\\n          throw new Error(\"recovery id invalid\");\\n        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\\n        if (radj >= Fp.ORDER)\\n          throw new Error(\"recovery id 2 or 3 invalid\");\\n        const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\\n        const R = Point2.fromHex(prefix + numToNByteStr(radj));\\n        const ir = invN(radj);\\n        const u1 = modN2(-h * ir);\\n        const u2 = modN2(s * ir);\\n        const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);\\n        if (!Q)\\n          throw new Error(\"point at infinify\");\\n        Q.assertValidity();\\n        return Q;\\n      }\\n      // Signatures should be low-s, to prevent malleability.\\n      hasHighS() {\\n        return isBiggerThanHalfOrder(this.s);\\n      }\\n      normalizeS() {\\n        return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;\\n      }\\n      // DER-encoded\\n      toDERRawBytes() {\\n        return hexToBytes2(this.toDERHex());\\n      }\\n      toDERHex() {\\n        return DER.hexFromSig({ r: this.r, s: this.s });\\n      }\\n      // padded bytes of r, then padded bytes of s\\n      toCompactRawBytes() {\\n        return hexToBytes2(this.toCompactHex());\\n      }\\n      toCompactHex() {\\n        return numToNByteStr(this.r) + numToNByteStr(this.s);\\n      }\\n    }\\n    const utils = {\\n      isValidPrivateKey(privateKey) {\\n        try {\\n          normPrivateKeyToScalar(privateKey);\\n          return true;\\n        } catch (error) {\\n          return false;\\n        }\\n      },\\n      normPrivateKeyToScalar,\\n      /**\\n       * Produces cryptographically secure private key from random of size\\n       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\\n       */\\n      randomPrivateKey: () => {\\n        const length = getMinHashLength(CURVE.n);\\n        return mapHashToField(CURVE.randomBytes(length), CURVE.n);\\n      },\\n      /**\\n       * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\\n       * Allows to massively speed-up `point.multiply(scalar)`.\\n       * @returns cached point\\n       * @example\\n       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\\n       * fast.multiply(privKey); // much faster ECDH now\\n       */\\n      precompute(windowSize = 8, point = Point2.BASE) {\\n        point._setWindowSize(windowSize);\\n        point.multiply(BigInt(3));\\n        return point;\\n      }\\n    };\\n    function getPublicKey(privateKey, isCompressed = true) {\\n      return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);\\n    }\\n    function isProbPub(item) {\\n      const arr = isBytes2(item);\\n      const str = typeof item === \"string\";\\n      const len = (arr || str) && item.length;\\n      if (arr)\\n        return len === compressedLen || len === uncompressedLen;\\n      if (str)\\n        return len === 2 * compressedLen || len === 2 * uncompressedLen;\\n      if (item instanceof Point2)\\n        return true;\\n      return false;\\n    }\\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\\n      if (isProbPub(privateA))\\n        throw new Error(\"first arg must be private key\");\\n      if (!isProbPub(publicB))\\n        throw new Error(\"second arg must be public key\");\\n      const b = Point2.fromHex(publicB);\\n      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\\n    }\\n    const bits2int = CURVE.bits2int || function(bytes) {\\n      if (bytes.length > 8192)\\n        throw new Error(\"input is too large\");\\n      const num2 = bytesToNumberBE(bytes);\\n      const delta = bytes.length * 8 - CURVE.nBitLength;\\n      return delta > 0 ? num2 >> BigInt(delta) : num2;\\n    };\\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {\\n      return modN2(bits2int(bytes));\\n    };\\n    const ORDER_MASK = bitMask(CURVE.nBitLength);\\n    function int2octets(num2) {\\n      aInRange(\"num < 2^\" + CURVE.nBitLength, num2, _0n5, ORDER_MASK);\\n      return numberToBytesBE(num2, CURVE.nByteLength);\\n    }\\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\\n      if ([\"recovered\", \"canonical\"].some((k) => k in opts))\\n        throw new Error(\"sign() legacy options not supported\");\\n      const { hash: hash2, randomBytes: randomBytes2 } = CURVE;\\n      let { lowS, prehash, extraEntropy: ent } = opts;\\n      if (lowS == null)\\n        lowS = true;\\n      msgHash = ensureBytes(\"msgHash\", msgHash);\\n      validateSigVerOpts(opts);\\n      if (prehash)\\n        msgHash = ensureBytes(\"prehashed msgHash\", hash2(msgHash));\\n      const h1int = bits2int_modN(msgHash);\\n      const d = normPrivateKeyToScalar(privateKey);\\n      const seedArgs = [int2octets(d), int2octets(h1int)];\\n      if (ent != null && ent !== false) {\\n        const e = ent === true ? randomBytes2(Fp.BYTES) : ent;\\n        seedArgs.push(ensureBytes(\"extraEntropy\", e));\\n      }\\n      const seed = concatBytes3(...seedArgs);\\n      const m = h1int;\\n      function k2sig(kBytes) {\\n        const k = bits2int(kBytes);\\n        if (!isWithinCurveOrder(k))\\n          return;\\n        const ik = invN(k);\\n        const q = Point2.BASE.multiply(k).toAffine();\\n        const r = modN2(q.x);\\n        if (r === _0n5)\\n          return;\\n        const s = modN2(ik * modN2(m + r * d));\\n        if (s === _0n5)\\n          return;\\n        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);\\n        let normS = s;\\n        if (lowS && isBiggerThanHalfOrder(s)) {\\n          normS = normalizeS(s);\\n          recovery ^= 1;\\n        }\\n        return new Signature(r, normS, recovery);\\n      }\\n      return { seed, k2sig };\\n    }\\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\\n      const { seed, k2sig } = prepSig(msgHash, privKey, opts);\\n      const C = CURVE;\\n      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\\n      return drbg(seed, k2sig);\\n    }\\n    Point2.BASE._setWindowSize(8);\\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\\n      const sg = signature;\\n      msgHash = ensureBytes(\"msgHash\", msgHash);\\n      publicKey = ensureBytes(\"publicKey\", publicKey);\\n      const { lowS, prehash, format } = opts;\\n      validateSigVerOpts(opts);\\n      if (\"strict\" in opts)\\n        throw new Error(\"options.strict was renamed to lowS\");\\n      if (format !== void 0 && format !== \"compact\" && format !== \"der\")\\n        throw new Error(\"format must be compact or der\");\\n      const isHex2 = typeof sg === \"string\" || isBytes2(sg);\\n      const isObj = !isHex2 && !format && typeof sg === \"object\" && sg !== null && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\";\\n      if (!isHex2 && !isObj)\\n        throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\\n      let _sig = void 0;\\n      let P;\\n      try {\\n        if (isObj)\\n          _sig = new Signature(sg.r, sg.s);\\n        if (isHex2) {\\n          try {\\n            if (format !== \"compact\")\\n              _sig = Signature.fromDER(sg);\\n          } catch (derError) {\\n            if (!(derError instanceof DER.Err))\\n              throw derError;\\n          }\\n          if (!_sig && format !== \"der\")\\n            _sig = Signature.fromCompact(sg);\\n        }\\n        P = Point2.fromHex(publicKey);\\n      } catch (error) {\\n        return false;\\n      }\\n      if (!_sig)\\n        return false;\\n      if (lowS && _sig.hasHighS())\\n        return false;\\n      if (prehash)\\n        msgHash = CURVE.hash(msgHash);\\n      const { r, s } = _sig;\\n      const h = bits2int_modN(msgHash);\\n      const is = invN(s);\\n      const u1 = modN2(h * is);\\n      const u2 = modN2(r * is);\\n      const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();\\n      if (!R)\\n        return false;\\n      const v = modN2(R.x);\\n      return v === r;\\n    }\\n    return {\\n      CURVE,\\n      getPublicKey,\\n      getSharedSecret,\\n      sign,\\n      verify,\\n      ProjectivePoint: Point2,\\n      Signature,\\n      utils\\n    };\\n  }\\n  function SWUFpSqrtRatio(Fp, Z) {\\n    const q = Fp.ORDER;\\n    let l = _0n5;\\n    for (let o = q - _1n5; o % _2n4 === _0n5; o /= _2n4)\\n      l += _1n5;\\n    const c1 = l;\\n    const _2n_pow_c1_1 = _2n4 << c1 - _1n5 - _1n5;\\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n4;\\n    const c2 = (q - _1n5) / _2n_pow_c1;\\n    const c3 = (c2 - _1n5) / _2n4;\\n    const c4 = _2n_pow_c1 - _1n5;\\n    const c5 = _2n_pow_c1_1;\\n    const c6 = Fp.pow(Z, c2);\\n    const c7 = Fp.pow(Z, (c2 + _1n5) / _2n4);\\n    let sqrtRatio = (u, v) => {\\n      let tv1 = c6;\\n      let tv2 = Fp.pow(v, c4);\\n      let tv3 = Fp.sqr(tv2);\\n      tv3 = Fp.mul(tv3, v);\\n      let tv5 = Fp.mul(u, tv3);\\n      tv5 = Fp.pow(tv5, c3);\\n      tv5 = Fp.mul(tv5, tv2);\\n      tv2 = Fp.mul(tv5, v);\\n      tv3 = Fp.mul(tv5, u);\\n      let tv4 = Fp.mul(tv3, tv2);\\n      tv5 = Fp.pow(tv4, c5);\\n      let isQR = Fp.eql(tv5, Fp.ONE);\\n      tv2 = Fp.mul(tv3, c7);\\n      tv5 = Fp.mul(tv4, tv1);\\n      tv3 = Fp.cmov(tv2, tv3, isQR);\\n      tv4 = Fp.cmov(tv5, tv4, isQR);\\n      for (let i = c1; i > _1n5; i--) {\\n        let tv52 = i - _2n4;\\n        tv52 = _2n4 << tv52 - _1n5;\\n        let tvv5 = Fp.pow(tv4, tv52);\\n        const e1 = Fp.eql(tvv5, Fp.ONE);\\n        tv2 = Fp.mul(tv3, tv1);\\n        tv1 = Fp.mul(tv1, tv1);\\n        tvv5 = Fp.mul(tv4, tv1);\\n        tv3 = Fp.cmov(tv2, tv3, e1);\\n        tv4 = Fp.cmov(tvv5, tv4, e1);\\n      }\\n      return { isValid: isQR, value: tv3 };\\n    };\\n    if (Fp.ORDER % _4n2 === _3n2) {\\n      const c12 = (Fp.ORDER - _3n2) / _4n2;\\n      const c22 = Fp.sqrt(Fp.neg(Z));\\n      sqrtRatio = (u, v) => {\\n        let tv1 = Fp.sqr(v);\\n        const tv2 = Fp.mul(u, v);\\n        tv1 = Fp.mul(tv1, tv2);\\n        let y1 = Fp.pow(tv1, c12);\\n        y1 = Fp.mul(y1, tv2);\\n        const y2 = Fp.mul(y1, c22);\\n        const tv3 = Fp.mul(Fp.sqr(y1), v);\\n        const isQR = Fp.eql(tv3, u);\\n        let y = Fp.cmov(y2, y1, isQR);\\n        return { isValid: isQR, value: y };\\n      };\\n    }\\n    return sqrtRatio;\\n  }\\n  function mapToCurveSimpleSWU(Fp, opts) {\\n    validateField(Fp);\\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\\n      throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\\n    if (!Fp.isOdd)\\n      throw new Error(\"Fp.isOdd is not implemented!\");\\n    return (u) => {\\n      let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\\n      tv1 = Fp.sqr(u);\\n      tv1 = Fp.mul(tv1, opts.Z);\\n      tv2 = Fp.sqr(tv1);\\n      tv2 = Fp.add(tv2, tv1);\\n      tv3 = Fp.add(tv2, Fp.ONE);\\n      tv3 = Fp.mul(tv3, opts.B);\\n      tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));\\n      tv4 = Fp.mul(tv4, opts.A);\\n      tv2 = Fp.sqr(tv3);\\n      tv6 = Fp.sqr(tv4);\\n      tv5 = Fp.mul(tv6, opts.A);\\n      tv2 = Fp.add(tv2, tv5);\\n      tv2 = Fp.mul(tv2, tv3);\\n      tv6 = Fp.mul(tv6, tv4);\\n      tv5 = Fp.mul(tv6, opts.B);\\n      tv2 = Fp.add(tv2, tv5);\\n      x = Fp.mul(tv1, tv3);\\n      const { isValid: isValid2, value } = sqrtRatio(tv2, tv6);\\n      y = Fp.mul(tv1, u);\\n      y = Fp.mul(y, value);\\n      x = Fp.cmov(x, tv3, isValid2);\\n      y = Fp.cmov(y, value, isValid2);\\n      const e1 = Fp.isOdd(u) === Fp.isOdd(y);\\n      y = Fp.cmov(Fp.neg(y), y, e1);\\n      x = Fp.div(x, tv4);\\n      return { x, y };\\n    };\\n  }\\n  var b2n, h2b, DERErr, DER, _0n5, _1n5, _2n4, _3n2, _4n2;\\n  var init_weierstrass = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/weierstrass.js\"() {\\n      init_curve();\\n      init_modular();\\n      init_utils4();\\n      init_utils4();\\n      ({ bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports);\\n      DERErr = class extends Error {\\n        constructor(m = \"\") {\\n          super(m);\\n        }\\n      };\\n      DER = {\\n        // asn.1 DER encoding utils\\n        Err: DERErr,\\n        // Basic building block is TLV (Tag-Length-Value)\\n        _tlv: {\\n          encode: (tag, data) => {\\n            const { Err: E } = DER;\\n            if (tag < 0 || tag > 256)\\n              throw new E(\"tlv.encode: wrong tag\");\\n            if (data.length & 1)\\n              throw new E(\"tlv.encode: unpadded data\");\\n            const dataLen = data.length / 2;\\n            const len = numberToHexUnpadded(dataLen);\\n            if (len.length / 2 & 128)\\n              throw new E(\"tlv.encode: long form length too big\");\\n            const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : \"\";\\n            const t = numberToHexUnpadded(tag);\\n            return t + lenLen + len + data;\\n          },\\n          // v - value, l - left bytes (unparsed)\\n          decode(tag, data) {\\n            const { Err: E } = DER;\\n            let pos = 0;\\n            if (tag < 0 || tag > 256)\\n              throw new E(\"tlv.encode: wrong tag\");\\n            if (data.length < 2 || data[pos++] !== tag)\\n              throw new E(\"tlv.decode: wrong tlv\");\\n            const first = data[pos++];\\n            const isLong = !!(first & 128);\\n            let length = 0;\\n            if (!isLong)\\n              length = first;\\n            else {\\n              const lenLen = first & 127;\\n              if (!lenLen)\\n                throw new E(\"tlv.decode(long): indefinite length not supported\");\\n              if (lenLen > 4)\\n                throw new E(\"tlv.decode(long): byte length is too big\");\\n              const lengthBytes = data.subarray(pos, pos + lenLen);\\n              if (lengthBytes.length !== lenLen)\\n                throw new E(\"tlv.decode: length bytes not complete\");\\n              if (lengthBytes[0] === 0)\\n                throw new E(\"tlv.decode(long): zero leftmost byte\");\\n              for (const b of lengthBytes)\\n                length = length << 8 | b;\\n              pos += lenLen;\\n              if (length < 128)\\n                throw new E(\"tlv.decode(long): not minimal encoding\");\\n            }\\n            const v = data.subarray(pos, pos + length);\\n            if (v.length !== length)\\n              throw new E(\"tlv.decode: wrong value length\");\\n            return { v, l: data.subarray(pos + length) };\\n          }\\n        },\\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is \\'negative\\' flag,\\n        // since we always use positive integers here. It must always be empty:\\n        // - add zero byte if exists\\n        // - if next byte doesn\\'t have a flag, leading zero is not allowed (minimal encoding)\\n        _int: {\\n          encode(num2) {\\n            const { Err: E } = DER;\\n            if (num2 < _0n5)\\n              throw new E(\"integer: negative integers are not allowed\");\\n            let hex = numberToHexUnpadded(num2);\\n            if (Number.parseInt(hex[0], 16) & 8)\\n              hex = \"00\" + hex;\\n            if (hex.length & 1)\\n              throw new E(\"unexpected DER parsing assertion: unpadded hex\");\\n            return hex;\\n          },\\n          decode(data) {\\n            const { Err: E } = DER;\\n            if (data[0] & 128)\\n              throw new E(\"invalid signature integer: negative\");\\n            if (data[0] === 0 && !(data[1] & 128))\\n              throw new E(\"invalid signature integer: unnecessary leading zero\");\\n            return b2n(data);\\n          }\\n        },\\n        toSig(hex) {\\n          const { Err: E, _int: int, _tlv: tlv } = DER;\\n          const data = typeof hex === \"string\" ? h2b(hex) : hex;\\n          abytes2(data);\\n          const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);\\n          if (seqLeftBytes.length)\\n            throw new E(\"invalid signature: left bytes after parsing\");\\n          const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);\\n          const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);\\n          if (sLeftBytes.length)\\n            throw new E(\"invalid signature: left bytes after parsing\");\\n          return { r: int.decode(rBytes), s: int.decode(sBytes) };\\n        },\\n        hexFromSig(sig) {\\n          const { _tlv: tlv, _int: int } = DER;\\n          const rs = tlv.encode(2, int.encode(sig.r));\\n          const ss = tlv.encode(2, int.encode(sig.s));\\n          const seq = rs + ss;\\n          return tlv.encode(48, seq);\\n        }\\n      };\\n      _0n5 = BigInt(0);\\n      _1n5 = BigInt(1);\\n      _2n4 = BigInt(2);\\n      _3n2 = BigInt(3);\\n      _4n2 = BigInt(4);\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/_shortw_utils.js\\n  function getHash(hash2) {\\n    return {\\n      hash: hash2,\\n      hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),\\n      randomBytes\\n    };\\n  }\\n  function createCurve(curveDef, defHash) {\\n    const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });\\n    return { ...create(defHash), create };\\n  }\\n  var init_shortw_utils = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/_shortw_utils.js\"() {\\n      init_hmac();\\n      init_utils2();\\n      init_weierstrass();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\\n  function i2osp(value, length) {\\n    anum(value);\\n    anum(length);\\n    if (value < 0 || value >= 1 << 8 * length)\\n      throw new Error(\"invalid I2OSP input: \" + value);\\n    const res = Array.from({ length }).fill(0);\\n    for (let i = length - 1; i >= 0; i--) {\\n      res[i] = value & 255;\\n      value >>>= 8;\\n    }\\n    return new Uint8Array(res);\\n  }\\n  function strxor(a, b) {\\n    const arr = new Uint8Array(a.length);\\n    for (let i = 0; i < a.length; i++) {\\n      arr[i] = a[i] ^ b[i];\\n    }\\n    return arr;\\n  }\\n  function anum(item) {\\n    if (!Number.isSafeInteger(item))\\n      throw new Error(\"number expected\");\\n  }\\n  function expand_message_xmd(msg, DST, lenInBytes, H) {\\n    abytes2(msg);\\n    abytes2(DST);\\n    anum(lenInBytes);\\n    if (DST.length > 255)\\n      DST = H(concatBytes3(utf8ToBytes2(\"H2C-OVERSIZE-DST-\"), DST));\\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\\n    if (lenInBytes > 65535 || ell > 255)\\n      throw new Error(\"expand_message_xmd: invalid lenInBytes\");\\n    const DST_prime = concatBytes3(DST, i2osp(DST.length, 1));\\n    const Z_pad = i2osp(0, r_in_bytes);\\n    const l_i_b_str = i2osp(lenInBytes, 2);\\n    const b = new Array(ell);\\n    const b_0 = H(concatBytes3(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\\n    b[0] = H(concatBytes3(b_0, i2osp(1, 1), DST_prime));\\n    for (let i = 1; i <= ell; i++) {\\n      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\\n      b[i] = H(concatBytes3(...args));\\n    }\\n    const pseudo_random_bytes = concatBytes3(...b);\\n    return pseudo_random_bytes.slice(0, lenInBytes);\\n  }\\n  function expand_message_xof(msg, DST, lenInBytes, k, H) {\\n    abytes2(msg);\\n    abytes2(DST);\\n    anum(lenInBytes);\\n    if (DST.length > 255) {\\n      const dkLen = Math.ceil(2 * k / 8);\\n      DST = H.create({ dkLen }).update(utf8ToBytes2(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\\n    }\\n    if (lenInBytes > 65535 || DST.length > 255)\\n      throw new Error(\"expand_message_xof: invalid lenInBytes\");\\n    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();\\n  }\\n  function hash_to_field(msg, count, options) {\\n    validateObject(options, {\\n      DST: \"stringOrUint8Array\",\\n      p: \"bigint\",\\n      m: \"isSafeInteger\",\\n      k: \"isSafeInteger\",\\n      hash: \"hash\"\\n    });\\n    const { p, k, m, hash: hash2, expand, DST: _DST } = options;\\n    abytes2(msg);\\n    anum(count);\\n    const DST = typeof _DST === \"string\" ? utf8ToBytes2(_DST) : _DST;\\n    const log2p = p.toString(2).length;\\n    const L = Math.ceil((log2p + k) / 8);\\n    const len_in_bytes = count * m * L;\\n    let prb;\\n    if (expand === \"xmd\") {\\n      prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);\\n    } else if (expand === \"xof\") {\\n      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);\\n    } else if (expand === \"_internal_pass\") {\\n      prb = msg;\\n    } else {\\n      throw new Error(\\'expand must be \"xmd\" or \"xof\"\\');\\n    }\\n    const u = new Array(count);\\n    for (let i = 0; i < count; i++) {\\n      const e = new Array(m);\\n      for (let j = 0; j < m; j++) {\\n        const elm_offset = L * (j + i * m);\\n        const tv = prb.subarray(elm_offset, elm_offset + L);\\n        e[j] = mod(os2ip(tv), p);\\n      }\\n      u[i] = e;\\n    }\\n    return u;\\n  }\\n  function isogenyMap(field, map) {\\n    const COEFF = map.map((i) => Array.from(i).reverse());\\n    return (x, y) => {\\n      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\\n      x = field.div(xNum, xDen);\\n      y = field.mul(y, field.div(yNum, yDen));\\n      return { x, y };\\n    };\\n  }\\n  function createHasher(Point2, mapToCurve, def) {\\n    if (typeof mapToCurve !== \"function\")\\n      throw new Error(\"mapToCurve() must be defined\");\\n    return {\\n      // Encodes byte string to elliptic curve.\\n      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\\n      hashToCurve(msg, options) {\\n        const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\\n        const u0 = Point2.fromAffine(mapToCurve(u[0]));\\n        const u1 = Point2.fromAffine(mapToCurve(u[1]));\\n        const P = u0.add(u1).clearCofactor();\\n        P.assertValidity();\\n        return P;\\n      },\\n      // Encodes byte string to elliptic curve.\\n      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\\n      encodeToCurve(msg, options) {\\n        const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\\n        const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();\\n        P.assertValidity();\\n        return P;\\n      },\\n      // Same as encodeToCurve, but without hash\\n      mapToCurve(scalars) {\\n        if (!Array.isArray(scalars))\\n          throw new Error(\"mapToCurve: expected array of bigints\");\\n        for (const i of scalars)\\n          if (typeof i !== \"bigint\")\\n            throw new Error(\"mapToCurve: expected array of bigints\");\\n        const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();\\n        P.assertValidity();\\n        return P;\\n      }\\n    };\\n  }\\n  var os2ip;\\n  var init_hash_to_curve = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\"() {\\n      init_modular();\\n      init_utils4();\\n      os2ip = bytesToNumberBE;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/secp256k1.js\\n  var secp256k1_exports = {};\\n  __export(secp256k1_exports, {\\n    encodeToCurve: () => encodeToCurve,\\n    hashToCurve: () => hashToCurve,\\n    schnorr: () => schnorr,\\n    secp256k1: () => secp256k1\\n  });\\n  function sqrtMod(y) {\\n    const P = secp256k1P;\\n    const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\\n    const b2 = y * y * y % P;\\n    const b3 = b2 * b2 * y % P;\\n    const b6 = pow2(b3, _3n3, P) * b3 % P;\\n    const b9 = pow2(b6, _3n3, P) * b3 % P;\\n    const b11 = pow2(b9, _2n5, P) * b2 % P;\\n    const b22 = pow2(b11, _11n, P) * b11 % P;\\n    const b44 = pow2(b22, _22n, P) * b22 % P;\\n    const b88 = pow2(b44, _44n, P) * b44 % P;\\n    const b176 = pow2(b88, _88n, P) * b88 % P;\\n    const b220 = pow2(b176, _44n, P) * b44 % P;\\n    const b223 = pow2(b220, _3n3, P) * b3 % P;\\n    const t1 = pow2(b223, _23n, P) * b22 % P;\\n    const t2 = pow2(t1, _6n, P) * b2 % P;\\n    const root = pow2(t2, _2n5, P);\\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\\n      throw new Error(\"Cannot find square root\");\\n    return root;\\n  }\\n  function taggedHash(tag, ...messages) {\\n    let tagP = TAGGED_HASH_PREFIXES[tag];\\n    if (tagP === void 0) {\\n      const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\\n      tagP = concatBytes3(tagH, tagH);\\n      TAGGED_HASH_PREFIXES[tag] = tagP;\\n    }\\n    return sha256(concatBytes3(tagP, ...messages));\\n  }\\n  function schnorrGetExtPubKey(priv) {\\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);\\n    let p = Point.fromPrivateKey(d_);\\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\\n    return { scalar, bytes: pointToBytes(p) };\\n  }\\n  function lift_x(x) {\\n    aInRange(\"x\", x, _1n6, secp256k1P);\\n    const xx = modP(x * x);\\n    const c = modP(xx * x + BigInt(7));\\n    let y = sqrtMod(c);\\n    if (y % _2n5 !== _0n6)\\n      y = modP(-y);\\n    const p = new Point(x, y, _1n6);\\n    p.assertValidity();\\n    return p;\\n  }\\n  function challenge(...args) {\\n    return modN(num(taggedHash(\"BIP0340/challenge\", ...args)));\\n  }\\n  function schnorrGetPublicKey(privateKey) {\\n    return schnorrGetExtPubKey(privateKey).bytes;\\n  }\\n  function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\\n    const m = ensureBytes(\"message\", message);\\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);\\n    const a = ensureBytes(\"auxRand\", auxRand, 32);\\n    const t = numTo32b(d ^ num(taggedHash(\"BIP0340/aux\", a)));\\n    const rand = taggedHash(\"BIP0340/nonce\", t, px, m);\\n    const k_ = modN(num(rand));\\n    if (k_ === _0n6)\\n      throw new Error(\"sign failed: k is zero\");\\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);\\n    const e = challenge(rx, px, m);\\n    const sig = new Uint8Array(64);\\n    sig.set(rx, 0);\\n    sig.set(numTo32b(modN(k + e * d)), 32);\\n    if (!schnorrVerify(sig, m, px))\\n      throw new Error(\"sign: Invalid signature produced\");\\n    return sig;\\n  }\\n  function schnorrVerify(signature, message, publicKey) {\\n    const sig = ensureBytes(\"signature\", signature, 64);\\n    const m = ensureBytes(\"message\", message);\\n    const pub = ensureBytes(\"publicKey\", publicKey, 32);\\n    try {\\n      const P = lift_x(num(pub));\\n      const r = num(sig.subarray(0, 32));\\n      if (!inRange(r, _1n6, secp256k1P))\\n        return false;\\n      const s = num(sig.subarray(32, 64));\\n      if (!inRange(s, _1n6, secp256k1N))\\n        return false;\\n      const e = challenge(numTo32b(r), pointToBytes(P), m);\\n      const R = GmulAdd(P, s, modN(-e));\\n      if (!R || !R.hasEvenY() || R.toAffine().x !== r)\\n        return false;\\n      return true;\\n    } catch (error) {\\n      return false;\\n    }\\n  }\\n  var secp256k1P, secp256k1N, _1n6, _2n5, divNearest, Fpk1, secp256k1, _0n6, TAGGED_HASH_PREFIXES, pointToBytes, numTo32b, modP, modN, Point, GmulAdd, num, schnorr, isoMap, mapSWU, htf, hashToCurve, encodeToCurve;\\n  var init_secp256k1 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/secp256k1.js\"() {\\n      init_sha256();\\n      init_utils2();\\n      init_shortw_utils();\\n      init_hash_to_curve();\\n      init_modular();\\n      init_utils4();\\n      init_weierstrass();\\n      secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\\n      secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\\n      _1n6 = BigInt(1);\\n      _2n5 = BigInt(2);\\n      divNearest = (a, b) => (a + b / _2n5) / b;\\n      Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });\\n      secp256k1 = createCurve({\\n        a: BigInt(0),\\n        // equation params: a, b\\n        b: BigInt(7),\\n        Fp: Fpk1,\\n        // Field\\'s prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\\n        n: secp256k1N,\\n        // Curve order, total count of valid points in the field\\n        // Base point (x, y) aka generator point\\n        Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\\n        Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\\n        h: BigInt(1),\\n        // Cofactor\\n        lowS: true,\\n        // Allow only low-S signatures by default in sign() and verify()\\n        endo: {\\n          // Endomorphism, see above\\n          beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\\n          splitScalar: (k) => {\\n            const n = secp256k1N;\\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\\n            const b1 = -_1n6 * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\\n            const b2 = a1;\\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\");\\n            const c1 = divNearest(b2 * k, n);\\n            const c2 = divNearest(-b1 * k, n);\\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\\n            const k1neg = k1 > POW_2_128;\\n            const k2neg = k2 > POW_2_128;\\n            if (k1neg)\\n              k1 = n - k1;\\n            if (k2neg)\\n              k2 = n - k2;\\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\\n              throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\\n            }\\n            return { k1neg, k1, k2neg, k2 };\\n          }\\n        }\\n      }, sha256);\\n      _0n6 = BigInt(0);\\n      TAGGED_HASH_PREFIXES = {};\\n      pointToBytes = (point) => point.toRawBytes(true).slice(1);\\n      numTo32b = (n) => numberToBytesBE(n, 32);\\n      modP = (x) => mod(x, secp256k1P);\\n      modN = (x) => mod(x, secp256k1N);\\n      Point = secp256k1.ProjectivePoint;\\n      GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\\n      num = bytesToNumberBE;\\n      schnorr = /* @__PURE__ */ (() => ({\\n        getPublicKey: schnorrGetPublicKey,\\n        sign: schnorrSign,\\n        verify: schnorrVerify,\\n        utils: {\\n          randomPrivateKey: secp256k1.utils.randomPrivateKey,\\n          lift_x,\\n          pointToBytes,\\n          numberToBytesBE,\\n          bytesToNumberBE,\\n          taggedHash,\\n          mod\\n        }\\n      }))();\\n      isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\\n        // xNum\\n        [\\n          \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\\n          \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\\n          \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\\n          \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\\n        ],\\n        // xDen\\n        [\\n          \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\\n          \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\\n          \"0x0000000000000000000000000000000000000000000000000000000000000001\"\\n          // LAST 1\\n        ],\\n        // yNum\\n        [\\n          \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\\n          \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\\n          \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\\n          \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\\n        ],\\n        // yDen\\n        [\\n          \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\\n          \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\\n          \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\\n          \"0x0000000000000000000000000000000000000000000000000000000000000001\"\\n          // LAST 1\\n        ]\\n      ].map((i) => i.map((j) => BigInt(j)))))();\\n      mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\\n        A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\\n        B: BigInt(\"1771\"),\\n        Z: Fpk1.create(BigInt(\"-11\"))\\n      }))();\\n      htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\\n        const { x, y } = mapSWU(Fpk1.create(scalars[0]));\\n        return isoMap(x, y);\\n      }, {\\n        DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\\n        encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\\n        p: Fpk1.ORDER,\\n        m: 1,\\n        k: 128,\\n        expand: \"xmd\",\\n        hash: sha256\\n      }))();\\n      hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\\n      encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/node.js\\n  var ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, NonceTooHighError, NonceTooLowError, NonceMaxValueError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, TransactionTypeNotSupportedError, TipAboveFeeCapError, UnknownNodeError;\\n  var init_node = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/node.js\"() {\\n      init_formatGwei();\\n      init_base();\\n      ExecutionRevertedError = class extends BaseError2 {\\n        constructor({ cause, message } = {}) {\\n          const reason = message?.replace(\"execution reverted: \", \"\")?.replace(\"execution reverted\", \"\");\\n          super(`Execution reverted ${reason ? `with reason: ${reason}` : \"for an unknown reason\"}.`, {\\n            cause,\\n            name: \"ExecutionRevertedError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(ExecutionRevertedError, \"code\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: 3\\n      });\\n      Object.defineProperty(ExecutionRevertedError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /execution reverted/\\n      });\\n      FeeCapTooHighError = class extends BaseError2 {\\n        constructor({ cause, maxFeePerGas } = {}) {\\n          super(`The fee cap (\\\\`maxFeePerGas\\\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : \"\"}) cannot be higher than the maximum allowed value (2^256-1).`, {\\n            cause,\\n            name: \"FeeCapTooHighError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(FeeCapTooHighError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /max fee per gas higher than 2\\\\^256-1|fee cap higher than 2\\\\^256-1/\\n      });\\n      FeeCapTooLowError = class extends BaseError2 {\\n        constructor({ cause, maxFeePerGas } = {}) {\\n          super(`The fee cap (\\\\`maxFeePerGas\\\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : \"\"} gwei) cannot be lower than the block base fee.`, {\\n            cause,\\n            name: \"FeeCapTooLowError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(FeeCapTooLowError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\\n      });\\n      NonceTooHighError = class extends BaseError2 {\\n        constructor({ cause, nonce } = {}) {\\n          super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}is higher than the next one expected.`, { cause, name: \"NonceTooHighError\" });\\n        }\\n      };\\n      Object.defineProperty(NonceTooHighError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /nonce too high/\\n      });\\n      NonceTooLowError = class extends BaseError2 {\\n        constructor({ cause, nonce } = {}) {\\n          super([\\n            `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}is lower than the current nonce of the account.`,\\n            \"Try increasing the nonce or find the latest nonce with `getTransactionCount`.\"\\n          ].join(\"\\\\n\"), { cause, name: \"NonceTooLowError\" });\\n        }\\n      };\\n      Object.defineProperty(NonceTooLowError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /nonce too low|transaction already imported|already known/\\n      });\\n      NonceMaxValueError = class extends BaseError2 {\\n        constructor({ cause, nonce } = {}) {\\n          super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}exceeds the maximum allowed nonce.`, { cause, name: \"NonceMaxValueError\" });\\n        }\\n      };\\n      Object.defineProperty(NonceMaxValueError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /nonce has max value/\\n      });\\n      InsufficientFundsError = class extends BaseError2 {\\n        constructor({ cause } = {}) {\\n          super([\\n            \"The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.\"\\n          ].join(\"\\\\n\"), {\\n            cause,\\n            metaMessages: [\\n              \"This error could arise when the account does not have enough funds to:\",\\n              \" - pay for the total gas fee,\",\\n              \" - pay for the value to send.\",\\n              \" \",\\n              \"The cost of the transaction is calculated as `gas * gas fee + value`, where:\",\\n              \" - `gas` is the amount of gas needed for transaction to execute,\",\\n              \" - `gas fee` is the gas fee,\",\\n              \" - `value` is the amount of ether to send to the recipient.\"\\n            ],\\n            name: \"InsufficientFundsError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(InsufficientFundsError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /insufficient funds|exceeds transaction sender account balance/\\n      });\\n      IntrinsicGasTooHighError = class extends BaseError2 {\\n        constructor({ cause, gas } = {}) {\\n          super(`The amount of gas ${gas ? `(${gas}) ` : \"\"}provided for the transaction exceeds the limit allowed for the block.`, {\\n            cause,\\n            name: \"IntrinsicGasTooHighError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(IntrinsicGasTooHighError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /intrinsic gas too high|gas limit reached/\\n      });\\n      IntrinsicGasTooLowError = class extends BaseError2 {\\n        constructor({ cause, gas } = {}) {\\n          super(`The amount of gas ${gas ? `(${gas}) ` : \"\"}provided for the transaction is too low.`, {\\n            cause,\\n            name: \"IntrinsicGasTooLowError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(IntrinsicGasTooLowError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /intrinsic gas too low/\\n      });\\n      TransactionTypeNotSupportedError = class extends BaseError2 {\\n        constructor({ cause }) {\\n          super(\"The transaction type is not supported for this chain.\", {\\n            cause,\\n            name: \"TransactionTypeNotSupportedError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(TransactionTypeNotSupportedError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /transaction type not valid/\\n      });\\n      TipAboveFeeCapError = class extends BaseError2 {\\n        constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {\\n          super([\\n            `The provided tip (\\\\`maxPriorityFeePerGas\\\\`${maxPriorityFeePerGas ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei` : \"\"}) cannot be higher than the fee cap (\\\\`maxFeePerGas\\\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : \"\"}).`\\n          ].join(\"\\\\n\"), {\\n            cause,\\n            name: \"TipAboveFeeCapError\"\\n          });\\n        }\\n      };\\n      Object.defineProperty(TipAboveFeeCapError, \"nodeMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\\n      });\\n      UnknownNodeError = class extends BaseError2 {\\n        constructor({ cause }) {\\n          super(`An error occurred while executing: ${cause?.shortMessage}`, {\\n            cause,\\n            name: \"UnknownNodeError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getNodeError.js\\n  function getNodeError(err, args) {\\n    const message = (err.details || \"\").toLowerCase();\\n    const executionRevertedError = err instanceof BaseError2 ? err.walk((e) => e?.code === ExecutionRevertedError.code) : err;\\n    if (executionRevertedError instanceof BaseError2)\\n      return new ExecutionRevertedError({\\n        cause: err,\\n        message: executionRevertedError.details\\n      });\\n    if (ExecutionRevertedError.nodeMessage.test(message))\\n      return new ExecutionRevertedError({\\n        cause: err,\\n        message: err.details\\n      });\\n    if (FeeCapTooHighError.nodeMessage.test(message))\\n      return new FeeCapTooHighError({\\n        cause: err,\\n        maxFeePerGas: args?.maxFeePerGas\\n      });\\n    if (FeeCapTooLowError.nodeMessage.test(message))\\n      return new FeeCapTooLowError({\\n        cause: err,\\n        maxFeePerGas: args?.maxFeePerGas\\n      });\\n    if (NonceTooHighError.nodeMessage.test(message))\\n      return new NonceTooHighError({ cause: err, nonce: args?.nonce });\\n    if (NonceTooLowError.nodeMessage.test(message))\\n      return new NonceTooLowError({ cause: err, nonce: args?.nonce });\\n    if (NonceMaxValueError.nodeMessage.test(message))\\n      return new NonceMaxValueError({ cause: err, nonce: args?.nonce });\\n    if (InsufficientFundsError.nodeMessage.test(message))\\n      return new InsufficientFundsError({ cause: err });\\n    if (IntrinsicGasTooHighError.nodeMessage.test(message))\\n      return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas });\\n    if (IntrinsicGasTooLowError.nodeMessage.test(message))\\n      return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas });\\n    if (TransactionTypeNotSupportedError.nodeMessage.test(message))\\n      return new TransactionTypeNotSupportedError({ cause: err });\\n    if (TipAboveFeeCapError.nodeMessage.test(message))\\n      return new TipAboveFeeCapError({\\n        cause: err,\\n        maxFeePerGas: args?.maxFeePerGas,\\n        maxPriorityFeePerGas: args?.maxPriorityFeePerGas\\n      });\\n    return new UnknownNodeError({\\n      cause: err\\n    });\\n  }\\n  var init_getNodeError = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getNodeError.js\"() {\\n      init_base();\\n      init_node();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/extract.js\\n  function extract(value_, { format }) {\\n    if (!format)\\n      return {};\\n    const value = {};\\n    function extract_(formatted2) {\\n      const keys = Object.keys(formatted2);\\n      for (const key of keys) {\\n        if (key in value_)\\n          value[key] = value_[key];\\n        if (formatted2[key] && typeof formatted2[key] === \"object\" && !Array.isArray(formatted2[key]))\\n          extract_(formatted2[key]);\\n      }\\n    }\\n    const formatted = format(value_ || {});\\n    extract_(formatted);\\n    return value;\\n  }\\n  var init_extract = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/extract.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/formatter.js\\n  function defineFormatter(type, format) {\\n    return ({ exclude, format: overrides }) => {\\n      return {\\n        exclude,\\n        format: (args) => {\\n          const formatted = format(args);\\n          if (exclude) {\\n            for (const key of exclude) {\\n              delete formatted[key];\\n            }\\n          }\\n          return {\\n            ...formatted,\\n            ...overrides(args)\\n          };\\n        },\\n        type\\n      };\\n    };\\n  }\\n  var init_formatter = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/formatter.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/transactionRequest.js\\n  function formatTransactionRequest(request) {\\n    const rpcRequest = {};\\n    if (typeof request.authorizationList !== \"undefined\")\\n      rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);\\n    if (typeof request.accessList !== \"undefined\")\\n      rpcRequest.accessList = request.accessList;\\n    if (typeof request.blobVersionedHashes !== \"undefined\")\\n      rpcRequest.blobVersionedHashes = request.blobVersionedHashes;\\n    if (typeof request.blobs !== \"undefined\") {\\n      if (typeof request.blobs[0] !== \"string\")\\n        rpcRequest.blobs = request.blobs.map((x) => bytesToHex(x));\\n      else\\n        rpcRequest.blobs = request.blobs;\\n    }\\n    if (typeof request.data !== \"undefined\")\\n      rpcRequest.data = request.data;\\n    if (typeof request.from !== \"undefined\")\\n      rpcRequest.from = request.from;\\n    if (typeof request.gas !== \"undefined\")\\n      rpcRequest.gas = numberToHex(request.gas);\\n    if (typeof request.gasPrice !== \"undefined\")\\n      rpcRequest.gasPrice = numberToHex(request.gasPrice);\\n    if (typeof request.maxFeePerBlobGas !== \"undefined\")\\n      rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);\\n    if (typeof request.maxFeePerGas !== \"undefined\")\\n      rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);\\n    if (typeof request.maxPriorityFeePerGas !== \"undefined\")\\n      rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);\\n    if (typeof request.nonce !== \"undefined\")\\n      rpcRequest.nonce = numberToHex(request.nonce);\\n    if (typeof request.to !== \"undefined\")\\n      rpcRequest.to = request.to;\\n    if (typeof request.type !== \"undefined\")\\n      rpcRequest.type = rpcTransactionType[request.type];\\n    if (typeof request.value !== \"undefined\")\\n      rpcRequest.value = numberToHex(request.value);\\n    return rpcRequest;\\n  }\\n  function formatAuthorizationList(authorizationList) {\\n    return authorizationList.map((authorization) => ({\\n      address: authorization.address,\\n      r: authorization.r ? numberToHex(BigInt(authorization.r)) : authorization.r,\\n      s: authorization.s ? numberToHex(BigInt(authorization.s)) : authorization.s,\\n      chainId: numberToHex(authorization.chainId),\\n      nonce: numberToHex(authorization.nonce),\\n      ...typeof authorization.yParity !== \"undefined\" ? { yParity: numberToHex(authorization.yParity) } : {},\\n      ...typeof authorization.v !== \"undefined\" && typeof authorization.yParity === \"undefined\" ? { v: numberToHex(authorization.v) } : {}\\n    }));\\n  }\\n  var rpcTransactionType;\\n  var init_transactionRequest = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/transactionRequest.js\"() {\\n      init_toHex();\\n      rpcTransactionType = {\\n        legacy: \"0x0\",\\n        eip2930: \"0x1\",\\n        eip1559: \"0x2\",\\n        eip4844: \"0x3\",\\n        eip7702: \"0x4\"\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/stateOverride.js\\n  function serializeStateMapping(stateMapping) {\\n    if (!stateMapping || stateMapping.length === 0)\\n      return void 0;\\n    return stateMapping.reduce((acc, { slot, value }) => {\\n      if (slot.length !== 66)\\n        throw new InvalidBytesLengthError({\\n          size: slot.length,\\n          targetSize: 66,\\n          type: \"hex\"\\n        });\\n      if (value.length !== 66)\\n        throw new InvalidBytesLengthError({\\n          size: value.length,\\n          targetSize: 66,\\n          type: \"hex\"\\n        });\\n      acc[slot] = value;\\n      return acc;\\n    }, {});\\n  }\\n  function serializeAccountStateOverride(parameters) {\\n    const { balance, nonce, state, stateDiff, code } = parameters;\\n    const rpcAccountStateOverride = {};\\n    if (code !== void 0)\\n      rpcAccountStateOverride.code = code;\\n    if (balance !== void 0)\\n      rpcAccountStateOverride.balance = numberToHex(balance);\\n    if (nonce !== void 0)\\n      rpcAccountStateOverride.nonce = numberToHex(nonce);\\n    if (state !== void 0)\\n      rpcAccountStateOverride.state = serializeStateMapping(state);\\n    if (stateDiff !== void 0) {\\n      if (rpcAccountStateOverride.state)\\n        throw new StateAssignmentConflictError();\\n      rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\\n    }\\n    return rpcAccountStateOverride;\\n  }\\n  function serializeStateOverride(parameters) {\\n    if (!parameters)\\n      return void 0;\\n    const rpcStateOverride = {};\\n    for (const { address, ...accountState } of parameters) {\\n      if (!isAddress(address, { strict: false }))\\n        throw new InvalidAddressError({ address });\\n      if (rpcStateOverride[address])\\n        throw new AccountStateConflictError({ address });\\n      rpcStateOverride[address] = serializeAccountStateOverride(accountState);\\n    }\\n    return rpcStateOverride;\\n  }\\n  var init_stateOverride2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/stateOverride.js\"() {\\n      init_address();\\n      init_data();\\n      init_stateOverride();\\n      init_isAddress();\\n      init_toHex();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/number.js\\n  var maxInt8, maxInt16, maxInt24, maxInt32, maxInt40, maxInt48, maxInt56, maxInt64, maxInt72, maxInt80, maxInt88, maxInt96, maxInt104, maxInt112, maxInt120, maxInt128, maxInt136, maxInt144, maxInt152, maxInt160, maxInt168, maxInt176, maxInt184, maxInt192, maxInt200, maxInt208, maxInt216, maxInt224, maxInt232, maxInt240, maxInt248, maxInt256, minInt8, minInt16, minInt24, minInt32, minInt40, minInt48, minInt56, minInt64, minInt72, minInt80, minInt88, minInt96, minInt104, minInt112, minInt120, minInt128, minInt136, minInt144, minInt152, minInt160, minInt168, minInt176, minInt184, minInt192, minInt200, minInt208, minInt216, minInt224, minInt232, minInt240, minInt248, minInt256, maxUint8, maxUint16, maxUint24, maxUint32, maxUint40, maxUint48, maxUint56, maxUint64, maxUint72, maxUint80, maxUint88, maxUint96, maxUint104, maxUint112, maxUint120, maxUint128, maxUint136, maxUint144, maxUint152, maxUint160, maxUint168, maxUint176, maxUint184, maxUint192, maxUint200, maxUint208, maxUint216, maxUint224, maxUint232, maxUint240, maxUint248, maxUint256;\\n  var init_number = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/number.js\"() {\\n      maxInt8 = 2n ** (8n - 1n) - 1n;\\n      maxInt16 = 2n ** (16n - 1n) - 1n;\\n      maxInt24 = 2n ** (24n - 1n) - 1n;\\n      maxInt32 = 2n ** (32n - 1n) - 1n;\\n      maxInt40 = 2n ** (40n - 1n) - 1n;\\n      maxInt48 = 2n ** (48n - 1n) - 1n;\\n      maxInt56 = 2n ** (56n - 1n) - 1n;\\n      maxInt64 = 2n ** (64n - 1n) - 1n;\\n      maxInt72 = 2n ** (72n - 1n) - 1n;\\n      maxInt80 = 2n ** (80n - 1n) - 1n;\\n      maxInt88 = 2n ** (88n - 1n) - 1n;\\n      maxInt96 = 2n ** (96n - 1n) - 1n;\\n      maxInt104 = 2n ** (104n - 1n) - 1n;\\n      maxInt112 = 2n ** (112n - 1n) - 1n;\\n      maxInt120 = 2n ** (120n - 1n) - 1n;\\n      maxInt128 = 2n ** (128n - 1n) - 1n;\\n      maxInt136 = 2n ** (136n - 1n) - 1n;\\n      maxInt144 = 2n ** (144n - 1n) - 1n;\\n      maxInt152 = 2n ** (152n - 1n) - 1n;\\n      maxInt160 = 2n ** (160n - 1n) - 1n;\\n      maxInt168 = 2n ** (168n - 1n) - 1n;\\n      maxInt176 = 2n ** (176n - 1n) - 1n;\\n      maxInt184 = 2n ** (184n - 1n) - 1n;\\n      maxInt192 = 2n ** (192n - 1n) - 1n;\\n      maxInt200 = 2n ** (200n - 1n) - 1n;\\n      maxInt208 = 2n ** (208n - 1n) - 1n;\\n      maxInt216 = 2n ** (216n - 1n) - 1n;\\n      maxInt224 = 2n ** (224n - 1n) - 1n;\\n      maxInt232 = 2n ** (232n - 1n) - 1n;\\n      maxInt240 = 2n ** (240n - 1n) - 1n;\\n      maxInt248 = 2n ** (248n - 1n) - 1n;\\n      maxInt256 = 2n ** (256n - 1n) - 1n;\\n      minInt8 = -(2n ** (8n - 1n));\\n      minInt16 = -(2n ** (16n - 1n));\\n      minInt24 = -(2n ** (24n - 1n));\\n      minInt32 = -(2n ** (32n - 1n));\\n      minInt40 = -(2n ** (40n - 1n));\\n      minInt48 = -(2n ** (48n - 1n));\\n      minInt56 = -(2n ** (56n - 1n));\\n      minInt64 = -(2n ** (64n - 1n));\\n      minInt72 = -(2n ** (72n - 1n));\\n      minInt80 = -(2n ** (80n - 1n));\\n      minInt88 = -(2n ** (88n - 1n));\\n      minInt96 = -(2n ** (96n - 1n));\\n      minInt104 = -(2n ** (104n - 1n));\\n      minInt112 = -(2n ** (112n - 1n));\\n      minInt120 = -(2n ** (120n - 1n));\\n      minInt128 = -(2n ** (128n - 1n));\\n      minInt136 = -(2n ** (136n - 1n));\\n      minInt144 = -(2n ** (144n - 1n));\\n      minInt152 = -(2n ** (152n - 1n));\\n      minInt160 = -(2n ** (160n - 1n));\\n      minInt168 = -(2n ** (168n - 1n));\\n      minInt176 = -(2n ** (176n - 1n));\\n      minInt184 = -(2n ** (184n - 1n));\\n      minInt192 = -(2n ** (192n - 1n));\\n      minInt200 = -(2n ** (200n - 1n));\\n      minInt208 = -(2n ** (208n - 1n));\\n      minInt216 = -(2n ** (216n - 1n));\\n      minInt224 = -(2n ** (224n - 1n));\\n      minInt232 = -(2n ** (232n - 1n));\\n      minInt240 = -(2n ** (240n - 1n));\\n      minInt248 = -(2n ** (248n - 1n));\\n      minInt256 = -(2n ** (256n - 1n));\\n      maxUint8 = 2n ** 8n - 1n;\\n      maxUint16 = 2n ** 16n - 1n;\\n      maxUint24 = 2n ** 24n - 1n;\\n      maxUint32 = 2n ** 32n - 1n;\\n      maxUint40 = 2n ** 40n - 1n;\\n      maxUint48 = 2n ** 48n - 1n;\\n      maxUint56 = 2n ** 56n - 1n;\\n      maxUint64 = 2n ** 64n - 1n;\\n      maxUint72 = 2n ** 72n - 1n;\\n      maxUint80 = 2n ** 80n - 1n;\\n      maxUint88 = 2n ** 88n - 1n;\\n      maxUint96 = 2n ** 96n - 1n;\\n      maxUint104 = 2n ** 104n - 1n;\\n      maxUint112 = 2n ** 112n - 1n;\\n      maxUint120 = 2n ** 120n - 1n;\\n      maxUint128 = 2n ** 128n - 1n;\\n      maxUint136 = 2n ** 136n - 1n;\\n      maxUint144 = 2n ** 144n - 1n;\\n      maxUint152 = 2n ** 152n - 1n;\\n      maxUint160 = 2n ** 160n - 1n;\\n      maxUint168 = 2n ** 168n - 1n;\\n      maxUint176 = 2n ** 176n - 1n;\\n      maxUint184 = 2n ** 184n - 1n;\\n      maxUint192 = 2n ** 192n - 1n;\\n      maxUint200 = 2n ** 200n - 1n;\\n      maxUint208 = 2n ** 208n - 1n;\\n      maxUint216 = 2n ** 216n - 1n;\\n      maxUint224 = 2n ** 224n - 1n;\\n      maxUint232 = 2n ** 232n - 1n;\\n      maxUint240 = 2n ** 240n - 1n;\\n      maxUint248 = 2n ** 248n - 1n;\\n      maxUint256 = 2n ** 256n - 1n;\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/assertRequest.js\\n  function assertRequest(args) {\\n    const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;\\n    const account = account_ ? parseAccount(account_) : void 0;\\n    if (account && !isAddress(account.address))\\n      throw new InvalidAddressError({ address: account.address });\\n    if (to && !isAddress(to))\\n      throw new InvalidAddressError({ address: to });\\n    if (typeof gasPrice !== \"undefined\" && (typeof maxFeePerGas !== \"undefined\" || typeof maxPriorityFeePerGas !== \"undefined\"))\\n      throw new FeeConflictError();\\n    if (maxFeePerGas && maxFeePerGas > maxUint256)\\n      throw new FeeCapTooHighError({ maxFeePerGas });\\n    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)\\n      throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\\n  }\\n  var init_assertRequest = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/assertRequest.js\"() {\\n      init_parseAccount();\\n      init_number();\\n      init_address();\\n      init_node();\\n      init_transaction();\\n      init_isAddress();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/isAddressEqual.js\\n  function isAddressEqual(a, b) {\\n    if (!isAddress(a, { strict: false }))\\n      throw new InvalidAddressError({ address: a });\\n    if (!isAddress(b, { strict: false }))\\n      throw new InvalidAddressError({ address: b });\\n    return a.toLowerCase() === b.toLowerCase();\\n  }\\n  var init_isAddressEqual = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/address/isAddressEqual.js\"() {\\n      init_address();\\n      init_isAddress();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeFunctionResult.js\\n  function decodeFunctionResult(parameters) {\\n    const { abi: abi2, args, functionName, data } = parameters;\\n    let abiItem = abi2[0];\\n    if (functionName) {\\n      const item = getAbiItem({ abi: abi2, args, name: functionName });\\n      if (!item)\\n        throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath4 });\\n      abiItem = item;\\n    }\\n    if (abiItem.type !== \"function\")\\n      throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath4 });\\n    if (!abiItem.outputs)\\n      throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath4 });\\n    const values = decodeAbiParameters(abiItem.outputs, data);\\n    if (values && values.length > 1)\\n      return values;\\n    if (values && values.length === 1)\\n      return values[0];\\n    return void 0;\\n  }\\n  var docsPath4;\\n  var init_decodeFunctionResult = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeFunctionResult.js\"() {\\n      init_abi();\\n      init_decodeAbiParameters();\\n      init_getAbiItem();\\n      docsPath4 = \"/docs/contract/decodeFunctionResult\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/abis.js\\n  var multicall3Abi, batchGatewayAbi, universalResolverErrors, universalResolverResolveAbi, universalResolverReverseAbi, textResolverAbi, addressResolverAbi, universalSignatureValidatorAbi;\\n  var init_abis = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/abis.js\"() {\\n      multicall3Abi = [\\n        {\\n          inputs: [\\n            {\\n              components: [\\n                {\\n                  name: \"target\",\\n                  type: \"address\"\\n                },\\n                {\\n                  name: \"allowFailure\",\\n                  type: \"bool\"\\n                },\\n                {\\n                  name: \"callData\",\\n                  type: \"bytes\"\\n                }\\n              ],\\n              name: \"calls\",\\n              type: \"tuple[]\"\\n            }\\n          ],\\n          name: \"aggregate3\",\\n          outputs: [\\n            {\\n              components: [\\n                {\\n                  name: \"success\",\\n                  type: \"bool\"\\n                },\\n                {\\n                  name: \"returnData\",\\n                  type: \"bytes\"\\n                }\\n              ],\\n              name: \"returnData\",\\n              type: \"tuple[]\"\\n            }\\n          ],\\n          stateMutability: \"view\",\\n          type: \"function\"\\n        }\\n      ];\\n      batchGatewayAbi = [\\n        {\\n          name: \"query\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            {\\n              type: \"tuple[]\",\\n              name: \"queries\",\\n              components: [\\n                {\\n                  type: \"address\",\\n                  name: \"sender\"\\n                },\\n                {\\n                  type: \"string[]\",\\n                  name: \"urls\"\\n                },\\n                {\\n                  type: \"bytes\",\\n                  name: \"data\"\\n                }\\n              ]\\n            }\\n          ],\\n          outputs: [\\n            {\\n              type: \"bool[]\",\\n              name: \"failures\"\\n            },\\n            {\\n              type: \"bytes[]\",\\n              name: \"responses\"\\n            }\\n          ]\\n        },\\n        {\\n          name: \"HttpError\",\\n          type: \"error\",\\n          inputs: [\\n            {\\n              type: \"uint16\",\\n              name: \"status\"\\n            },\\n            {\\n              type: \"string\",\\n              name: \"message\"\\n            }\\n          ]\\n        }\\n      ];\\n      universalResolverErrors = [\\n        {\\n          inputs: [],\\n          name: \"ResolverNotFound\",\\n          type: \"error\"\\n        },\\n        {\\n          inputs: [],\\n          name: \"ResolverWildcardNotSupported\",\\n          type: \"error\"\\n        },\\n        {\\n          inputs: [],\\n          name: \"ResolverNotContract\",\\n          type: \"error\"\\n        },\\n        {\\n          inputs: [\\n            {\\n              name: \"returnData\",\\n              type: \"bytes\"\\n            }\\n          ],\\n          name: \"ResolverError\",\\n          type: \"error\"\\n        },\\n        {\\n          inputs: [\\n            {\\n              components: [\\n                {\\n                  name: \"status\",\\n                  type: \"uint16\"\\n                },\\n                {\\n                  name: \"message\",\\n                  type: \"string\"\\n                }\\n              ],\\n              name: \"errors\",\\n              type: \"tuple[]\"\\n            }\\n          ],\\n          name: \"HttpError\",\\n          type: \"error\"\\n        }\\n      ];\\n      universalResolverResolveAbi = [\\n        ...universalResolverErrors,\\n        {\\n          name: \"resolve\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            { name: \"name\", type: \"bytes\" },\\n            { name: \"data\", type: \"bytes\" }\\n          ],\\n          outputs: [\\n            { name: \"\", type: \"bytes\" },\\n            { name: \"address\", type: \"address\" }\\n          ]\\n        },\\n        {\\n          name: \"resolve\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            { name: \"name\", type: \"bytes\" },\\n            { name: \"data\", type: \"bytes\" },\\n            { name: \"gateways\", type: \"string[]\" }\\n          ],\\n          outputs: [\\n            { name: \"\", type: \"bytes\" },\\n            { name: \"address\", type: \"address\" }\\n          ]\\n        }\\n      ];\\n      universalResolverReverseAbi = [\\n        ...universalResolverErrors,\\n        {\\n          name: \"reverse\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [{ type: \"bytes\", name: \"reverseName\" }],\\n          outputs: [\\n            { type: \"string\", name: \"resolvedName\" },\\n            { type: \"address\", name: \"resolvedAddress\" },\\n            { type: \"address\", name: \"reverseResolver\" },\\n            { type: \"address\", name: \"resolver\" }\\n          ]\\n        },\\n        {\\n          name: \"reverse\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            { type: \"bytes\", name: \"reverseName\" },\\n            { type: \"string[]\", name: \"gateways\" }\\n          ],\\n          outputs: [\\n            { type: \"string\", name: \"resolvedName\" },\\n            { type: \"address\", name: \"resolvedAddress\" },\\n            { type: \"address\", name: \"reverseResolver\" },\\n            { type: \"address\", name: \"resolver\" }\\n          ]\\n        }\\n      ];\\n      textResolverAbi = [\\n        {\\n          name: \"text\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            { name: \"name\", type: \"bytes32\" },\\n            { name: \"key\", type: \"string\" }\\n          ],\\n          outputs: [{ name: \"\", type: \"string\" }]\\n        }\\n      ];\\n      addressResolverAbi = [\\n        {\\n          name: \"addr\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [{ name: \"name\", type: \"bytes32\" }],\\n          outputs: [{ name: \"\", type: \"address\" }]\\n        },\\n        {\\n          name: \"addr\",\\n          type: \"function\",\\n          stateMutability: \"view\",\\n          inputs: [\\n            { name: \"name\", type: \"bytes32\" },\\n            { name: \"coinType\", type: \"uint256\" }\\n          ],\\n          outputs: [{ name: \"\", type: \"bytes\" }]\\n        }\\n      ];\\n      universalSignatureValidatorAbi = [\\n        {\\n          inputs: [\\n            {\\n              name: \"_signer\",\\n              type: \"address\"\\n            },\\n            {\\n              name: \"_hash\",\\n              type: \"bytes32\"\\n            },\\n            {\\n              name: \"_signature\",\\n              type: \"bytes\"\\n            }\\n          ],\\n          stateMutability: \"nonpayable\",\\n          type: \"constructor\"\\n        },\\n        {\\n          inputs: [\\n            {\\n              name: \"_signer\",\\n              type: \"address\"\\n            },\\n            {\\n              name: \"_hash\",\\n              type: \"bytes32\"\\n            },\\n            {\\n              name: \"_signature\",\\n              type: \"bytes\"\\n            }\\n          ],\\n          outputs: [\\n            {\\n              type: \"bool\"\\n            }\\n          ],\\n          stateMutability: \"nonpayable\",\\n          type: \"function\",\\n          name: \"isValidSig\"\\n        }\\n      ];\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/contract.js\\n  var aggregate3Signature;\\n  var init_contract2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/contract.js\"() {\\n      aggregate3Signature = \"0x82ad56cb\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/contracts.js\\n  var deploylessCallViaBytecodeBytecode, deploylessCallViaFactoryBytecode, universalSignatureValidatorByteCode;\\n  var init_contracts = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/contracts.js\"() {\\n      deploylessCallViaBytecodeBytecode = \"0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe\";\\n      deploylessCallViaFactoryBytecode = \"0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe\";\\n      universalSignatureValidatorByteCode = \"0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/chain.js\\n  var ChainDoesNotSupportContract, ChainMismatchError, ChainNotFoundError, ClientChainNotConfiguredError, InvalidChainIdError;\\n  var init_chain = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/chain.js\"() {\\n      init_base();\\n      ChainDoesNotSupportContract = class extends BaseError2 {\\n        constructor({ blockNumber, chain, contract }) {\\n          super(`Chain \"${chain.name}\" does not support contract \"${contract.name}\".`, {\\n            metaMessages: [\\n              \"This could be due to any of the following:\",\\n              ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [\\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`\\n              ] : [\\n                `- The chain does not have the contract \"${contract.name}\" configured.`\\n              ]\\n            ],\\n            name: \"ChainDoesNotSupportContract\"\\n          });\\n        }\\n      };\\n      ChainMismatchError = class extends BaseError2 {\\n        constructor({ chain, currentChainId }) {\\n          super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \\\\u2013 ${chain.name}).`, {\\n            metaMessages: [\\n              `Current Chain ID:  ${currentChainId}`,\\n              `Expected Chain ID: ${chain.id} \\\\u2013 ${chain.name}`\\n            ],\\n            name: \"ChainMismatchError\"\\n          });\\n        }\\n      };\\n      ChainNotFoundError = class extends BaseError2 {\\n        constructor() {\\n          super([\\n            \"No chain was provided to the request.\",\\n            \"Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.\"\\n          ].join(\"\\\\n\"), {\\n            name: \"ChainNotFoundError\"\\n          });\\n        }\\n      };\\n      ClientChainNotConfiguredError = class extends BaseError2 {\\n        constructor() {\\n          super(\"No chain was provided to the Client.\", {\\n            name: \"ClientChainNotConfiguredError\"\\n          });\\n        }\\n      };\\n      InvalidChainIdError = class extends BaseError2 {\\n        constructor({ chainId }) {\\n          super(typeof chainId === \"number\" ? `Chain ID \"${chainId}\" is invalid.` : \"Chain ID is invalid.\", { name: \"InvalidChainIdError\" });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeDeployData.js\\n  function encodeDeployData(parameters) {\\n    const { abi: abi2, args, bytecode } = parameters;\\n    if (!args || args.length === 0)\\n      return bytecode;\\n    const description = abi2.find((x) => \"type\" in x && x.type === \"constructor\");\\n    if (!description)\\n      throw new AbiConstructorNotFoundError({ docsPath: docsPath5 });\\n    if (!(\"inputs\" in description))\\n      throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath5 });\\n    if (!description.inputs || description.inputs.length === 0)\\n      throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath5 });\\n    const data = encodeAbiParameters(description.inputs, args);\\n    return concatHex([bytecode, data]);\\n  }\\n  var docsPath5;\\n  var init_encodeDeployData = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeDeployData.js\"() {\\n      init_abi();\\n      init_concat();\\n      init_encodeAbiParameters();\\n      docsPath5 = \"/docs/contract/encodeDeployData\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/chain/getChainContractAddress.js\\n  function getChainContractAddress({ blockNumber, chain, contract: name }) {\\n    const contract = chain?.contracts?.[name];\\n    if (!contract)\\n      throw new ChainDoesNotSupportContract({\\n        chain,\\n        contract: { name }\\n      });\\n    if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)\\n      throw new ChainDoesNotSupportContract({\\n        blockNumber,\\n        chain,\\n        contract: {\\n          name,\\n          blockCreated: contract.blockCreated\\n        }\\n      });\\n    return contract.address;\\n  }\\n  var init_getChainContractAddress = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/chain/getChainContractAddress.js\"() {\\n      init_chain();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getCallError.js\\n  function getCallError(err, { docsPath: docsPath8, ...args }) {\\n    const cause = (() => {\\n      const cause2 = getNodeError(err, args);\\n      if (cause2 instanceof UnknownNodeError)\\n        return err;\\n      return cause2;\\n    })();\\n    return new CallExecutionError(cause, {\\n      docsPath: docsPath8,\\n      ...args\\n    });\\n  }\\n  var init_getCallError = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getCallError.js\"() {\\n      init_contract();\\n      init_node();\\n      init_getNodeError();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withResolvers.js\\n  function withResolvers() {\\n    let resolve = () => void 0;\\n    let reject = () => void 0;\\n    const promise = new Promise((resolve_, reject_) => {\\n      resolve = resolve_;\\n      reject = reject_;\\n    });\\n    return { promise, resolve, reject };\\n  }\\n  var init_withResolvers = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withResolvers.js\"() {\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/createBatchScheduler.js\\n  function createBatchScheduler({ fn, id, shouldSplitBatch, wait: wait2 = 0, sort }) {\\n    const exec = async () => {\\n      const scheduler = getScheduler();\\n      flush();\\n      const args = scheduler.map(({ args: args2 }) => args2);\\n      if (args.length === 0)\\n        return;\\n      fn(args).then((data) => {\\n        if (sort && Array.isArray(data))\\n          data.sort(sort);\\n        for (let i = 0; i < scheduler.length; i++) {\\n          const { resolve } = scheduler[i];\\n          resolve?.([data[i], data]);\\n        }\\n      }).catch((err) => {\\n        for (let i = 0; i < scheduler.length; i++) {\\n          const { reject } = scheduler[i];\\n          reject?.(err);\\n        }\\n      });\\n    };\\n    const flush = () => schedulerCache.delete(id);\\n    const getBatchedArgs = () => getScheduler().map(({ args }) => args);\\n    const getScheduler = () => schedulerCache.get(id) || [];\\n    const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);\\n    return {\\n      flush,\\n      async schedule(args) {\\n        const { promise, resolve, reject } = withResolvers();\\n        const split3 = shouldSplitBatch?.([...getBatchedArgs(), args]);\\n        if (split3)\\n          exec();\\n        const hasActiveScheduler = getScheduler().length > 0;\\n        if (hasActiveScheduler) {\\n          setScheduler({ args, resolve, reject });\\n          return promise;\\n        }\\n        setScheduler({ args, resolve, reject });\\n        setTimeout(exec, wait2);\\n        return promise;\\n      }\\n    };\\n  }\\n  var schedulerCache;\\n  var init_createBatchScheduler = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/createBatchScheduler.js\"() {\\n      init_withResolvers();\\n      schedulerCache = /* @__PURE__ */ new Map();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/ccip.js\\n  var OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError;\\n  var init_ccip = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/ccip.js\"() {\\n      init_stringify();\\n      init_base();\\n      init_utils3();\\n      OffchainLookupError = class extends BaseError2 {\\n        constructor({ callbackSelector, cause, data, extraData, sender, urls }) {\\n          super(cause.shortMessage || \"An error occurred while fetching for an offchain result.\", {\\n            cause,\\n            metaMessages: [\\n              ...cause.metaMessages || [],\\n              cause.metaMessages?.length ? \"\" : [],\\n              \"Offchain Gateway Call:\",\\n              urls && [\\n                \"  Gateway URL(s):\",\\n                ...urls.map((url) => `    ${getUrl(url)}`)\\n              ],\\n              `  Sender: ${sender}`,\\n              `  Data: ${data}`,\\n              `  Callback selector: ${callbackSelector}`,\\n              `  Extra data: ${extraData}`\\n            ].flat(),\\n            name: \"OffchainLookupError\"\\n          });\\n        }\\n      };\\n      OffchainLookupResponseMalformedError = class extends BaseError2 {\\n        constructor({ result, url }) {\\n          super(\"Offchain gateway response is malformed. Response data must be a hex value.\", {\\n            metaMessages: [\\n              `Gateway URL: ${getUrl(url)}`,\\n              `Response: ${stringify(result)}`\\n            ],\\n            name: \"OffchainLookupResponseMalformedError\"\\n          });\\n        }\\n      };\\n      OffchainLookupSenderMismatchError = class extends BaseError2 {\\n        constructor({ sender, to }) {\\n          super(\"Reverted sender address does not match target contract address (`to`).\", {\\n            metaMessages: [\\n              `Contract address: ${to}`,\\n              `OffchainLookup sender address: ${sender}`\\n            ],\\n            name: \"OffchainLookupSenderMismatchError\"\\n          });\\n        }\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeFunctionData.js\\n  function decodeFunctionData(parameters) {\\n    const { abi: abi2, data } = parameters;\\n    const signature = slice(data, 0, 4);\\n    const description = abi2.find((x) => x.type === \"function\" && signature === toFunctionSelector(formatAbiItem2(x)));\\n    if (!description)\\n      throw new AbiFunctionSignatureNotFoundError(signature, {\\n        docsPath: \"/docs/contract/decodeFunctionData\"\\n      });\\n    return {\\n      functionName: description.name,\\n      args: \"inputs\" in description && description.inputs && description.inputs.length > 0 ? decodeAbiParameters(description.inputs, slice(data, 4)) : void 0\\n    };\\n  }\\n  var init_decodeFunctionData = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeFunctionData.js\"() {\\n      init_abi();\\n      init_slice();\\n      init_toFunctionSelector();\\n      init_decodeAbiParameters();\\n      init_formatAbiItem2();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeErrorResult.js\\n  function encodeErrorResult(parameters) {\\n    const { abi: abi2, errorName, args } = parameters;\\n    let abiItem = abi2[0];\\n    if (errorName) {\\n      const item = getAbiItem({ abi: abi2, args, name: errorName });\\n      if (!item)\\n        throw new AbiErrorNotFoundError(errorName, { docsPath: docsPath6 });\\n      abiItem = item;\\n    }\\n    if (abiItem.type !== \"error\")\\n      throw new AbiErrorNotFoundError(void 0, { docsPath: docsPath6 });\\n    const definition = formatAbiItem2(abiItem);\\n    const signature = toFunctionSelector(definition);\\n    let data = \"0x\";\\n    if (args && args.length > 0) {\\n      if (!abiItem.inputs)\\n        throw new AbiErrorInputsNotFoundError(abiItem.name, { docsPath: docsPath6 });\\n      data = encodeAbiParameters(abiItem.inputs, args);\\n    }\\n    return concatHex([signature, data]);\\n  }\\n  var docsPath6;\\n  var init_encodeErrorResult = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeErrorResult.js\"() {\\n      init_abi();\\n      init_concat();\\n      init_toFunctionSelector();\\n      init_encodeAbiParameters();\\n      init_formatAbiItem2();\\n      init_getAbiItem();\\n      docsPath6 = \"/docs/contract/encodeErrorResult\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeFunctionResult.js\\n  function encodeFunctionResult(parameters) {\\n    const { abi: abi2, functionName, result } = parameters;\\n    let abiItem = abi2[0];\\n    if (functionName) {\\n      const item = getAbiItem({ abi: abi2, name: functionName });\\n      if (!item)\\n        throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath7 });\\n      abiItem = item;\\n    }\\n    if (abiItem.type !== \"function\")\\n      throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath7 });\\n    if (!abiItem.outputs)\\n      throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath7 });\\n    const values = (() => {\\n      if (abiItem.outputs.length === 0)\\n        return [];\\n      if (abiItem.outputs.length === 1)\\n        return [result];\\n      if (Array.isArray(result))\\n        return result;\\n      throw new InvalidArrayError(result);\\n    })();\\n    return encodeAbiParameters(abiItem.outputs, values);\\n  }\\n  var docsPath7;\\n  var init_encodeFunctionResult = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeFunctionResult.js\"() {\\n      init_abi();\\n      init_encodeAbiParameters();\\n      init_getAbiItem();\\n      docsPath7 = \"/docs/contract/encodeFunctionResult\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/localBatchGatewayRequest.js\\n  async function localBatchGatewayRequest(parameters) {\\n    const { data, ccipRequest: ccipRequest2 } = parameters;\\n    const { args: [queries] } = decodeFunctionData({ abi: batchGatewayAbi, data });\\n    const failures = [];\\n    const responses = [];\\n    await Promise.all(queries.map(async (query, i) => {\\n      try {\\n        responses[i] = await ccipRequest2(query);\\n        failures[i] = false;\\n      } catch (err) {\\n        failures[i] = true;\\n        responses[i] = encodeError(err);\\n      }\\n    }));\\n    return encodeFunctionResult({\\n      abi: batchGatewayAbi,\\n      functionName: \"query\",\\n      result: [failures, responses]\\n    });\\n  }\\n  function encodeError(error) {\\n    if (error.name === \"HttpRequestError\" && error.status)\\n      return encodeErrorResult({\\n        abi: batchGatewayAbi,\\n        errorName: \"HttpError\",\\n        args: [error.status, error.shortMessage]\\n      });\\n    return encodeErrorResult({\\n      abi: [solidityError],\\n      errorName: \"Error\",\\n      args: [\"shortMessage\" in error ? error.shortMessage : error.message]\\n    });\\n  }\\n  var localBatchGatewayUrl;\\n  var init_localBatchGatewayRequest = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/localBatchGatewayRequest.js\"() {\\n      init_abis();\\n      init_solidity();\\n      init_decodeFunctionData();\\n      init_encodeErrorResult();\\n      init_encodeFunctionResult();\\n      localBatchGatewayUrl = \"x-batch-gateway:true\";\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ccip.js\\n  var ccip_exports = {};\\n  __export(ccip_exports, {\\n    ccipRequest: () => ccipRequest,\\n    offchainLookup: () => offchainLookup,\\n    offchainLookupAbiItem: () => offchainLookupAbiItem,\\n    offchainLookupSignature: () => offchainLookupSignature\\n  });\\n  async function offchainLookup(client, { blockNumber, blockTag, data, to }) {\\n    const { args } = decodeErrorResult({\\n      data,\\n      abi: [offchainLookupAbiItem]\\n    });\\n    const [sender, urls, callData, callbackSelector, extraData] = args;\\n    const { ccipRead } = client;\\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === \"function\" ? ccipRead.request : ccipRequest;\\n    try {\\n      if (!isAddressEqual(to, sender))\\n        throw new OffchainLookupSenderMismatchError({ sender, to });\\n      const result = urls.includes(localBatchGatewayUrl) ? await localBatchGatewayRequest({\\n        data: callData,\\n        ccipRequest: ccipRequest_\\n      }) : await ccipRequest_({ data: callData, sender, urls });\\n      const { data: data_ } = await call(client, {\\n        blockNumber,\\n        blockTag,\\n        data: concat([\\n          callbackSelector,\\n          encodeAbiParameters([{ type: \"bytes\" }, { type: \"bytes\" }], [result, extraData])\\n        ]),\\n        to\\n      });\\n      return data_;\\n    } catch (err) {\\n      throw new OffchainLookupError({\\n        callbackSelector,\\n        cause: err,\\n        data,\\n        extraData,\\n        sender,\\n        urls\\n      });\\n    }\\n  }\\n  async function ccipRequest({ data, sender, urls }) {\\n    let error = new Error(\"An unknown error occurred.\");\\n    for (let i = 0; i < urls.length; i++) {\\n      const url = urls[i];\\n      const method = url.includes(\"{data}\") ? \"GET\" : \"POST\";\\n      const body = method === \"POST\" ? { data, sender } : void 0;\\n      const headers = method === \"POST\" ? { \"Content-Type\": \"application/json\" } : {};\\n      try {\\n        const response = await fetch(url.replace(\"{sender}\", sender.toLowerCase()).replace(\"{data}\", data), {\\n          body: JSON.stringify(body),\\n          headers,\\n          method\\n        });\\n        let result;\\n        if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\\n          result = (await response.json()).data;\\n        } else {\\n          result = await response.text();\\n        }\\n        if (!response.ok) {\\n          error = new HttpRequestError({\\n            body,\\n            details: result?.error ? stringify(result.error) : response.statusText,\\n            headers: response.headers,\\n            status: response.status,\\n            url\\n          });\\n          continue;\\n        }\\n        if (!isHex(result)) {\\n          error = new OffchainLookupResponseMalformedError({\\n            result,\\n            url\\n          });\\n          continue;\\n        }\\n        return result;\\n      } catch (err) {\\n        error = new HttpRequestError({\\n          body,\\n          details: err.message,\\n          url\\n        });\\n      }\\n    }\\n    throw error;\\n  }\\n  var offchainLookupSignature, offchainLookupAbiItem;\\n  var init_ccip2 = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ccip.js\"() {\\n      init_call();\\n      init_ccip();\\n      init_request();\\n      init_decodeErrorResult();\\n      init_encodeAbiParameters();\\n      init_isAddressEqual();\\n      init_concat();\\n      init_isHex();\\n      init_localBatchGatewayRequest();\\n      init_stringify();\\n      offchainLookupSignature = \"0x556f1830\";\\n      offchainLookupAbiItem = {\\n        name: \"OffchainLookup\",\\n        type: \"error\",\\n        inputs: [\\n          {\\n            name: \"sender\",\\n            type: \"address\"\\n          },\\n          {\\n            name: \"urls\",\\n            type: \"string[]\"\\n          },\\n          {\\n            name: \"callData\",\\n            type: \"bytes\"\\n          },\\n          {\\n            name: \"callbackFunction\",\\n            type: \"bytes4\"\\n          },\\n          {\\n            name: \"extraData\",\\n            type: \"bytes\"\\n          }\\n        ]\\n      };\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/call.js\\n  async function call(client, args) {\\n    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = \"latest\", accessList, blobs, code, data: data_, factory, factoryData, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;\\n    const account = account_ ? parseAccount(account_) : void 0;\\n    if (code && (factory || factoryData))\\n      throw new BaseError2(\"Cannot provide both `code` & `factory`/`factoryData` as parameters.\");\\n    if (code && to)\\n      throw new BaseError2(\"Cannot provide both `code` & `to` as parameters.\");\\n    const deploylessCallViaBytecode = code && data_;\\n    const deploylessCallViaFactory = factory && factoryData && to && data_;\\n    const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;\\n    const data = (() => {\\n      if (deploylessCallViaBytecode)\\n        return toDeploylessCallViaBytecodeData({\\n          code,\\n          data: data_\\n        });\\n      if (deploylessCallViaFactory)\\n        return toDeploylessCallViaFactoryData({\\n          data: data_,\\n          factory,\\n          factoryData,\\n          to\\n        });\\n      return data_;\\n    })();\\n    try {\\n      assertRequest(args);\\n      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n      const block = blockNumberHex || blockTag;\\n      const rpcStateOverride = serializeStateOverride(stateOverride);\\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format;\\n      const format = chainFormat || formatTransactionRequest;\\n      const request = format({\\n        // Pick out extra data that might exist on the chain\\'s transaction request type.\\n        ...extract(rest, { format: chainFormat }),\\n        from: account?.address,\\n        accessList,\\n        blobs,\\n        data,\\n        gas,\\n        gasPrice,\\n        maxFeePerBlobGas,\\n        maxFeePerGas,\\n        maxPriorityFeePerGas,\\n        nonce,\\n        to: deploylessCall ? void 0 : to,\\n        value\\n      });\\n      if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\\n        try {\\n          return await scheduleMulticall(client, {\\n            ...request,\\n            blockNumber,\\n            blockTag\\n          });\\n        } catch (err) {\\n          if (!(err instanceof ClientChainNotConfiguredError) && !(err instanceof ChainDoesNotSupportContract))\\n            throw err;\\n        }\\n      }\\n      const response = await client.request({\\n        method: \"eth_call\",\\n        params: rpcStateOverride ? [\\n          request,\\n          block,\\n          rpcStateOverride\\n        ] : [request, block]\\n      });\\n      if (response === \"0x\")\\n        return { data: void 0 };\\n      return { data: response };\\n    } catch (err) {\\n      const data2 = getRevertErrorData(err);\\n      const { offchainLookup: offchainLookup2, offchainLookupSignature: offchainLookupSignature2 } = await Promise.resolve().then(() => (init_ccip2(), ccip_exports));\\n      if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature2 && to)\\n        return { data: await offchainLookup2(client, { data: data2, to }) };\\n      if (deploylessCall && data2?.slice(0, 10) === \"0x101bb98d\")\\n        throw new CounterfactualDeploymentFailedError({ factory });\\n      throw getCallError(err, {\\n        ...args,\\n        account,\\n        chain: client.chain\\n      });\\n    }\\n  }\\n  function shouldPerformMulticall({ request }) {\\n    const { data, to, ...request_ } = request;\\n    if (!data)\\n      return false;\\n    if (data.startsWith(aggregate3Signature))\\n      return false;\\n    if (!to)\\n      return false;\\n    if (Object.values(request_).filter((x) => typeof x !== \"undefined\").length > 0)\\n      return false;\\n    return true;\\n  }\\n  async function scheduleMulticall(client, args) {\\n    const { batchSize = 1024, wait: wait2 = 0 } = typeof client.batch?.multicall === \"object\" ? client.batch.multicall : {};\\n    const { blockNumber, blockTag = \"latest\", data, multicallAddress: multicallAddress_, to } = args;\\n    let multicallAddress = multicallAddress_;\\n    if (!multicallAddress) {\\n      if (!client.chain)\\n        throw new ClientChainNotConfiguredError();\\n      multicallAddress = getChainContractAddress({\\n        blockNumber,\\n        chain: client.chain,\\n        contract: \"multicall3\"\\n      });\\n    }\\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n    const block = blockNumberHex || blockTag;\\n    const { schedule } = createBatchScheduler({\\n      id: `${client.uid}.${block}`,\\n      wait: wait2,\\n      shouldSplitBatch(args2) {\\n        const size5 = args2.reduce((size6, { data: data2 }) => size6 + (data2.length - 2), 0);\\n        return size5 > batchSize * 2;\\n      },\\n      fn: async (requests) => {\\n        const calls = requests.map((request) => ({\\n          allowFailure: true,\\n          callData: request.data,\\n          target: request.to\\n        }));\\n        const calldata = encodeFunctionData({\\n          abi: multicall3Abi,\\n          args: [calls],\\n          functionName: \"aggregate3\"\\n        });\\n        const data2 = await client.request({\\n          method: \"eth_call\",\\n          params: [\\n            {\\n              data: calldata,\\n              to: multicallAddress\\n            },\\n            block\\n          ]\\n        });\\n        return decodeFunctionResult({\\n          abi: multicall3Abi,\\n          args: [calls],\\n          functionName: \"aggregate3\",\\n          data: data2 || \"0x\"\\n        });\\n      }\\n    });\\n    const [{ returnData, success }] = await schedule({ data, to });\\n    if (!success)\\n      throw new RawContractError({ data: returnData });\\n    if (returnData === \"0x\")\\n      return { data: void 0 };\\n    return { data: returnData };\\n  }\\n  function toDeploylessCallViaBytecodeData(parameters) {\\n    const { code, data } = parameters;\\n    return encodeDeployData({\\n      abi: parseAbi([\"constructor(bytes, bytes)\"]),\\n      bytecode: deploylessCallViaBytecodeBytecode,\\n      args: [code, data]\\n    });\\n  }\\n  function toDeploylessCallViaFactoryData(parameters) {\\n    const { data, factory, factoryData, to } = parameters;\\n    return encodeDeployData({\\n      abi: parseAbi([\"constructor(address, bytes, address, bytes)\"]),\\n      bytecode: deploylessCallViaFactoryBytecode,\\n      args: [to, data, factory, factoryData]\\n    });\\n  }\\n  function getRevertErrorData(err) {\\n    if (!(err instanceof BaseError2))\\n      return void 0;\\n    const error = err.walk();\\n    return typeof error?.data === \"object\" ? error.data?.data : error.data;\\n  }\\n  var init_call = __esm({\\n    \"../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/call.js\"() {\\n      init_exports();\\n      init_parseAccount();\\n      init_abis();\\n      init_contract2();\\n      init_contracts();\\n      init_base();\\n      init_chain();\\n      init_contract();\\n      init_decodeFunctionResult();\\n      init_encodeDeployData();\\n      init_encodeFunctionData();\\n      init_getChainContractAddress();\\n      init_toHex();\\n      init_getCallError();\\n      init_extract();\\n      init_transactionRequest();\\n      init_createBatchScheduler();\\n      init_stateOverride2();\\n      init_assertRequest();\\n    }\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/getAction.js\\n  function getAction(client, actionFn, name) {\\n    const action_implicit = client[actionFn.name];\\n    if (typeof action_implicit === \"function\")\\n      return action_implicit;\\n    const action_explicit = client[name];\\n    if (typeof action_explicit === \"function\")\\n      return action_explicit;\\n    return (params) => actionFn(client, params);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeEventTopics.js\\n  init_abi();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/log.js\\n  init_base();\\n  var FilterTypeNotSupportedError = class extends BaseError2 {\\n    constructor(type) {\\n      super(`Filter type \"${type}\" is not supported.`, {\\n        name: \"FilterTypeNotSupportedError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/encodeEventTopics.js\\n  init_toBytes();\\n  init_keccak256();\\n  init_toEventSelector();\\n  init_encodeAbiParameters();\\n  init_formatAbiItem2();\\n  init_getAbiItem();\\n  var docsPath = \"/docs/contract/encodeEventTopics\";\\n  function encodeEventTopics(parameters) {\\n    const { abi: abi2, eventName, args } = parameters;\\n    let abiItem = abi2[0];\\n    if (eventName) {\\n      const item = getAbiItem({ abi: abi2, name: eventName });\\n      if (!item)\\n        throw new AbiEventNotFoundError(eventName, { docsPath });\\n      abiItem = item;\\n    }\\n    if (abiItem.type !== \"event\")\\n      throw new AbiEventNotFoundError(void 0, { docsPath });\\n    const definition = formatAbiItem2(abiItem);\\n    const signature = toEventSelector(definition);\\n    let topics = [];\\n    if (args && \"inputs\" in abiItem) {\\n      const indexedInputs = abiItem.inputs?.filter((param) => \"indexed\" in param && param.indexed);\\n      const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];\\n      if (args_.length > 0) {\\n        topics = indexedInputs?.map((param, i) => {\\n          if (Array.isArray(args_[i]))\\n            return args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }));\\n          return typeof args_[i] !== \"undefined\" && args_[i] !== null ? encodeArg({ param, value: args_[i] }) : null;\\n        }) ?? [];\\n      }\\n    }\\n    return [signature, ...topics];\\n  }\\n  function encodeArg({ param, value }) {\\n    if (param.type === \"string\" || param.type === \"bytes\")\\n      return keccak256(toBytes(value));\\n    if (param.type === \"tuple\" || param.type.match(/^(.*)\\\\[(\\\\d+)?\\\\]$/))\\n      throw new FilterTypeNotSupportedError(param.type);\\n    return encodeAbiParameters([param], [value]);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createContractEventFilter.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/filters/createFilterRequestScope.js\\n  function createFilterRequestScope(client, { method }) {\\n    const requestMap = {};\\n    if (client.transport.type === \"fallback\")\\n      client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {\\n        if (status === \"success\" && method === method_)\\n          requestMap[id] = transport.request;\\n      });\\n    return (id) => requestMap[id] || client.request;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createContractEventFilter.js\\n  async function createContractEventFilter(client, parameters) {\\n    const { address, abi: abi2, args, eventName, fromBlock, strict, toBlock } = parameters;\\n    const getRequest = createFilterRequestScope(client, {\\n      method: \"eth_newFilter\"\\n    });\\n    const topics = eventName ? encodeEventTopics({\\n      abi: abi2,\\n      args,\\n      eventName\\n    }) : void 0;\\n    const id = await client.request({\\n      method: \"eth_newFilter\",\\n      params: [\\n        {\\n          address,\\n          fromBlock: typeof fromBlock === \"bigint\" ? numberToHex(fromBlock) : fromBlock,\\n          toBlock: typeof toBlock === \"bigint\" ? numberToHex(toBlock) : toBlock,\\n          topics\\n        }\\n      ]\\n    });\\n    return {\\n      abi: abi2,\\n      args,\\n      eventName,\\n      id,\\n      request: getRequest(id),\\n      strict: Boolean(strict),\\n      type: \"event\"\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateContractGas.js\\n  init_parseAccount();\\n  init_encodeFunctionData();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getContractError.js\\n  init_abi();\\n  init_base();\\n  init_contract();\\n  init_request();\\n  init_rpc();\\n  var EXECUTION_REVERTED_ERROR_CODE = 3;\\n  function getContractError(err, { abi: abi2, address, args, docsPath: docsPath8, functionName, sender }) {\\n    const error = err instanceof RawContractError ? err : err instanceof BaseError2 ? err.walk((err2) => \"data\" in err2) || err.walk() : {};\\n    const { code, data, details, message, shortMessage } = error;\\n    const cause = (() => {\\n      if (err instanceof AbiDecodingZeroDataError)\\n        return new ContractFunctionZeroDataError({ functionName });\\n      if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) && (data || details || message || shortMessage)) {\\n        return new ContractFunctionRevertedError({\\n          abi: abi2,\\n          data: typeof data === \"object\" ? data.data : data,\\n          functionName,\\n          message: error instanceof RpcRequestError ? details : shortMessage ?? message\\n        });\\n      }\\n      return err;\\n    })();\\n    return new ContractFunctionExecutionError(cause, {\\n      abi: abi2,\\n      args,\\n      contractAddress: address,\\n      docsPath: docsPath8,\\n      functionName,\\n      sender\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateGas.js\\n  init_parseAccount();\\n  init_base();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\\n  init_getAddress();\\n  init_keccak256();\\n  function publicKeyToAddress(publicKey) {\\n    const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);\\n    return checksumAddress(`0x${address}`);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\\n  init_isHex();\\n  init_fromHex();\\n  init_toHex();\\n  async function recoverPublicKey({ hash: hash2, signature }) {\\n    const hashHex = isHex(hash2) ? hash2 : toHex(hash2);\\n    const { secp256k1: secp256k12 } = await Promise.resolve().then(() => (init_secp256k1(), secp256k1_exports));\\n    const signature_ = (() => {\\n      if (typeof signature === \"object\" && \"r\" in signature && \"s\" in signature) {\\n        const { r, s, v, yParity } = signature;\\n        const yParityOrV2 = Number(yParity ?? v);\\n        const recoveryBit2 = toRecoveryBit(yParityOrV2);\\n        return new secp256k12.Signature(hexToBigInt(r), hexToBigInt(s)).addRecoveryBit(recoveryBit2);\\n      }\\n      const signatureHex = isHex(signature) ? signature : toHex(signature);\\n      const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);\\n      const recoveryBit = toRecoveryBit(yParityOrV);\\n      return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\\n    })();\\n    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\\n    return `0x${publicKey}`;\\n  }\\n  function toRecoveryBit(yParityOrV) {\\n    if (yParityOrV === 0 || yParityOrV === 1)\\n      return yParityOrV;\\n    if (yParityOrV === 27)\\n      return 0;\\n    if (yParityOrV === 28)\\n      return 1;\\n    throw new Error(\"Invalid yParityOrV value\");\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/recoverAddress.js\\n  async function recoverAddress({ hash: hash2, signature }) {\\n    return publicKeyToAddress(await recoverPublicKey({ hash: hash2, signature }));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/authorization/hashAuthorization.js\\n  init_concat();\\n  init_toBytes();\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/encoding/toRlp.js\\n  init_base();\\n  init_cursor2();\\n  init_toBytes();\\n  init_toHex();\\n  function toRlp(bytes, to = \"hex\") {\\n    const encodable = getEncodable(bytes);\\n    const cursor = createCursor(new Uint8Array(encodable.length));\\n    encodable.encode(cursor);\\n    if (to === \"hex\")\\n      return bytesToHex(cursor.bytes);\\n    return cursor.bytes;\\n  }\\n  function getEncodable(bytes) {\\n    if (Array.isArray(bytes))\\n      return getEncodableList(bytes.map((x) => getEncodable(x)));\\n    return getEncodableBytes(bytes);\\n  }\\n  function getEncodableList(list) {\\n    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);\\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\\n    const length = (() => {\\n      if (bodyLength <= 55)\\n        return 1 + bodyLength;\\n      return 1 + sizeOfBodyLength + bodyLength;\\n    })();\\n    return {\\n      length,\\n      encode(cursor) {\\n        if (bodyLength <= 55) {\\n          cursor.pushByte(192 + bodyLength);\\n        } else {\\n          cursor.pushByte(192 + 55 + sizeOfBodyLength);\\n          if (sizeOfBodyLength === 1)\\n            cursor.pushUint8(bodyLength);\\n          else if (sizeOfBodyLength === 2)\\n            cursor.pushUint16(bodyLength);\\n          else if (sizeOfBodyLength === 3)\\n            cursor.pushUint24(bodyLength);\\n          else\\n            cursor.pushUint32(bodyLength);\\n        }\\n        for (const { encode: encode4 } of list) {\\n          encode4(cursor);\\n        }\\n      }\\n    };\\n  }\\n  function getEncodableBytes(bytesOrHex) {\\n    const bytes = typeof bytesOrHex === \"string\" ? hexToBytes(bytesOrHex) : bytesOrHex;\\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\\n    const length = (() => {\\n      if (bytes.length === 1 && bytes[0] < 128)\\n        return 1;\\n      if (bytes.length <= 55)\\n        return 1 + bytes.length;\\n      return 1 + sizeOfBytesLength + bytes.length;\\n    })();\\n    return {\\n      length,\\n      encode(cursor) {\\n        if (bytes.length === 1 && bytes[0] < 128) {\\n          cursor.pushBytes(bytes);\\n        } else if (bytes.length <= 55) {\\n          cursor.pushByte(128 + bytes.length);\\n          cursor.pushBytes(bytes);\\n        } else {\\n          cursor.pushByte(128 + 55 + sizeOfBytesLength);\\n          if (sizeOfBytesLength === 1)\\n            cursor.pushUint8(bytes.length);\\n          else if (sizeOfBytesLength === 2)\\n            cursor.pushUint16(bytes.length);\\n          else if (sizeOfBytesLength === 3)\\n            cursor.pushUint24(bytes.length);\\n          else\\n            cursor.pushUint32(bytes.length);\\n          cursor.pushBytes(bytes);\\n        }\\n      }\\n    };\\n  }\\n  function getSizeOfLength(length) {\\n    if (length < 2 ** 8)\\n      return 1;\\n    if (length < 2 ** 16)\\n      return 2;\\n    if (length < 2 ** 24)\\n      return 3;\\n    if (length < 2 ** 32)\\n      return 4;\\n    throw new BaseError2(\"Length is too large.\");\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/authorization/hashAuthorization.js\\n  init_keccak256();\\n  function hashAuthorization(parameters) {\\n    const { chainId, nonce, to } = parameters;\\n    const address = parameters.contractAddress ?? parameters.address;\\n    const hash2 = keccak256(concatHex([\\n      \"0x05\",\\n      toRlp([\\n        chainId ? numberToHex(chainId) : \"0x\",\\n        address,\\n        nonce ? numberToHex(nonce) : \"0x\"\\n      ])\\n    ]));\\n    if (to === \"bytes\")\\n      return hexToBytes(hash2);\\n    return hash2;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/authorization/recoverAuthorizationAddress.js\\n  async function recoverAuthorizationAddress(parameters) {\\n    const { authorization, signature } = parameters;\\n    return recoverAddress({\\n      hash: hashAuthorization(authorization),\\n      signature: signature ?? authorization\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateGas.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/estimateGas.js\\n  init_formatEther();\\n  init_formatGwei();\\n  init_base();\\n  init_transaction();\\n  var EstimateGasExecutionError = class extends BaseError2 {\\n    constructor(cause, { account, docsPath: docsPath8, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {\\n      const prettyArgs = prettyPrint({\\n        from: account?.address,\\n        to,\\n        value: typeof value !== \"undefined\" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || \"ETH\"}`,\\n        data,\\n        gas,\\n        gasPrice: typeof gasPrice !== \"undefined\" && `${formatGwei(gasPrice)} gwei`,\\n        maxFeePerGas: typeof maxFeePerGas !== \"undefined\" && `${formatGwei(maxFeePerGas)} gwei`,\\n        maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== \"undefined\" && `${formatGwei(maxPriorityFeePerGas)} gwei`,\\n        nonce\\n      });\\n      super(cause.shortMessage, {\\n        cause,\\n        docsPath: docsPath8,\\n        metaMessages: [\\n          ...cause.metaMessages ? [...cause.metaMessages, \" \"] : [],\\n          \"Estimate Gas Arguments:\",\\n          prettyArgs\\n        ].filter(Boolean),\\n        name: \"EstimateGasExecutionError\"\\n      });\\n      Object.defineProperty(this, \"cause\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      this.cause = cause;\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getEstimateGasError.js\\n  init_node();\\n  init_getNodeError();\\n  function getEstimateGasError(err, { docsPath: docsPath8, ...args }) {\\n    const cause = (() => {\\n      const cause2 = getNodeError(err, args);\\n      if (cause2 instanceof UnknownNodeError)\\n        return err;\\n      return cause2;\\n    })();\\n    return new EstimateGasExecutionError(cause, {\\n      docsPath: docsPath8,\\n      ...args\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateGas.js\\n  init_extract();\\n  init_transactionRequest();\\n  init_stateOverride2();\\n  init_assertRequest();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js\\n  init_parseAccount();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/fee.js\\n  init_formatGwei();\\n  init_base();\\n  var BaseFeeScalarError = class extends BaseError2 {\\n    constructor() {\\n      super(\"`baseFeeMultiplier` must be greater than 1.\", {\\n        name: \"BaseFeeScalarError\"\\n      });\\n    }\\n  };\\n  var Eip1559FeesNotSupportedError = class extends BaseError2 {\\n    constructor() {\\n      super(\"Chain does not support EIP-1559 fees.\", {\\n        name: \"Eip1559FeesNotSupportedError\"\\n      });\\n    }\\n  };\\n  var MaxFeePerGasTooLowError = class extends BaseError2 {\\n    constructor({ maxPriorityFeePerGas }) {\\n      super(`\\\\`maxFeePerGas\\\\` cannot be less than the \\\\`maxPriorityFeePerGas\\\\` (${formatGwei(maxPriorityFeePerGas)} gwei).`, { name: \"MaxFeePerGasTooLowError\" });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js\\n  init_fromHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/block.js\\n  init_base();\\n  var BlockNotFoundError = class extends BaseError2 {\\n    constructor({ blockHash, blockNumber }) {\\n      let identifier = \"Block\";\\n      if (blockHash)\\n        identifier = `Block at hash \"${blockHash}\"`;\\n      if (blockNumber)\\n        identifier = `Block at number \"${blockNumber}\"`;\\n      super(`${identifier} could not be found.`, { name: \"BlockNotFoundError\" });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBlock.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/block.js\\n  init_formatter();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/transaction.js\\n  init_fromHex();\\n  init_formatter();\\n  var transactionType = {\\n    \"0x0\": \"legacy\",\\n    \"0x1\": \"eip2930\",\\n    \"0x2\": \"eip1559\",\\n    \"0x3\": \"eip4844\",\\n    \"0x4\": \"eip7702\"\\n  };\\n  function formatTransaction(transaction) {\\n    const transaction_ = {\\n      ...transaction,\\n      blockHash: transaction.blockHash ? transaction.blockHash : null,\\n      blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,\\n      chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,\\n      gas: transaction.gas ? BigInt(transaction.gas) : void 0,\\n      gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,\\n      maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,\\n      maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,\\n      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,\\n      nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,\\n      to: transaction.to ? transaction.to : null,\\n      transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,\\n      type: transaction.type ? transactionType[transaction.type] : void 0,\\n      typeHex: transaction.type ? transaction.type : void 0,\\n      value: transaction.value ? BigInt(transaction.value) : void 0,\\n      v: transaction.v ? BigInt(transaction.v) : void 0\\n    };\\n    if (transaction.authorizationList)\\n      transaction_.authorizationList = formatAuthorizationList2(transaction.authorizationList);\\n    transaction_.yParity = (() => {\\n      if (transaction.yParity)\\n        return Number(transaction.yParity);\\n      if (typeof transaction_.v === \"bigint\") {\\n        if (transaction_.v === 0n || transaction_.v === 27n)\\n          return 0;\\n        if (transaction_.v === 1n || transaction_.v === 28n)\\n          return 1;\\n        if (transaction_.v >= 35n)\\n          return transaction_.v % 2n === 0n ? 1 : 0;\\n      }\\n      return void 0;\\n    })();\\n    if (transaction_.type === \"legacy\") {\\n      delete transaction_.accessList;\\n      delete transaction_.maxFeePerBlobGas;\\n      delete transaction_.maxFeePerGas;\\n      delete transaction_.maxPriorityFeePerGas;\\n      delete transaction_.yParity;\\n    }\\n    if (transaction_.type === \"eip2930\") {\\n      delete transaction_.maxFeePerBlobGas;\\n      delete transaction_.maxFeePerGas;\\n      delete transaction_.maxPriorityFeePerGas;\\n    }\\n    if (transaction_.type === \"eip1559\") {\\n      delete transaction_.maxFeePerBlobGas;\\n    }\\n    return transaction_;\\n  }\\n  var defineTransaction = /* @__PURE__ */ defineFormatter(\"transaction\", formatTransaction);\\n  function formatAuthorizationList2(authorizationList) {\\n    return authorizationList.map((authorization) => ({\\n      address: authorization.address,\\n      chainId: Number(authorization.chainId),\\n      nonce: Number(authorization.nonce),\\n      r: authorization.r,\\n      s: authorization.s,\\n      yParity: Number(authorization.yParity)\\n    }));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/block.js\\n  function formatBlock(block) {\\n    const transactions = (block.transactions ?? []).map((transaction) => {\\n      if (typeof transaction === \"string\")\\n        return transaction;\\n      return formatTransaction(transaction);\\n    });\\n    return {\\n      ...block,\\n      baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\\n      blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,\\n      difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,\\n      excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,\\n      gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,\\n      gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,\\n      hash: block.hash ? block.hash : null,\\n      logsBloom: block.logsBloom ? block.logsBloom : null,\\n      nonce: block.nonce ? block.nonce : null,\\n      number: block.number ? BigInt(block.number) : null,\\n      size: block.size ? BigInt(block.size) : void 0,\\n      timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,\\n      transactions,\\n      totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null\\n    };\\n  }\\n  var defineBlock = /* @__PURE__ */ defineFormatter(\"block\", formatBlock);\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBlock.js\\n  async function getBlock(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {\\n    const blockTag = blockTag_ ?? \"latest\";\\n    const includeTransactions = includeTransactions_ ?? false;\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    let block = null;\\n    if (blockHash) {\\n      block = await client.request({\\n        method: \"eth_getBlockByHash\",\\n        params: [blockHash, includeTransactions]\\n      }, { dedupe: true });\\n    } else {\\n      block = await client.request({\\n        method: \"eth_getBlockByNumber\",\\n        params: [blockNumberHex || blockTag, includeTransactions]\\n      }, { dedupe: Boolean(blockNumberHex) });\\n    }\\n    if (!block)\\n      throw new BlockNotFoundError({ blockHash, blockNumber });\\n    const format = client.chain?.formatters?.block?.format || formatBlock;\\n    return format(block);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getGasPrice.js\\n  async function getGasPrice(client) {\\n    const gasPrice = await client.request({\\n      method: \"eth_gasPrice\"\\n    });\\n    return BigInt(gasPrice);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js\\n  async function estimateMaxPriorityFeePerGas(client, args) {\\n    return internal_estimateMaxPriorityFeePerGas(client, args);\\n  }\\n  async function internal_estimateMaxPriorityFeePerGas(client, args) {\\n    const { block: block_, chain = client.chain, request } = args || {};\\n    try {\\n      const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;\\n      if (typeof maxPriorityFeePerGas === \"function\") {\\n        const block = block_ || await getAction(client, getBlock, \"getBlock\")({});\\n        const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({\\n          block,\\n          client,\\n          request\\n        });\\n        if (maxPriorityFeePerGas_ === null)\\n          throw new Error();\\n        return maxPriorityFeePerGas_;\\n      }\\n      if (typeof maxPriorityFeePerGas !== \"undefined\")\\n        return maxPriorityFeePerGas;\\n      const maxPriorityFeePerGasHex = await client.request({\\n        method: \"eth_maxPriorityFeePerGas\"\\n      });\\n      return hexToBigInt(maxPriorityFeePerGasHex);\\n    } catch {\\n      const [block, gasPrice] = await Promise.all([\\n        block_ ? Promise.resolve(block_) : getAction(client, getBlock, \"getBlock\")({}),\\n        getAction(client, getGasPrice, \"getGasPrice\")({})\\n      ]);\\n      if (typeof block.baseFeePerGas !== \"bigint\")\\n        throw new Eip1559FeesNotSupportedError();\\n      const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;\\n      if (maxPriorityFeePerGas < 0n)\\n        return 0n;\\n      return maxPriorityFeePerGas;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateFeesPerGas.js\\n  async function estimateFeesPerGas(client, args) {\\n    return internal_estimateFeesPerGas(client, args);\\n  }\\n  async function internal_estimateFeesPerGas(client, args) {\\n    const { block: block_, chain = client.chain, request, type = \"eip1559\" } = args || {};\\n    const baseFeeMultiplier = await (async () => {\\n      if (typeof chain?.fees?.baseFeeMultiplier === \"function\")\\n        return chain.fees.baseFeeMultiplier({\\n          block: block_,\\n          client,\\n          request\\n        });\\n      return chain?.fees?.baseFeeMultiplier ?? 1.2;\\n    })();\\n    if (baseFeeMultiplier < 1)\\n      throw new BaseFeeScalarError();\\n    const decimals = baseFeeMultiplier.toString().split(\".\")[1]?.length ?? 0;\\n    const denominator = 10 ** decimals;\\n    const multiply = (base2) => base2 * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);\\n    const block = block_ ? block_ : await getAction(client, getBlock, \"getBlock\")({});\\n    if (typeof chain?.fees?.estimateFeesPerGas === \"function\") {\\n      const fees = await chain.fees.estimateFeesPerGas({\\n        block: block_,\\n        client,\\n        multiply,\\n        request,\\n        type\\n      });\\n      if (fees !== null)\\n        return fees;\\n    }\\n    if (type === \"eip1559\") {\\n      if (typeof block.baseFeePerGas !== \"bigint\")\\n        throw new Eip1559FeesNotSupportedError();\\n      const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === \"bigint\" ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas(client, {\\n        block,\\n        chain,\\n        request\\n      });\\n      const baseFeePerGas = multiply(block.baseFeePerGas);\\n      const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;\\n      return {\\n        maxFeePerGas,\\n        maxPriorityFeePerGas\\n      };\\n    }\\n    const gasPrice = request?.gasPrice ?? multiply(await getAction(client, getGasPrice, \"getGasPrice\")({}));\\n    return {\\n      gasPrice\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getTransactionCount.js\\n  init_fromHex();\\n  init_toHex();\\n  async function getTransactionCount(client, { address, blockTag = \"latest\", blockNumber }) {\\n    const count = await client.request({\\n      method: \"eth_getTransactionCount\",\\n      params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]\\n    }, { dedupe: Boolean(blockNumber) });\\n    return hexToNumber(count);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/blobsToCommitments.js\\n  init_toBytes();\\n  init_toHex();\\n  function blobsToCommitments(parameters) {\\n    const { kzg } = parameters;\\n    const to = parameters.to ?? (typeof parameters.blobs[0] === \"string\" ? \"hex\" : \"bytes\");\\n    const blobs = typeof parameters.blobs[0] === \"string\" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;\\n    const commitments = [];\\n    for (const blob of blobs)\\n      commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));\\n    return to === \"bytes\" ? commitments : commitments.map((x) => bytesToHex(x));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/blobsToProofs.js\\n  init_toBytes();\\n  init_toHex();\\n  function blobsToProofs(parameters) {\\n    const { kzg } = parameters;\\n    const to = parameters.to ?? (typeof parameters.blobs[0] === \"string\" ? \"hex\" : \"bytes\");\\n    const blobs = typeof parameters.blobs[0] === \"string\" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;\\n    const commitments = typeof parameters.commitments[0] === \"string\" ? parameters.commitments.map((x) => hexToBytes(x)) : parameters.commitments;\\n    const proofs = [];\\n    for (let i = 0; i < blobs.length; i++) {\\n      const blob = blobs[i];\\n      const commitment = commitments[i];\\n      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\\n    }\\n    return to === \"bytes\" ? proofs : proofs.map((x) => bytesToHex(x));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/hash/sha256.js\\n  init_sha256();\\n  init_isHex();\\n  init_toBytes();\\n  init_toHex();\\n  function sha2562(value, to_) {\\n    const to = to_ || \"hex\";\\n    const bytes = sha256(isHex(value, { strict: false }) ? toBytes(value) : value);\\n    if (to === \"bytes\")\\n      return bytes;\\n    return toHex(bytes);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js\\n  function commitmentToVersionedHash(parameters) {\\n    const { commitment, version: version4 = 1 } = parameters;\\n    const to = parameters.to ?? (typeof commitment === \"string\" ? \"hex\" : \"bytes\");\\n    const versionedHash = sha2562(commitment, \"bytes\");\\n    versionedHash.set([version4], 0);\\n    return to === \"bytes\" ? versionedHash : bytesToHex(versionedHash);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js\\n  function commitmentsToVersionedHashes(parameters) {\\n    const { commitments, version: version4 } = parameters;\\n    const to = parameters.to ?? (typeof commitments[0] === \"string\" ? \"hex\" : \"bytes\");\\n    const hashes = [];\\n    for (const commitment of commitments) {\\n      hashes.push(commitmentToVersionedHash({\\n        commitment,\\n        to,\\n        version: version4\\n      }));\\n    }\\n    return hashes;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/blob.js\\n  var blobsPerTransaction = 6;\\n  var bytesPerFieldElement = 32;\\n  var fieldElementsPerBlob = 4096;\\n  var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;\\n  var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).\\n  1 - // zero byte (0x00) appended to each field element.\\n  1 * fieldElementsPerBlob * blobsPerTransaction;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/kzg.js\\n  var versionedHashVersionKzg = 1;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/blob.js\\n  init_base();\\n  var BlobSizeTooLargeError = class extends BaseError2 {\\n    constructor({ maxSize, size: size5 }) {\\n      super(\"Blob size is too large.\", {\\n        metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size5} bytes`],\\n        name: \"BlobSizeTooLargeError\"\\n      });\\n    }\\n  };\\n  var EmptyBlobError = class extends BaseError2 {\\n    constructor() {\\n      super(\"Blob data must not be empty.\", { name: \"EmptyBlobError\" });\\n    }\\n  };\\n  var InvalidVersionedHashSizeError = class extends BaseError2 {\\n    constructor({ hash: hash2, size: size5 }) {\\n      super(`Versioned hash \"${hash2}\" size is invalid.`, {\\n        metaMessages: [\"Expected: 32\", `Received: ${size5}`],\\n        name: \"InvalidVersionedHashSizeError\"\\n      });\\n    }\\n  };\\n  var InvalidVersionedHashVersionError = class extends BaseError2 {\\n    constructor({ hash: hash2, version: version4 }) {\\n      super(`Versioned hash \"${hash2}\" version is invalid.`, {\\n        metaMessages: [\\n          `Expected: ${versionedHashVersionKzg}`,\\n          `Received: ${version4}`\\n        ],\\n        name: \"InvalidVersionedHashVersionError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/toBlobs.js\\n  init_cursor2();\\n  init_size();\\n  init_toBytes();\\n  init_toHex();\\n  function toBlobs(parameters) {\\n    const to = parameters.to ?? (typeof parameters.data === \"string\" ? \"hex\" : \"bytes\");\\n    const data = typeof parameters.data === \"string\" ? hexToBytes(parameters.data) : parameters.data;\\n    const size_ = size(data);\\n    if (!size_)\\n      throw new EmptyBlobError();\\n    if (size_ > maxBytesPerTransaction)\\n      throw new BlobSizeTooLargeError({\\n        maxSize: maxBytesPerTransaction,\\n        size: size_\\n      });\\n    const blobs = [];\\n    let active = true;\\n    let position = 0;\\n    while (active) {\\n      const blob = createCursor(new Uint8Array(bytesPerBlob));\\n      let size5 = 0;\\n      while (size5 < fieldElementsPerBlob) {\\n        const bytes = data.slice(position, position + (bytesPerFieldElement - 1));\\n        blob.pushByte(0);\\n        blob.pushBytes(bytes);\\n        if (bytes.length < 31) {\\n          blob.pushByte(128);\\n          active = false;\\n          break;\\n        }\\n        size5++;\\n        position += 31;\\n      }\\n      blobs.push(blob);\\n    }\\n    return to === \"bytes\" ? blobs.map((x) => x.bytes) : blobs.map((x) => bytesToHex(x.bytes));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/blob/toBlobSidecars.js\\n  function toBlobSidecars(parameters) {\\n    const { data, kzg, to } = parameters;\\n    const blobs = parameters.blobs ?? toBlobs({ data, to });\\n    const commitments = parameters.commitments ?? blobsToCommitments({ blobs, kzg, to });\\n    const proofs = parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg, to });\\n    const sidecars = [];\\n    for (let i = 0; i < blobs.length; i++)\\n      sidecars.push({\\n        blob: blobs[i],\\n        commitment: commitments[i],\\n        proof: proofs[i]\\n      });\\n    return sidecars;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js\\n  init_assertRequest();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/getTransactionType.js\\n  init_transaction();\\n  function getTransactionType(transaction) {\\n    if (transaction.type)\\n      return transaction.type;\\n    if (typeof transaction.authorizationList !== \"undefined\")\\n      return \"eip7702\";\\n    if (typeof transaction.blobs !== \"undefined\" || typeof transaction.blobVersionedHashes !== \"undefined\" || typeof transaction.maxFeePerBlobGas !== \"undefined\" || typeof transaction.sidecars !== \"undefined\")\\n      return \"eip4844\";\\n    if (typeof transaction.maxFeePerGas !== \"undefined\" || typeof transaction.maxPriorityFeePerGas !== \"undefined\") {\\n      return \"eip1559\";\\n    }\\n    if (typeof transaction.gasPrice !== \"undefined\") {\\n      if (typeof transaction.accessList !== \"undefined\")\\n        return \"eip2930\";\\n      return \"legacy\";\\n    }\\n    throw new InvalidSerializableTransactionError({ transaction });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getChainId.js\\n  init_fromHex();\\n  async function getChainId(client) {\\n    const chainIdHex = await client.request({\\n      method: \"eth_chainId\"\\n    }, { dedupe: true });\\n    return hexToNumber(chainIdHex);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js\\n  var defaultParameters = [\\n    \"blobVersionedHashes\",\\n    \"chainId\",\\n    \"fees\",\\n    \"gas\",\\n    \"nonce\",\\n    \"type\"\\n  ];\\n  var eip1559NetworkCache = /* @__PURE__ */ new Map();\\n  async function prepareTransactionRequest(client, args) {\\n    const { account: account_ = client.account, blobs, chain, gas, kzg, nonce, nonceManager, parameters = defaultParameters, type } = args;\\n    const account = account_ ? parseAccount(account_) : account_;\\n    const request = { ...args, ...account ? { from: account?.address } : {} };\\n    let block;\\n    async function getBlock2() {\\n      if (block)\\n        return block;\\n      block = await getAction(client, getBlock, \"getBlock\")({ blockTag: \"latest\" });\\n      return block;\\n    }\\n    let chainId;\\n    async function getChainId2() {\\n      if (chainId)\\n        return chainId;\\n      if (chain)\\n        return chain.id;\\n      if (typeof args.chainId !== \"undefined\")\\n        return args.chainId;\\n      const chainId_ = await getAction(client, getChainId, \"getChainId\")({});\\n      chainId = chainId_;\\n      return chainId;\\n    }\\n    if (parameters.includes(\"nonce\") && typeof nonce === \"undefined\" && account) {\\n      if (nonceManager) {\\n        const chainId2 = await getChainId2();\\n        request.nonce = await nonceManager.consume({\\n          address: account.address,\\n          chainId: chainId2,\\n          client\\n        });\\n      } else {\\n        request.nonce = await getAction(client, getTransactionCount, \"getTransactionCount\")({\\n          address: account.address,\\n          blockTag: \"pending\"\\n        });\\n      }\\n    }\\n    if ((parameters.includes(\"blobVersionedHashes\") || parameters.includes(\"sidecars\")) && blobs && kzg) {\\n      const commitments = blobsToCommitments({ blobs, kzg });\\n      if (parameters.includes(\"blobVersionedHashes\")) {\\n        const versionedHashes = commitmentsToVersionedHashes({\\n          commitments,\\n          to: \"hex\"\\n        });\\n        request.blobVersionedHashes = versionedHashes;\\n      }\\n      if (parameters.includes(\"sidecars\")) {\\n        const proofs = blobsToProofs({ blobs, commitments, kzg });\\n        const sidecars = toBlobSidecars({\\n          blobs,\\n          commitments,\\n          proofs,\\n          to: \"hex\"\\n        });\\n        request.sidecars = sidecars;\\n      }\\n    }\\n    if (parameters.includes(\"chainId\"))\\n      request.chainId = await getChainId2();\\n    if ((parameters.includes(\"fees\") || parameters.includes(\"type\")) && typeof type === \"undefined\") {\\n      try {\\n        request.type = getTransactionType(request);\\n      } catch {\\n        let isEip1559Network = eip1559NetworkCache.get(client.uid);\\n        if (typeof isEip1559Network === \"undefined\") {\\n          const block2 = await getBlock2();\\n          isEip1559Network = typeof block2?.baseFeePerGas === \"bigint\";\\n          eip1559NetworkCache.set(client.uid, isEip1559Network);\\n        }\\n        request.type = isEip1559Network ? \"eip1559\" : \"legacy\";\\n      }\\n    }\\n    if (parameters.includes(\"fees\")) {\\n      if (request.type !== \"legacy\" && request.type !== \"eip2930\") {\\n        if (typeof request.maxFeePerGas === \"undefined\" || typeof request.maxPriorityFeePerGas === \"undefined\") {\\n          const block2 = await getBlock2();\\n          const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas(client, {\\n            block: block2,\\n            chain,\\n            request\\n          });\\n          if (typeof args.maxPriorityFeePerGas === \"undefined\" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)\\n            throw new MaxFeePerGasTooLowError({\\n              maxPriorityFeePerGas\\n            });\\n          request.maxPriorityFeePerGas = maxPriorityFeePerGas;\\n          request.maxFeePerGas = maxFeePerGas;\\n        }\\n      } else {\\n        if (typeof args.maxFeePerGas !== \"undefined\" || typeof args.maxPriorityFeePerGas !== \"undefined\")\\n          throw new Eip1559FeesNotSupportedError();\\n        if (typeof args.gasPrice === \"undefined\") {\\n          const block2 = await getBlock2();\\n          const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {\\n            block: block2,\\n            chain,\\n            request,\\n            type: \"legacy\"\\n          });\\n          request.gasPrice = gasPrice_;\\n        }\\n      }\\n    }\\n    if (parameters.includes(\"gas\") && typeof gas === \"undefined\")\\n      request.gas = await getAction(client, estimateGas, \"estimateGas\")({\\n        ...request,\\n        account: account ? { address: account.address, type: \"json-rpc\" } : account\\n      });\\n    assertRequest(request);\\n    delete request.parameters;\\n    return request;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBalance.js\\n  init_toHex();\\n  async function getBalance(client, { address, blockNumber, blockTag = \"latest\" }) {\\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n    const balance = await client.request({\\n      method: \"eth_getBalance\",\\n      params: [address, blockNumberHex || blockTag]\\n    });\\n    return BigInt(balance);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateGas.js\\n  async function estimateGas(client, args) {\\n    const { account: account_ = client.account } = args;\\n    const account = account_ ? parseAccount(account_) : void 0;\\n    try {\\n      let estimateGas_rpc = function(parameters) {\\n        const { block: block2, request: request2, rpcStateOverride: rpcStateOverride2 } = parameters;\\n        return client.request({\\n          method: \"eth_estimateGas\",\\n          params: rpcStateOverride2 ? [request2, block2 ?? \"latest\", rpcStateOverride2] : block2 ? [request2, block2] : [request2]\\n        });\\n      };\\n      const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = await prepareTransactionRequest(client, {\\n        ...args,\\n        parameters: (\\n          // Some RPC Providers do not compute versioned hashes from blobs. We will need\\n          // to compute them.\\n          account?.type === \"local\" ? void 0 : [\"blobVersionedHashes\"]\\n        )\\n      });\\n      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n      const block = blockNumberHex || blockTag;\\n      const rpcStateOverride = serializeStateOverride(stateOverride);\\n      const to = await (async () => {\\n        if (rest.to)\\n          return rest.to;\\n        if (authorizationList && authorizationList.length > 0)\\n          return await recoverAuthorizationAddress({\\n            authorization: authorizationList[0]\\n          }).catch(() => {\\n            throw new BaseError2(\"`to` is required. Could not infer from `authorizationList`\");\\n          });\\n        return void 0;\\n      })();\\n      assertRequest(args);\\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format;\\n      const format = chainFormat || formatTransactionRequest;\\n      const request = format({\\n        // Pick out extra data that might exist on the chain\\'s transaction request type.\\n        ...extract(rest, { format: chainFormat }),\\n        from: account?.address,\\n        accessList,\\n        authorizationList,\\n        blobs,\\n        blobVersionedHashes,\\n        data,\\n        gas,\\n        gasPrice,\\n        maxFeePerBlobGas,\\n        maxFeePerGas,\\n        maxPriorityFeePerGas,\\n        nonce,\\n        to,\\n        value\\n      });\\n      let estimate = BigInt(await estimateGas_rpc({ block, request, rpcStateOverride }));\\n      if (authorizationList) {\\n        const value2 = await getBalance(client, { address: request.from });\\n        const estimates = await Promise.all(authorizationList.map(async (authorization) => {\\n          const { address } = authorization;\\n          const estimate2 = await estimateGas_rpc({\\n            block,\\n            request: {\\n              authorizationList: void 0,\\n              data,\\n              from: account?.address,\\n              to: address,\\n              value: numberToHex(value2)\\n            },\\n            rpcStateOverride\\n          }).catch(() => 100000n);\\n          return 2n * BigInt(estimate2);\\n        }));\\n        estimate += estimates.reduce((acc, curr) => acc + curr, 0n);\\n      }\\n      return estimate;\\n    } catch (err) {\\n      throw getEstimateGasError(err, {\\n        ...args,\\n        account,\\n        chain: client.chain\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/estimateContractGas.js\\n  async function estimateContractGas(client, parameters) {\\n    const { abi: abi2, address, args, functionName, dataSuffix, ...request } = parameters;\\n    const data = encodeFunctionData({\\n      abi: abi2,\\n      args,\\n      functionName\\n    });\\n    try {\\n      const gas = await getAction(client, estimateGas, \"estimateGas\")({\\n        data: `${data}${dataSuffix ? dataSuffix.replace(\"0x\", \"\") : \"\"}`,\\n        to: address,\\n        ...request\\n      });\\n      return gas;\\n    } catch (error) {\\n      const account = request.account ? parseAccount(request.account) : void 0;\\n      throw getContractError(error, {\\n        abi: abi2,\\n        address,\\n        args,\\n        docsPath: \"/docs/contract/estimateContractGas\",\\n        functionName,\\n        sender: account?.address\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getContractEvents.js\\n  init_getAbiItem();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/parseEventLogs.js\\n  init_abi();\\n  init_isAddressEqual();\\n  init_toBytes();\\n  init_keccak256();\\n  init_toEventSelector();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/decodeEventLog.js\\n  init_abi();\\n  init_size();\\n  init_toEventSelector();\\n  init_cursor();\\n  init_decodeAbiParameters();\\n  init_formatAbiItem2();\\n  var docsPath3 = \"/docs/contract/decodeEventLog\";\\n  function decodeEventLog(parameters) {\\n    const { abi: abi2, data, strict: strict_, topics } = parameters;\\n    const strict = strict_ ?? true;\\n    const [signature, ...argTopics] = topics;\\n    if (!signature)\\n      throw new AbiEventSignatureEmptyTopicsError({ docsPath: docsPath3 });\\n    const abiItem = (() => {\\n      if (abi2.length === 1)\\n        return abi2[0];\\n      return abi2.find((x) => x.type === \"event\" && signature === toEventSelector(formatAbiItem2(x)));\\n    })();\\n    if (!(abiItem && \"name\" in abiItem) || abiItem.type !== \"event\")\\n      throw new AbiEventSignatureNotFoundError(signature, { docsPath: docsPath3 });\\n    const { name, inputs } = abiItem;\\n    const isUnnamed = inputs?.some((x) => !(\"name\" in x && x.name));\\n    let args = isUnnamed ? [] : {};\\n    const indexedInputs = inputs.filter((x) => \"indexed\" in x && x.indexed);\\n    for (let i = 0; i < indexedInputs.length; i++) {\\n      const param = indexedInputs[i];\\n      const topic = argTopics[i];\\n      if (!topic)\\n        throw new DecodeLogTopicsMismatch({\\n          abiItem,\\n          param\\n        });\\n      args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic });\\n    }\\n    const nonIndexedInputs = inputs.filter((x) => !(\"indexed\" in x && x.indexed));\\n    if (nonIndexedInputs.length > 0) {\\n      if (data && data !== \"0x\") {\\n        try {\\n          const decodedData = decodeAbiParameters(nonIndexedInputs, data);\\n          if (decodedData) {\\n            if (isUnnamed)\\n              args = [...args, ...decodedData];\\n            else {\\n              for (let i = 0; i < nonIndexedInputs.length; i++) {\\n                args[nonIndexedInputs[i].name] = decodedData[i];\\n              }\\n            }\\n          }\\n        } catch (err) {\\n          if (strict) {\\n            if (err instanceof AbiDecodingDataSizeTooSmallError || err instanceof PositionOutOfBoundsError)\\n              throw new DecodeLogDataMismatch({\\n                abiItem,\\n                data,\\n                params: nonIndexedInputs,\\n                size: size(data)\\n              });\\n            throw err;\\n          }\\n        }\\n      } else if (strict) {\\n        throw new DecodeLogDataMismatch({\\n          abiItem,\\n          data: \"0x\",\\n          params: nonIndexedInputs,\\n          size: 0\\n        });\\n      }\\n    }\\n    return {\\n      eventName: name,\\n      args: Object.values(args).length > 0 ? args : void 0\\n    };\\n  }\\n  function decodeTopic({ param, value }) {\\n    if (param.type === \"string\" || param.type === \"bytes\" || param.type === \"tuple\" || param.type.match(/^(.*)\\\\[(\\\\d+)?\\\\]$/))\\n      return value;\\n    const decodedArg = decodeAbiParameters([param], value) || [];\\n    return decodedArg[0];\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/abi/parseEventLogs.js\\n  function parseEventLogs(parameters) {\\n    const { abi: abi2, args, logs, strict = true } = parameters;\\n    const eventName = (() => {\\n      if (!parameters.eventName)\\n        return void 0;\\n      if (Array.isArray(parameters.eventName))\\n        return parameters.eventName;\\n      return [parameters.eventName];\\n    })();\\n    return logs.map((log) => {\\n      try {\\n        const abiItem = abi2.find((abiItem2) => abiItem2.type === \"event\" && log.topics[0] === toEventSelector(abiItem2));\\n        if (!abiItem)\\n          return null;\\n        const event = decodeEventLog({\\n          ...log,\\n          abi: [abiItem],\\n          strict\\n        });\\n        if (eventName && !eventName.includes(event.eventName))\\n          return null;\\n        if (!includesArgs({\\n          args: event.args,\\n          inputs: abiItem.inputs,\\n          matchArgs: args\\n        }))\\n          return null;\\n        return { ...event, ...log };\\n      } catch (err) {\\n        let eventName2;\\n        let isUnnamed;\\n        if (err instanceof AbiEventSignatureNotFoundError)\\n          return null;\\n        if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\\n          if (strict)\\n            return null;\\n          eventName2 = err.abiItem.name;\\n          isUnnamed = err.abiItem.inputs?.some((x) => !(\"name\" in x && x.name));\\n        }\\n        return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };\\n      }\\n    }).filter(Boolean);\\n  }\\n  function includesArgs(parameters) {\\n    const { args, inputs, matchArgs } = parameters;\\n    if (!matchArgs)\\n      return true;\\n    if (!args)\\n      return false;\\n    function isEqual(input, value, arg) {\\n      try {\\n        if (input.type === \"address\")\\n          return isAddressEqual(value, arg);\\n        if (input.type === \"string\" || input.type === \"bytes\")\\n          return keccak256(toBytes(value)) === arg;\\n        return value === arg;\\n      } catch {\\n        return false;\\n      }\\n    }\\n    if (Array.isArray(args) && Array.isArray(matchArgs)) {\\n      return matchArgs.every((value, index2) => {\\n        if (value === null || value === void 0)\\n          return true;\\n        const input = inputs[index2];\\n        if (!input)\\n          return false;\\n        const value_ = Array.isArray(value) ? value : [value];\\n        return value_.some((value2) => isEqual(input, value2, args[index2]));\\n      });\\n    }\\n    if (typeof args === \"object\" && !Array.isArray(args) && typeof matchArgs === \"object\" && !Array.isArray(matchArgs))\\n      return Object.entries(matchArgs).every(([key, value]) => {\\n        if (value === null || value === void 0)\\n          return true;\\n        const input = inputs.find((input2) => input2.name === key);\\n        if (!input)\\n          return false;\\n        const value_ = Array.isArray(value) ? value : [value];\\n        return value_.some((value2) => isEqual(input, value2, args[key]));\\n      });\\n    return false;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getLogs.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/log.js\\n  function formatLog(log, { args, eventName } = {}) {\\n    return {\\n      ...log,\\n      blockHash: log.blockHash ? log.blockHash : null,\\n      blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\\n      logIndex: log.logIndex ? Number(log.logIndex) : null,\\n      transactionHash: log.transactionHash ? log.transactionHash : null,\\n      transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,\\n      ...eventName ? { args, eventName } : {}\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getLogs.js\\n  async function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {\\n    const strict = strict_ ?? false;\\n    const events = events_ ?? (event ? [event] : void 0);\\n    let topics = [];\\n    if (events) {\\n      const encoded = events.flatMap((event2) => encodeEventTopics({\\n        abi: [event2],\\n        eventName: event2.name,\\n        args: events_ ? void 0 : args\\n      }));\\n      topics = [encoded];\\n      if (event)\\n        topics = topics[0];\\n    }\\n    let logs;\\n    if (blockHash) {\\n      logs = await client.request({\\n        method: \"eth_getLogs\",\\n        params: [{ address, topics, blockHash }]\\n      });\\n    } else {\\n      logs = await client.request({\\n        method: \"eth_getLogs\",\\n        params: [\\n          {\\n            address,\\n            topics,\\n            fromBlock: typeof fromBlock === \"bigint\" ? numberToHex(fromBlock) : fromBlock,\\n            toBlock: typeof toBlock === \"bigint\" ? numberToHex(toBlock) : toBlock\\n          }\\n        ]\\n      });\\n    }\\n    const formattedLogs = logs.map((log) => formatLog(log));\\n    if (!events)\\n      return formattedLogs;\\n    return parseEventLogs({\\n      abi: events,\\n      args,\\n      logs: formattedLogs,\\n      strict\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getContractEvents.js\\n  async function getContractEvents(client, parameters) {\\n    const { abi: abi2, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;\\n    const event = eventName ? getAbiItem({ abi: abi2, name: eventName }) : void 0;\\n    const events = !event ? abi2.filter((x) => x.type === \"event\") : void 0;\\n    return getAction(client, getLogs, \"getLogs\")({\\n      address,\\n      args,\\n      blockHash,\\n      event,\\n      events,\\n      fromBlock,\\n      toBlock,\\n      strict\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/readContract.js\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_call();\\n  async function readContract(client, parameters) {\\n    const { abi: abi2, address, args, functionName, ...rest } = parameters;\\n    const calldata = encodeFunctionData({\\n      abi: abi2,\\n      args,\\n      functionName\\n    });\\n    try {\\n      const { data } = await getAction(client, call, \"call\")({\\n        ...rest,\\n        data: calldata,\\n        to: address\\n      });\\n      return decodeFunctionResult({\\n        abi: abi2,\\n        args,\\n        functionName,\\n        data: data || \"0x\"\\n      });\\n    } catch (error) {\\n      throw getContractError(error, {\\n        abi: abi2,\\n        address,\\n        args,\\n        docsPath: \"/docs/contract/readContract\",\\n        functionName\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/simulateContract.js\\n  init_parseAccount();\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_call();\\n  async function simulateContract(client, parameters) {\\n    const { abi: abi2, address, args, dataSuffix, functionName, ...callRequest } = parameters;\\n    const account = callRequest.account ? parseAccount(callRequest.account) : client.account;\\n    const calldata = encodeFunctionData({ abi: abi2, args, functionName });\\n    try {\\n      const { data } = await getAction(client, call, \"call\")({\\n        batch: false,\\n        data: `${calldata}${dataSuffix ? dataSuffix.replace(\"0x\", \"\") : \"\"}`,\\n        to: address,\\n        ...callRequest,\\n        account\\n      });\\n      const result = decodeFunctionResult({\\n        abi: abi2,\\n        args,\\n        functionName,\\n        data: data || \"0x\"\\n      });\\n      const minimizedAbi = abi2.filter((abiItem) => \"name\" in abiItem && abiItem.name === parameters.functionName);\\n      return {\\n        result,\\n        request: {\\n          abi: minimizedAbi,\\n          address,\\n          args,\\n          dataSuffix,\\n          functionName,\\n          ...callRequest,\\n          account\\n        }\\n      };\\n    } catch (error) {\\n      throw getContractError(error, {\\n        abi: abi2,\\n        address,\\n        args,\\n        docsPath: \"/docs/contract/simulateContract\",\\n        functionName,\\n        sender: account?.address\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchContractEvent.js\\n  init_abi();\\n  init_rpc();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/observe.js\\n  var listenersCache = /* @__PURE__ */ new Map();\\n  var cleanupCache = /* @__PURE__ */ new Map();\\n  var callbackCount = 0;\\n  function observe(observerId, callbacks, fn) {\\n    const callbackId = ++callbackCount;\\n    const getListeners = () => listenersCache.get(observerId) || [];\\n    const unsubscribe = () => {\\n      const listeners2 = getListeners();\\n      listenersCache.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));\\n    };\\n    const unwatch = () => {\\n      const listeners2 = getListeners();\\n      if (!listeners2.some((cb) => cb.id === callbackId))\\n        return;\\n      const cleanup2 = cleanupCache.get(observerId);\\n      if (listeners2.length === 1 && cleanup2)\\n        cleanup2();\\n      unsubscribe();\\n    };\\n    const listeners = getListeners();\\n    listenersCache.set(observerId, [\\n      ...listeners,\\n      { id: callbackId, fns: callbacks }\\n    ]);\\n    if (listeners && listeners.length > 0)\\n      return unwatch;\\n    const emit = {};\\n    for (const key in callbacks) {\\n      emit[key] = (...args) => {\\n        const listeners2 = getListeners();\\n        if (listeners2.length === 0)\\n          return;\\n        for (const listener of listeners2)\\n          listener.fns[key]?.(...args);\\n      };\\n    }\\n    const cleanup = fn(emit);\\n    if (typeof cleanup === \"function\")\\n      cleanupCache.set(observerId, cleanup);\\n    return unwatch;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/wait.js\\n  async function wait(time) {\\n    return new Promise((res) => setTimeout(res, time));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/poll.js\\n  function poll(fn, { emitOnBegin, initialWaitTime, interval }) {\\n    let active = true;\\n    const unwatch = () => active = false;\\n    const watch = async () => {\\n      let data = void 0;\\n      if (emitOnBegin)\\n        data = await fn({ unpoll: unwatch });\\n      const initialWait = await initialWaitTime?.(data) ?? interval;\\n      await wait(initialWait);\\n      const poll2 = async () => {\\n        if (!active)\\n          return;\\n        await fn({ unpoll: unwatch });\\n        await wait(interval);\\n        poll2();\\n      };\\n      poll2();\\n    };\\n    watch();\\n    return unwatch;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchContractEvent.js\\n  init_stringify();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withCache.js\\n  var promiseCache = /* @__PURE__ */ new Map();\\n  var responseCache = /* @__PURE__ */ new Map();\\n  function getCache(cacheKey2) {\\n    const buildCache = (cacheKey3, cache) => ({\\n      clear: () => cache.delete(cacheKey3),\\n      get: () => cache.get(cacheKey3),\\n      set: (data) => cache.set(cacheKey3, data)\\n    });\\n    const promise = buildCache(cacheKey2, promiseCache);\\n    const response = buildCache(cacheKey2, responseCache);\\n    return {\\n      clear: () => {\\n        promise.clear();\\n        response.clear();\\n      },\\n      promise,\\n      response\\n    };\\n  }\\n  async function withCache(fn, { cacheKey: cacheKey2, cacheTime = Number.POSITIVE_INFINITY }) {\\n    const cache = getCache(cacheKey2);\\n    const response = cache.response.get();\\n    if (response && cacheTime > 0) {\\n      const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();\\n      if (age < cacheTime)\\n        return response.data;\\n    }\\n    let promise = cache.promise.get();\\n    if (!promise) {\\n      promise = fn();\\n      cache.promise.set(promise);\\n    }\\n    try {\\n      const data = await promise;\\n      cache.response.set({ created: /* @__PURE__ */ new Date(), data });\\n      return data;\\n    } finally {\\n      cache.promise.clear();\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBlockNumber.js\\n  var cacheKey = (id) => `blockNumber.${id}`;\\n  async function getBlockNumber(client, { cacheTime = client.cacheTime } = {}) {\\n    const blockNumberHex = await withCache(() => client.request({\\n      method: \"eth_blockNumber\"\\n    }), { cacheKey: cacheKey(client.uid), cacheTime });\\n    return BigInt(blockNumberHex);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getFilterChanges.js\\n  async function getFilterChanges(_client, { filter }) {\\n    const strict = \"strict\" in filter && filter.strict;\\n    const logs = await filter.request({\\n      method: \"eth_getFilterChanges\",\\n      params: [filter.id]\\n    });\\n    if (typeof logs[0] === \"string\")\\n      return logs;\\n    const formattedLogs = logs.map((log) => formatLog(log));\\n    if (!(\"abi\" in filter) || !filter.abi)\\n      return formattedLogs;\\n    return parseEventLogs({\\n      abi: filter.abi,\\n      logs: formattedLogs,\\n      strict\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/uninstallFilter.js\\n  async function uninstallFilter(_client, { filter }) {\\n    return filter.request({\\n      method: \"eth_uninstallFilter\",\\n      params: [filter.id]\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchContractEvent.js\\n  function watchContractEvent(client, parameters) {\\n    const { abi: abi2, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;\\n    const enablePolling = (() => {\\n      if (typeof poll_ !== \"undefined\")\\n        return poll_;\\n      if (typeof fromBlock === \"bigint\")\\n        return true;\\n      if (client.transport.type === \"webSocket\")\\n        return false;\\n      if (client.transport.type === \"fallback\" && client.transport.transports[0].config.type === \"webSocket\")\\n        return false;\\n      return true;\\n    })();\\n    const pollContractEvent = () => {\\n      const strict = strict_ ?? false;\\n      const observerId = stringify([\\n        \"watchContractEvent\",\\n        address,\\n        args,\\n        batch,\\n        client.uid,\\n        eventName,\\n        pollingInterval,\\n        strict,\\n        fromBlock\\n      ]);\\n      return observe(observerId, { onLogs, onError }, (emit) => {\\n        let previousBlockNumber;\\n        if (fromBlock !== void 0)\\n          previousBlockNumber = fromBlock - 1n;\\n        let filter;\\n        let initialized = false;\\n        const unwatch = poll(async () => {\\n          if (!initialized) {\\n            try {\\n              filter = await getAction(client, createContractEventFilter, \"createContractEventFilter\")({\\n                abi: abi2,\\n                address,\\n                args,\\n                eventName,\\n                strict,\\n                fromBlock\\n              });\\n            } catch {\\n            }\\n            initialized = true;\\n            return;\\n          }\\n          try {\\n            let logs;\\n            if (filter) {\\n              logs = await getAction(client, getFilterChanges, \"getFilterChanges\")({ filter });\\n            } else {\\n              const blockNumber = await getAction(client, getBlockNumber, \"getBlockNumber\")({});\\n              if (previousBlockNumber && previousBlockNumber < blockNumber) {\\n                logs = await getAction(client, getContractEvents, \"getContractEvents\")({\\n                  abi: abi2,\\n                  address,\\n                  args,\\n                  eventName,\\n                  fromBlock: previousBlockNumber + 1n,\\n                  toBlock: blockNumber,\\n                  strict\\n                });\\n              } else {\\n                logs = [];\\n              }\\n              previousBlockNumber = blockNumber;\\n            }\\n            if (logs.length === 0)\\n              return;\\n            if (batch)\\n              emit.onLogs(logs);\\n            else\\n              for (const log of logs)\\n                emit.onLogs([log]);\\n          } catch (err) {\\n            if (filter && err instanceof InvalidInputRpcError)\\n              initialized = false;\\n            emit.onError?.(err);\\n          }\\n        }, {\\n          emitOnBegin: true,\\n          interval: pollingInterval\\n        });\\n        return async () => {\\n          if (filter)\\n            await getAction(client, uninstallFilter, \"uninstallFilter\")({ filter });\\n          unwatch();\\n        };\\n      });\\n    };\\n    const subscribeContractEvent = () => {\\n      const strict = strict_ ?? false;\\n      const observerId = stringify([\\n        \"watchContractEvent\",\\n        address,\\n        args,\\n        batch,\\n        client.uid,\\n        eventName,\\n        pollingInterval,\\n        strict\\n      ]);\\n      let active = true;\\n      let unsubscribe = () => active = false;\\n      return observe(observerId, { onLogs, onError }, (emit) => {\\n        ;\\n        (async () => {\\n          try {\\n            const transport = (() => {\\n              if (client.transport.type === \"fallback\") {\\n                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === \"webSocket\");\\n                if (!transport2)\\n                  return client.transport;\\n                return transport2.value;\\n              }\\n              return client.transport;\\n            })();\\n            const topics = eventName ? encodeEventTopics({\\n              abi: abi2,\\n              eventName,\\n              args\\n            }) : [];\\n            const { unsubscribe: unsubscribe_ } = await transport.subscribe({\\n              params: [\"logs\", { address, topics }],\\n              onData(data) {\\n                if (!active)\\n                  return;\\n                const log = data.result;\\n                try {\\n                  const { eventName: eventName2, args: args2 } = decodeEventLog({\\n                    abi: abi2,\\n                    data: log.data,\\n                    topics: log.topics,\\n                    strict: strict_\\n                  });\\n                  const formatted = formatLog(log, {\\n                    args: args2,\\n                    eventName: eventName2\\n                  });\\n                  emit.onLogs([formatted]);\\n                } catch (err) {\\n                  let eventName2;\\n                  let isUnnamed;\\n                  if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\\n                    if (strict_)\\n                      return;\\n                    eventName2 = err.abiItem.name;\\n                    isUnnamed = err.abiItem.inputs?.some((x) => !(\"name\" in x && x.name));\\n                  }\\n                  const formatted = formatLog(log, {\\n                    args: isUnnamed ? [] : {},\\n                    eventName: eventName2\\n                  });\\n                  emit.onLogs([formatted]);\\n                }\\n              },\\n              onError(error) {\\n                emit.onError?.(error);\\n              }\\n            });\\n            unsubscribe = unsubscribe_;\\n            if (!active)\\n              unsubscribe();\\n          } catch (err) {\\n            onError?.(err);\\n          }\\n        })();\\n        return () => unsubscribe();\\n      });\\n    };\\n    return enablePolling ? pollContractEvent() : subscribeContractEvent();\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/writeContract.js\\n  init_parseAccount();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/account.js\\n  init_base();\\n  var AccountNotFoundError = class extends BaseError2 {\\n    constructor({ docsPath: docsPath8 } = {}) {\\n      super([\\n        \"Could not find an Account to execute with this Action.\",\\n        \"Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client.\"\\n      ].join(\"\\\\n\"), {\\n        docsPath: docsPath8,\\n        docsSlug: \"account\",\\n        name: \"AccountNotFoundError\"\\n      });\\n    }\\n  };\\n  var AccountTypeNotSupportedError = class extends BaseError2 {\\n    constructor({ docsPath: docsPath8, metaMessages, type }) {\\n      super(`Account type \"${type}\" is not supported.`, {\\n        docsPath: docsPath8,\\n        metaMessages,\\n        name: \"AccountTypeNotSupportedError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/writeContract.js\\n  init_encodeFunctionData();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/sendTransaction.js\\n  init_parseAccount();\\n  init_base();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/chain/assertCurrentChain.js\\n  init_chain();\\n  function assertCurrentChain({ chain, currentChainId }) {\\n    if (!chain)\\n      throw new ChainNotFoundError();\\n    if (currentChainId !== chain.id)\\n      throw new ChainMismatchError({ chain, currentChainId });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/errors/getTransactionError.js\\n  init_node();\\n  init_transaction();\\n  init_getNodeError();\\n  function getTransactionError(err, { docsPath: docsPath8, ...args }) {\\n    const cause = (() => {\\n      const cause2 = getNodeError(err, args);\\n      if (cause2 instanceof UnknownNodeError)\\n        return err;\\n      return cause2;\\n    })();\\n    return new TransactionExecutionError(cause, {\\n      docsPath: docsPath8,\\n      ...args\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/sendTransaction.js\\n  init_extract();\\n  init_transactionRequest();\\n  init_lru();\\n  init_assertRequest();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/sendRawTransaction.js\\n  async function sendRawTransaction(client, { serializedTransaction }) {\\n    return client.request({\\n      method: \"eth_sendRawTransaction\",\\n      params: [serializedTransaction]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/sendTransaction.js\\n  var supportsWalletNamespace = new LruMap(128);\\n  async function sendTransaction(client, parameters) {\\n    const { account: account_ = client.account, chain = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, ...rest } = parameters;\\n    if (typeof account_ === \"undefined\")\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/actions/wallet/sendTransaction\"\\n      });\\n    const account = account_ ? parseAccount(account_) : null;\\n    try {\\n      assertRequest(parameters);\\n      const to = await (async () => {\\n        if (parameters.to)\\n          return parameters.to;\\n        if (parameters.to === null)\\n          return void 0;\\n        if (authorizationList && authorizationList.length > 0)\\n          return await recoverAuthorizationAddress({\\n            authorization: authorizationList[0]\\n          }).catch(() => {\\n            throw new BaseError2(\"`to` is required. Could not infer from `authorizationList`.\");\\n          });\\n        return void 0;\\n      })();\\n      if (account?.type === \"json-rpc\" || account === null) {\\n        let chainId;\\n        if (chain !== null) {\\n          chainId = await getAction(client, getChainId, \"getChainId\")({});\\n          assertCurrentChain({\\n            currentChainId: chainId,\\n            chain\\n          });\\n        }\\n        const chainFormat = client.chain?.formatters?.transactionRequest?.format;\\n        const format = chainFormat || formatTransactionRequest;\\n        const request = format({\\n          // Pick out extra data that might exist on the chain\\'s transaction request type.\\n          ...extract(rest, { format: chainFormat }),\\n          accessList,\\n          authorizationList,\\n          blobs,\\n          chainId,\\n          data,\\n          from: account?.address,\\n          gas,\\n          gasPrice,\\n          maxFeePerBlobGas,\\n          maxFeePerGas,\\n          maxPriorityFeePerGas,\\n          nonce,\\n          to,\\n          value\\n        });\\n        const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid);\\n        const method = isWalletNamespaceSupported ? \"wallet_sendTransaction\" : \"eth_sendTransaction\";\\n        try {\\n          return await client.request({\\n            method,\\n            params: [request]\\n          }, { retryCount: 0 });\\n        } catch (e) {\\n          if (isWalletNamespaceSupported === false)\\n            throw e;\\n          const error = e;\\n          if (error.name === \"InvalidInputRpcError\" || error.name === \"InvalidParamsRpcError\" || error.name === \"MethodNotFoundRpcError\" || error.name === \"MethodNotSupportedRpcError\") {\\n            return await client.request({\\n              method: \"wallet_sendTransaction\",\\n              params: [request]\\n            }, { retryCount: 0 }).then((hash2) => {\\n              supportsWalletNamespace.set(client.uid, true);\\n              return hash2;\\n            }).catch((e2) => {\\n              const walletNamespaceError = e2;\\n              if (walletNamespaceError.name === \"MethodNotFoundRpcError\" || walletNamespaceError.name === \"MethodNotSupportedRpcError\") {\\n                supportsWalletNamespace.set(client.uid, false);\\n                throw error;\\n              }\\n              throw walletNamespaceError;\\n            });\\n          }\\n          throw error;\\n        }\\n      }\\n      if (account?.type === \"local\") {\\n        const request = await getAction(client, prepareTransactionRequest, \"prepareTransactionRequest\")({\\n          account,\\n          accessList,\\n          authorizationList,\\n          blobs,\\n          chain,\\n          data,\\n          gas,\\n          gasPrice,\\n          maxFeePerBlobGas,\\n          maxFeePerGas,\\n          maxPriorityFeePerGas,\\n          nonce,\\n          nonceManager: account.nonceManager,\\n          parameters: [...defaultParameters, \"sidecars\"],\\n          value,\\n          ...rest,\\n          to\\n        });\\n        const serializer = chain?.serializers?.transaction;\\n        const serializedTransaction = await account.signTransaction(request, {\\n          serializer\\n        });\\n        return await getAction(client, sendRawTransaction, \"sendRawTransaction\")({\\n          serializedTransaction\\n        });\\n      }\\n      if (account?.type === \"smart\")\\n        throw new AccountTypeNotSupportedError({\\n          metaMessages: [\\n            \"Consider using the `sendUserOperation` Action instead.\"\\n          ],\\n          docsPath: \"/docs/actions/bundler/sendUserOperation\",\\n          type: \"smart\"\\n        });\\n      throw new AccountTypeNotSupportedError({\\n        docsPath: \"/docs/actions/wallet/sendTransaction\",\\n        type: account?.type\\n      });\\n    } catch (err) {\\n      if (err instanceof AccountTypeNotSupportedError)\\n        throw err;\\n      throw getTransactionError(err, {\\n        ...parameters,\\n        account,\\n        chain: parameters.chain || void 0\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/writeContract.js\\n  async function writeContract(client, parameters) {\\n    const { abi: abi2, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;\\n    if (typeof account_ === \"undefined\")\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/contract/writeContract\"\\n      });\\n    const account = account_ ? parseAccount(account_) : null;\\n    const data = encodeFunctionData({\\n      abi: abi2,\\n      args,\\n      functionName\\n    });\\n    try {\\n      return await getAction(client, sendTransaction, \"sendTransaction\")({\\n        data: `${data}${dataSuffix ? dataSuffix.replace(\"0x\", \"\") : \"\"}`,\\n        to: address,\\n        account,\\n        ...request\\n      });\\n    } catch (error) {\\n      throw getContractError(error, {\\n        abi: abi2,\\n        address,\\n        args,\\n        docsPath: \"/docs/contract/writeContract\",\\n        functionName,\\n        sender: account?.address\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/createClient.js\\n  init_parseAccount();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/uid.js\\n  var size2 = 256;\\n  var index = size2;\\n  var buffer;\\n  function uid(length = 11) {\\n    if (!buffer || index + length > size2 * 2) {\\n      buffer = \"\";\\n      index = 0;\\n      for (let i = 0; i < size2; i++) {\\n        buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);\\n      }\\n    }\\n    return buffer.substring(index, index++ + length);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/createClient.js\\n  function createClient(parameters) {\\n    const { batch, cacheTime = parameters.pollingInterval ?? 4e3, ccipRead, key = \"base\", name = \"Base Client\", pollingInterval = 4e3, type = \"base\" } = parameters;\\n    const chain = parameters.chain;\\n    const account = parameters.account ? parseAccount(parameters.account) : void 0;\\n    const { config: config2, request, value } = parameters.transport({\\n      chain,\\n      pollingInterval\\n    });\\n    const transport = { ...config2, ...value };\\n    const client = {\\n      account,\\n      batch,\\n      cacheTime,\\n      ccipRead,\\n      chain,\\n      key,\\n      name,\\n      pollingInterval,\\n      request,\\n      transport,\\n      type,\\n      uid: uid()\\n    };\\n    function extend(base2) {\\n      return (extendFn) => {\\n        const extended = extendFn(base2);\\n        for (const key2 in client)\\n          delete extended[key2];\\n        const combined = { ...base2, ...extended };\\n        return Object.assign(combined, { extend: extend(combined) });\\n      };\\n    }\\n    return Object.assign(client, { extend: extend(client) });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/buildRequest.js\\n  init_base();\\n  init_request();\\n  init_rpc();\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withDedupe.js\\n  init_lru();\\n  var promiseCache2 = /* @__PURE__ */ new LruMap(8192);\\n  function withDedupe(fn, { enabled = true, id }) {\\n    if (!enabled || !id)\\n      return fn();\\n    if (promiseCache2.get(id))\\n      return promiseCache2.get(id);\\n    const promise = fn().finally(() => promiseCache2.delete(id));\\n    promiseCache2.set(id, promise);\\n    return promise;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withRetry.js\\n  function withRetry(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {\\n    return new Promise((resolve, reject) => {\\n      const attemptRetry = async ({ count = 0 } = {}) => {\\n        const retry = async ({ error }) => {\\n          const delay = typeof delay_ === \"function\" ? delay_({ count, error }) : delay_;\\n          if (delay)\\n            await wait(delay);\\n          attemptRetry({ count: count + 1 });\\n        };\\n        try {\\n          const data = await fn();\\n          resolve(data);\\n        } catch (err) {\\n          if (count < retryCount && await shouldRetry2({ count, error: err }))\\n            return retry({ error: err });\\n          reject(err);\\n        }\\n      };\\n      attemptRetry();\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/buildRequest.js\\n  init_stringify();\\n  function buildRequest(request, options = {}) {\\n    return async (args, overrideOptions = {}) => {\\n      const { dedupe = false, methods, retryDelay = 150, retryCount = 3, uid: uid2 } = {\\n        ...options,\\n        ...overrideOptions\\n      };\\n      const { method } = args;\\n      if (methods?.exclude?.includes(method))\\n        throw new MethodNotSupportedRpcError(new Error(\"method not supported\"), {\\n          method\\n        });\\n      if (methods?.include && !methods.include.includes(method))\\n        throw new MethodNotSupportedRpcError(new Error(\"method not supported\"), {\\n          method\\n        });\\n      const requestId = dedupe ? stringToHex(`${uid2}.${stringify(args)}`) : void 0;\\n      return withDedupe(() => withRetry(async () => {\\n        try {\\n          return await request(args);\\n        } catch (err_) {\\n          const err = err_;\\n          switch (err.code) {\\n            // -32700\\n            case ParseRpcError.code:\\n              throw new ParseRpcError(err);\\n            // -32600\\n            case InvalidRequestRpcError.code:\\n              throw new InvalidRequestRpcError(err);\\n            // -32601\\n            case MethodNotFoundRpcError.code:\\n              throw new MethodNotFoundRpcError(err, { method: args.method });\\n            // -32602\\n            case InvalidParamsRpcError.code:\\n              throw new InvalidParamsRpcError(err);\\n            // -32603\\n            case InternalRpcError.code:\\n              throw new InternalRpcError(err);\\n            // -32000\\n            case InvalidInputRpcError.code:\\n              throw new InvalidInputRpcError(err);\\n            // -32001\\n            case ResourceNotFoundRpcError.code:\\n              throw new ResourceNotFoundRpcError(err);\\n            // -32002\\n            case ResourceUnavailableRpcError.code:\\n              throw new ResourceUnavailableRpcError(err);\\n            // -32003\\n            case TransactionRejectedRpcError.code:\\n              throw new TransactionRejectedRpcError(err);\\n            // -32004\\n            case MethodNotSupportedRpcError.code:\\n              throw new MethodNotSupportedRpcError(err, {\\n                method: args.method\\n              });\\n            // -32005\\n            case LimitExceededRpcError.code:\\n              throw new LimitExceededRpcError(err);\\n            // -32006\\n            case JsonRpcVersionUnsupportedError.code:\\n              throw new JsonRpcVersionUnsupportedError(err);\\n            // 4001\\n            case UserRejectedRequestError.code:\\n              throw new UserRejectedRequestError(err);\\n            // 4100\\n            case UnauthorizedProviderError.code:\\n              throw new UnauthorizedProviderError(err);\\n            // 4200\\n            case UnsupportedProviderMethodError.code:\\n              throw new UnsupportedProviderMethodError(err);\\n            // 4900\\n            case ProviderDisconnectedError.code:\\n              throw new ProviderDisconnectedError(err);\\n            // 4901\\n            case ChainDisconnectedError.code:\\n              throw new ChainDisconnectedError(err);\\n            // 4902\\n            case SwitchChainError.code:\\n              throw new SwitchChainError(err);\\n            // 5700\\n            case UnsupportedNonOptionalCapabilityError.code:\\n              throw new UnsupportedNonOptionalCapabilityError(err);\\n            // 5710\\n            case UnsupportedChainIdError.code:\\n              throw new UnsupportedChainIdError(err);\\n            // 5720\\n            case DuplicateIdError.code:\\n              throw new DuplicateIdError(err);\\n            // 5730\\n            case UnknownBundleIdError.code:\\n              throw new UnknownBundleIdError(err);\\n            // 5740\\n            case BundleTooLargeError.code:\\n              throw new BundleTooLargeError(err);\\n            // 5750\\n            case AtomicReadyWalletRejectedUpgradeError.code:\\n              throw new AtomicReadyWalletRejectedUpgradeError(err);\\n            // 5760\\n            case AtomicityNotSupportedError.code:\\n              throw new AtomicityNotSupportedError(err);\\n            // CAIP-25: User Rejected Error\\n            // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\\n            case 5e3:\\n              throw new UserRejectedRequestError(err);\\n            default:\\n              if (err_ instanceof BaseError2)\\n                throw err_;\\n              throw new UnknownRpcError(err);\\n          }\\n        }\\n      }, {\\n        delay: ({ count, error }) => {\\n          if (error && error instanceof HttpRequestError) {\\n            const retryAfter = error?.headers?.get(\"Retry-After\");\\n            if (retryAfter?.match(/\\\\d/))\\n              return Number.parseInt(retryAfter) * 1e3;\\n          }\\n          return ~~(1 << count) * retryDelay;\\n        },\\n        retryCount,\\n        shouldRetry: ({ error }) => shouldRetry(error)\\n      }), { enabled: dedupe, id: requestId });\\n    };\\n  }\\n  function shouldRetry(error) {\\n    if (\"code\" in error && typeof error.code === \"number\") {\\n      if (error.code === -1)\\n        return true;\\n      if (error.code === LimitExceededRpcError.code)\\n        return true;\\n      if (error.code === InternalRpcError.code)\\n        return true;\\n      return false;\\n    }\\n    if (error instanceof HttpRequestError && error.status) {\\n      if (error.status === 403)\\n        return true;\\n      if (error.status === 408)\\n        return true;\\n      if (error.status === 413)\\n        return true;\\n      if (error.status === 429)\\n        return true;\\n      if (error.status === 500)\\n        return true;\\n      if (error.status === 502)\\n        return true;\\n      if (error.status === 503)\\n        return true;\\n      if (error.status === 504)\\n        return true;\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/transports/createTransport.js\\n  function createTransport({ key, methods, name, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {\\n    const uid2 = uid();\\n    return {\\n      config: {\\n        key,\\n        methods,\\n        name,\\n        request,\\n        retryCount,\\n        retryDelay,\\n        timeout,\\n        type\\n      },\\n      request: buildRequest(request, { methods, retryCount, retryDelay, uid: uid2 }),\\n      value\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/transports/custom.js\\n  function custom(provider, config2 = {}) {\\n    const { key = \"custom\", methods, name = \"Custom Provider\", retryDelay } = config2;\\n    return ({ retryCount: defaultRetryCount }) => createTransport({\\n      key,\\n      methods,\\n      name,\\n      request: provider.request.bind(provider),\\n      retryCount: config2.retryCount ?? defaultRetryCount,\\n      retryDelay,\\n      type: \"custom\"\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/transports/http.js\\n  init_request();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/transport.js\\n  init_base();\\n  var UrlRequiredError = class extends BaseError2 {\\n    constructor() {\\n      super(\"No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.\", {\\n        docsPath: \"/docs/clients/intro\",\\n        name: \"UrlRequiredError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/transports/http.js\\n  init_createBatchScheduler();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/rpc/http.js\\n  init_request();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/promise/withTimeout.js\\n  function withTimeout(fn, { errorInstance = new Error(\"timed out\"), timeout, signal }) {\\n    return new Promise((resolve, reject) => {\\n      ;\\n      (async () => {\\n        let timeoutId;\\n        try {\\n          const controller = new AbortController();\\n          if (timeout > 0) {\\n            timeoutId = setTimeout(() => {\\n              if (signal) {\\n                controller.abort();\\n              } else {\\n                reject(errorInstance);\\n              }\\n            }, timeout);\\n          }\\n          resolve(await fn({ signal: controller?.signal || null }));\\n        } catch (err) {\\n          if (err?.name === \"AbortError\")\\n            reject(errorInstance);\\n          reject(err);\\n        } finally {\\n          clearTimeout(timeoutId);\\n        }\\n      })();\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/rpc/http.js\\n  init_stringify();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/rpc/id.js\\n  function createIdStore() {\\n    return {\\n      current: 0,\\n      take() {\\n        return this.current++;\\n      },\\n      reset() {\\n        this.current = 0;\\n      }\\n    };\\n  }\\n  var idCache = /* @__PURE__ */ createIdStore();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/rpc/http.js\\n  function getHttpRpcClient(url, options = {}) {\\n    return {\\n      async request(params) {\\n        const { body, onRequest = options.onRequest, onResponse = options.onResponse, timeout = options.timeout ?? 1e4 } = params;\\n        const fetchOptions = {\\n          ...options.fetchOptions ?? {},\\n          ...params.fetchOptions ?? {}\\n        };\\n        const { headers, method, signal: signal_ } = fetchOptions;\\n        try {\\n          const response = await withTimeout(async ({ signal }) => {\\n            const init = {\\n              ...fetchOptions,\\n              body: Array.isArray(body) ? stringify(body.map((body2) => ({\\n                jsonrpc: \"2.0\",\\n                id: body2.id ?? idCache.take(),\\n                ...body2\\n              }))) : stringify({\\n                jsonrpc: \"2.0\",\\n                id: body.id ?? idCache.take(),\\n                ...body\\n              }),\\n              headers: {\\n                \"Content-Type\": \"application/json\",\\n                ...headers\\n              },\\n              method: method || \"POST\",\\n              signal: signal_ || (timeout > 0 ? signal : null)\\n            };\\n            const request = new Request(url, init);\\n            const args = await onRequest?.(request, init) ?? { ...init, url };\\n            const response2 = await fetch(args.url ?? url, args);\\n            return response2;\\n          }, {\\n            errorInstance: new TimeoutError({ body, url }),\\n            timeout,\\n            signal: true\\n          });\\n          if (onResponse)\\n            await onResponse(response);\\n          let data;\\n          if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\"))\\n            data = await response.json();\\n          else {\\n            data = await response.text();\\n            try {\\n              data = JSON.parse(data || \"{}\");\\n            } catch (err) {\\n              if (response.ok)\\n                throw err;\\n              data = { error: data };\\n            }\\n          }\\n          if (!response.ok) {\\n            throw new HttpRequestError({\\n              body,\\n              details: stringify(data.error) || response.statusText,\\n              headers: response.headers,\\n              status: response.status,\\n              url\\n            });\\n          }\\n          return data;\\n        } catch (err) {\\n          if (err instanceof HttpRequestError)\\n            throw err;\\n          if (err instanceof TimeoutError)\\n            throw err;\\n          throw new HttpRequestError({\\n            body,\\n            cause: err,\\n            url\\n          });\\n        }\\n      }\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/transports/http.js\\n  function http(url, config2 = {}) {\\n    const { batch, fetchOptions, key = \"http\", methods, name = \"HTTP JSON-RPC\", onFetchRequest, onFetchResponse, retryDelay, raw } = config2;\\n    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\\n      const { batchSize = 1e3, wait: wait2 = 0 } = typeof batch === \"object\" ? batch : {};\\n      const retryCount = config2.retryCount ?? retryCount_;\\n      const timeout = timeout_ ?? config2.timeout ?? 1e4;\\n      const url_ = url || chain?.rpcUrls.default.http[0];\\n      if (!url_)\\n        throw new UrlRequiredError();\\n      const rpcClient = getHttpRpcClient(url_, {\\n        fetchOptions,\\n        onRequest: onFetchRequest,\\n        onResponse: onFetchResponse,\\n        timeout\\n      });\\n      return createTransport({\\n        key,\\n        methods,\\n        name,\\n        async request({ method, params }) {\\n          const body = { method, params };\\n          const { schedule } = createBatchScheduler({\\n            id: url_,\\n            wait: wait2,\\n            shouldSplitBatch(requests) {\\n              return requests.length > batchSize;\\n            },\\n            fn: (body2) => rpcClient.request({\\n              body: body2\\n            }),\\n            sort: (a, b) => a.id - b.id\\n          });\\n          const fn = async (body2) => batch ? schedule(body2) : [\\n            await rpcClient.request({\\n              body: body2\\n            })\\n          ];\\n          const [{ error, result }] = await fn(body);\\n          if (raw)\\n            return { error, result };\\n          if (error)\\n            throw new RpcRequestError({\\n              body,\\n              error,\\n              url: url_\\n            });\\n          return result;\\n        },\\n        retryCount,\\n        retryDelay,\\n        timeout,\\n        type: \"http\"\\n      }, {\\n        fetchOptions,\\n        url: url_\\n      });\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsAddress.js\\n  init_abis();\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_getChainContractAddress();\\n  init_trim();\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/errors.js\\n  init_solidity();\\n  init_base();\\n  init_contract();\\n  function isNullUniversalResolverError(err, callType) {\\n    if (!(err instanceof BaseError2))\\n      return false;\\n    const cause = err.walk((e) => e instanceof ContractFunctionRevertedError);\\n    if (!(cause instanceof ContractFunctionRevertedError))\\n      return false;\\n    if (cause.data?.errorName === \"ResolverNotFound\")\\n      return true;\\n    if (cause.data?.errorName === \"ResolverWildcardNotSupported\")\\n      return true;\\n    if (cause.data?.errorName === \"ResolverNotContract\")\\n      return true;\\n    if (cause.data?.errorName === \"ResolverError\")\\n      return true;\\n    if (cause.data?.errorName === \"HttpError\")\\n      return true;\\n    if (cause.reason?.includes(\"Wildcard on non-extended resolvers is not supported\"))\\n      return true;\\n    if (callType === \"reverse\" && cause.reason === panicReasons[50])\\n      return true;\\n    return false;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsAddress.js\\n  init_localBatchGatewayRequest();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/namehash.js\\n  init_concat();\\n  init_toBytes();\\n  init_toHex();\\n  init_keccak256();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/encodedLabelToLabelhash.js\\n  init_isHex();\\n  function encodedLabelToLabelhash(label) {\\n    if (label.length !== 66)\\n      return null;\\n    if (label.indexOf(\"[\") !== 0)\\n      return null;\\n    if (label.indexOf(\"]\") !== 65)\\n      return null;\\n    const hash2 = `0x${label.slice(1, 65)}`;\\n    if (!isHex(hash2))\\n      return null;\\n    return hash2;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/namehash.js\\n  function namehash(name) {\\n    let result = new Uint8Array(32).fill(0);\\n    if (!name)\\n      return bytesToHex(result);\\n    const labels = name.split(\".\");\\n    for (let i = labels.length - 1; i >= 0; i -= 1) {\\n      const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i]);\\n      const hashed = hashFromEncodedLabel ? toBytes(hashFromEncodedLabel) : keccak256(stringToBytes(labels[i]), \"bytes\");\\n      result = keccak256(concat([result, hashed]), \"bytes\");\\n    }\\n    return bytesToHex(result);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/packetToBytes.js\\n  init_toBytes();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/encodeLabelhash.js\\n  function encodeLabelhash(hash2) {\\n    return `[${hash2.slice(2)}]`;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/labelhash.js\\n  init_toBytes();\\n  init_toHex();\\n  init_keccak256();\\n  function labelhash(label) {\\n    const result = new Uint8Array(32).fill(0);\\n    if (!label)\\n      return bytesToHex(result);\\n    return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/packetToBytes.js\\n  function packetToBytes(packet) {\\n    const value = packet.replace(/^\\\\.|\\\\.$/gm, \"\");\\n    if (value.length === 0)\\n      return new Uint8Array(1);\\n    const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);\\n    let offset = 0;\\n    const list = value.split(\".\");\\n    for (let i = 0; i < list.length; i++) {\\n      let encoded = stringToBytes(list[i]);\\n      if (encoded.byteLength > 255)\\n        encoded = stringToBytes(encodeLabelhash(labelhash(list[i])));\\n      bytes[offset] = encoded.length;\\n      bytes.set(encoded, offset + 1);\\n      offset += encoded.length + 1;\\n    }\\n    if (bytes.byteLength !== offset + 1)\\n      return bytes.slice(0, offset + 1);\\n    return bytes;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsAddress.js\\n  async function getEnsAddress(client, parameters) {\\n    const { blockNumber, blockTag, coinType, name, gatewayUrls, strict } = parameters;\\n    const { chain } = client;\\n    const universalResolverAddress = (() => {\\n      if (parameters.universalResolverAddress)\\n        return parameters.universalResolverAddress;\\n      if (!chain)\\n        throw new Error(\"client chain not configured. universalResolverAddress is required.\");\\n      return getChainContractAddress({\\n        blockNumber,\\n        chain,\\n        contract: \"ensUniversalResolver\"\\n      });\\n    })();\\n    const tlds = chain?.ensTlds;\\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\\n      return null;\\n    try {\\n      const functionData = encodeFunctionData({\\n        abi: addressResolverAbi,\\n        functionName: \"addr\",\\n        ...coinType != null ? { args: [namehash(name), BigInt(coinType)] } : { args: [namehash(name)] }\\n      });\\n      const readContractParameters = {\\n        address: universalResolverAddress,\\n        abi: universalResolverResolveAbi,\\n        functionName: \"resolve\",\\n        args: [\\n          toHex(packetToBytes(name)),\\n          functionData,\\n          gatewayUrls ?? [localBatchGatewayUrl]\\n        ],\\n        blockNumber,\\n        blockTag\\n      };\\n      const readContractAction = getAction(client, readContract, \"readContract\");\\n      const res = await readContractAction(readContractParameters);\\n      if (res[0] === \"0x\")\\n        return null;\\n      const address = decodeFunctionResult({\\n        abi: addressResolverAbi,\\n        args: coinType != null ? [namehash(name), BigInt(coinType)] : void 0,\\n        functionName: \"addr\",\\n        data: res[0]\\n      });\\n      if (address === \"0x\")\\n        return null;\\n      if (trim(address) === \"0x00\")\\n        return null;\\n      return address;\\n    } catch (err) {\\n      if (strict)\\n        throw err;\\n      if (isNullUniversalResolverError(err, \"resolve\"))\\n        return null;\\n      throw err;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/ens.js\\n  init_base();\\n  var EnsAvatarInvalidMetadataError = class extends BaseError2 {\\n    constructor({ data }) {\\n      super(\"Unable to extract image from metadata. The metadata may be malformed or invalid.\", {\\n        metaMessages: [\\n          \"- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.\",\\n          \"\",\\n          `Provided data: ${JSON.stringify(data)}`\\n        ],\\n        name: \"EnsAvatarInvalidMetadataError\"\\n      });\\n    }\\n  };\\n  var EnsAvatarInvalidNftUriError = class extends BaseError2 {\\n    constructor({ reason }) {\\n      super(`ENS NFT avatar URI is invalid. ${reason}`, {\\n        name: \"EnsAvatarInvalidNftUriError\"\\n      });\\n    }\\n  };\\n  var EnsAvatarUriResolutionError = class extends BaseError2 {\\n    constructor({ uri }) {\\n      super(`Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`, { name: \"EnsAvatarUriResolutionError\" });\\n    }\\n  };\\n  var EnsAvatarUnsupportedNamespaceError = class extends BaseError2 {\\n    constructor({ namespace }) {\\n      super(`ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`, { name: \"EnsAvatarUnsupportedNamespaceError\" });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/avatar/utils.js\\n  var networkRegex = /(?<protocol>https?:\\\\/\\\\/[^\\\\/]*|ipfs:\\\\/|ipns:\\\\/|ar:\\\\/)?(?<root>\\\\/)?(?<subpath>ipfs\\\\/|ipns\\\\/)?(?<target>[\\\\w\\\\-.]+)(?<subtarget>\\\\/.*)?/;\\n  var ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\\\/(?<target>[\\\\w\\\\-.]+))?(?<subtarget>\\\\/.*)?$/;\\n  var base64Regex = /^data:([a-zA-Z\\\\-/+]*);base64,([^\"].*)/;\\n  var dataURIRegex = /^data:([a-zA-Z\\\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;\\n  async function isImageUri(uri) {\\n    try {\\n      const res = await fetch(uri, { method: \"HEAD\" });\\n      if (res.status === 200) {\\n        const contentType = res.headers.get(\"content-type\");\\n        return contentType?.startsWith(\"image/\");\\n      }\\n      return false;\\n    } catch (error) {\\n      if (typeof error === \"object\" && typeof error.response !== \"undefined\") {\\n        return false;\\n      }\\n      if (!globalThis.hasOwnProperty(\"Image\"))\\n        return false;\\n      return new Promise((resolve) => {\\n        const img = new Image();\\n        img.onload = () => {\\n          resolve(true);\\n        };\\n        img.onerror = () => {\\n          resolve(false);\\n        };\\n        img.src = uri;\\n      });\\n    }\\n  }\\n  function getGateway(custom3, defaultGateway) {\\n    if (!custom3)\\n      return defaultGateway;\\n    if (custom3.endsWith(\"/\"))\\n      return custom3.slice(0, -1);\\n    return custom3;\\n  }\\n  function resolveAvatarUri({ uri, gatewayUrls }) {\\n    const isEncoded = base64Regex.test(uri);\\n    if (isEncoded)\\n      return { uri, isOnChain: true, isEncoded };\\n    const ipfsGateway = getGateway(gatewayUrls?.ipfs, \"https://ipfs.io\");\\n    const arweaveGateway = getGateway(gatewayUrls?.arweave, \"https://arweave.net\");\\n    const networkRegexMatch = uri.match(networkRegex);\\n    const { protocol, subpath, target, subtarget = \"\" } = networkRegexMatch?.groups || {};\\n    const isIPNS = protocol === \"ipns:/\" || subpath === \"ipns/\";\\n    const isIPFS = protocol === \"ipfs:/\" || subpath === \"ipfs/\" || ipfsHashRegex.test(uri);\\n    if (uri.startsWith(\"http\") && !isIPNS && !isIPFS) {\\n      let replacedUri = uri;\\n      if (gatewayUrls?.arweave)\\n        replacedUri = uri.replace(/https:\\\\/\\\\/arweave.net/g, gatewayUrls?.arweave);\\n      return { uri: replacedUri, isOnChain: false, isEncoded: false };\\n    }\\n    if ((isIPNS || isIPFS) && target) {\\n      return {\\n        uri: `${ipfsGateway}/${isIPNS ? \"ipns\" : \"ipfs\"}/${target}${subtarget}`,\\n        isOnChain: false,\\n        isEncoded: false\\n      };\\n    }\\n    if (protocol === \"ar:/\" && target) {\\n      return {\\n        uri: `${arweaveGateway}/${target}${subtarget || \"\"}`,\\n        isOnChain: false,\\n        isEncoded: false\\n      };\\n    }\\n    let parsedUri = uri.replace(dataURIRegex, \"\");\\n    if (parsedUri.startsWith(\"<svg\")) {\\n      parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;\\n    }\\n    if (parsedUri.startsWith(\"data:\") || parsedUri.startsWith(\"{\")) {\\n      return {\\n        uri: parsedUri,\\n        isOnChain: true,\\n        isEncoded: false\\n      };\\n    }\\n    throw new EnsAvatarUriResolutionError({ uri });\\n  }\\n  function getJsonImage(data) {\\n    if (typeof data !== \"object\" || !(\"image\" in data) && !(\"image_url\" in data) && !(\"image_data\" in data)) {\\n      throw new EnsAvatarInvalidMetadataError({ data });\\n    }\\n    return data.image || data.image_url || data.image_data;\\n  }\\n  async function getMetadataAvatarUri({ gatewayUrls, uri }) {\\n    try {\\n      const res = await fetch(uri).then((res2) => res2.json());\\n      const image = await parseAvatarUri({\\n        gatewayUrls,\\n        uri: getJsonImage(res)\\n      });\\n      return image;\\n    } catch {\\n      throw new EnsAvatarUriResolutionError({ uri });\\n    }\\n  }\\n  async function parseAvatarUri({ gatewayUrls, uri }) {\\n    const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });\\n    if (isOnChain)\\n      return resolvedURI;\\n    const isImage = await isImageUri(resolvedURI);\\n    if (isImage)\\n      return resolvedURI;\\n    throw new EnsAvatarUriResolutionError({ uri });\\n  }\\n  function parseNftUri(uri_) {\\n    let uri = uri_;\\n    if (uri.startsWith(\"did:nft:\")) {\\n      uri = uri.replace(\"did:nft:\", \"\").replace(/_/g, \"/\");\\n    }\\n    const [reference, asset_namespace, tokenID] = uri.split(\"/\");\\n    const [eip_namespace, chainID] = reference.split(\":\");\\n    const [erc_namespace, contractAddress] = asset_namespace.split(\":\");\\n    if (!eip_namespace || eip_namespace.toLowerCase() !== \"eip155\")\\n      throw new EnsAvatarInvalidNftUriError({ reason: \"Only EIP-155 supported\" });\\n    if (!chainID)\\n      throw new EnsAvatarInvalidNftUriError({ reason: \"Chain ID not found\" });\\n    if (!contractAddress)\\n      throw new EnsAvatarInvalidNftUriError({\\n        reason: \"Contract address not found\"\\n      });\\n    if (!tokenID)\\n      throw new EnsAvatarInvalidNftUriError({ reason: \"Token ID not found\" });\\n    if (!erc_namespace)\\n      throw new EnsAvatarInvalidNftUriError({ reason: \"ERC namespace not found\" });\\n    return {\\n      chainID: Number.parseInt(chainID),\\n      namespace: erc_namespace.toLowerCase(),\\n      contractAddress,\\n      tokenID\\n    };\\n  }\\n  async function getNftTokenUri(client, { nft }) {\\n    if (nft.namespace === \"erc721\") {\\n      return readContract(client, {\\n        address: nft.contractAddress,\\n        abi: [\\n          {\\n            name: \"tokenURI\",\\n            type: \"function\",\\n            stateMutability: \"view\",\\n            inputs: [{ name: \"tokenId\", type: \"uint256\" }],\\n            outputs: [{ name: \"\", type: \"string\" }]\\n          }\\n        ],\\n        functionName: \"tokenURI\",\\n        args: [BigInt(nft.tokenID)]\\n      });\\n    }\\n    if (nft.namespace === \"erc1155\") {\\n      return readContract(client, {\\n        address: nft.contractAddress,\\n        abi: [\\n          {\\n            name: \"uri\",\\n            type: \"function\",\\n            stateMutability: \"view\",\\n            inputs: [{ name: \"_id\", type: \"uint256\" }],\\n            outputs: [{ name: \"\", type: \"string\" }]\\n          }\\n        ],\\n        functionName: \"uri\",\\n        args: [BigInt(nft.tokenID)]\\n      });\\n    }\\n    throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/ens/avatar/parseAvatarRecord.js\\n  async function parseAvatarRecord(client, { gatewayUrls, record }) {\\n    if (/eip155:/i.test(record))\\n      return parseNftAvatarUri(client, { gatewayUrls, record });\\n    return parseAvatarUri({ uri: record, gatewayUrls });\\n  }\\n  async function parseNftAvatarUri(client, { gatewayUrls, record }) {\\n    const nft = parseNftUri(record);\\n    const nftUri = await getNftTokenUri(client, { nft });\\n    const { uri: resolvedNftUri, isOnChain, isEncoded } = resolveAvatarUri({ uri: nftUri, gatewayUrls });\\n    if (isOnChain && (resolvedNftUri.includes(\"data:application/json;base64,\") || resolvedNftUri.startsWith(\"{\"))) {\\n      const encodedJson = isEncoded ? (\\n        // if it is encoded, decode it\\n        atob(resolvedNftUri.replace(\"data:application/json;base64,\", \"\"))\\n      ) : (\\n        // if it isn\\'t encoded assume it is a JSON string, but it could be anything (it will error if it is)\\n        resolvedNftUri\\n      );\\n      const decoded = JSON.parse(encodedJson);\\n      return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls });\\n    }\\n    let uriTokenId = nft.tokenID;\\n    if (nft.namespace === \"erc1155\")\\n      uriTokenId = uriTokenId.replace(\"0x\", \"\").padStart(64, \"0\");\\n    return getMetadataAvatarUri({\\n      gatewayUrls,\\n      uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsText.js\\n  init_abis();\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_getChainContractAddress();\\n  init_toHex();\\n  init_localBatchGatewayRequest();\\n  async function getEnsText(client, parameters) {\\n    const { blockNumber, blockTag, key, name, gatewayUrls, strict } = parameters;\\n    const { chain } = client;\\n    const universalResolverAddress = (() => {\\n      if (parameters.universalResolverAddress)\\n        return parameters.universalResolverAddress;\\n      if (!chain)\\n        throw new Error(\"client chain not configured. universalResolverAddress is required.\");\\n      return getChainContractAddress({\\n        blockNumber,\\n        chain,\\n        contract: \"ensUniversalResolver\"\\n      });\\n    })();\\n    const tlds = chain?.ensTlds;\\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\\n      return null;\\n    try {\\n      const readContractParameters = {\\n        address: universalResolverAddress,\\n        abi: universalResolverResolveAbi,\\n        functionName: \"resolve\",\\n        args: [\\n          toHex(packetToBytes(name)),\\n          encodeFunctionData({\\n            abi: textResolverAbi,\\n            functionName: \"text\",\\n            args: [namehash(name), key]\\n          }),\\n          gatewayUrls ?? [localBatchGatewayUrl]\\n        ],\\n        blockNumber,\\n        blockTag\\n      };\\n      const readContractAction = getAction(client, readContract, \"readContract\");\\n      const res = await readContractAction(readContractParameters);\\n      if (res[0] === \"0x\")\\n        return null;\\n      const record = decodeFunctionResult({\\n        abi: textResolverAbi,\\n        functionName: \"text\",\\n        data: res[0]\\n      });\\n      return record === \"\" ? null : record;\\n    } catch (err) {\\n      if (strict)\\n        throw err;\\n      if (isNullUniversalResolverError(err, \"resolve\"))\\n        return null;\\n      throw err;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsAvatar.js\\n  async function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress }) {\\n    const record = await getAction(client, getEnsText, \"getEnsText\")({\\n      blockNumber,\\n      blockTag,\\n      key: \"avatar\",\\n      name,\\n      universalResolverAddress,\\n      gatewayUrls,\\n      strict\\n    });\\n    if (!record)\\n      return null;\\n    try {\\n      return await parseAvatarRecord(client, {\\n        record,\\n        gatewayUrls: assetGatewayUrls\\n      });\\n    } catch {\\n      return null;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsName.js\\n  init_abis();\\n  init_getChainContractAddress();\\n  init_toHex();\\n  async function getEnsName(client, { address, blockNumber, blockTag, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {\\n    let universalResolverAddress = universalResolverAddress_;\\n    if (!universalResolverAddress) {\\n      if (!client.chain)\\n        throw new Error(\"client chain not configured. universalResolverAddress is required.\");\\n      universalResolverAddress = getChainContractAddress({\\n        blockNumber,\\n        chain: client.chain,\\n        contract: \"ensUniversalResolver\"\\n      });\\n    }\\n    const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;\\n    try {\\n      const readContractParameters = {\\n        address: universalResolverAddress,\\n        abi: universalResolverReverseAbi,\\n        functionName: \"reverse\",\\n        args: [toHex(packetToBytes(reverseNode))],\\n        blockNumber,\\n        blockTag\\n      };\\n      const readContractAction = getAction(client, readContract, \"readContract\");\\n      const [name, resolvedAddress] = gatewayUrls ? await readContractAction({\\n        ...readContractParameters,\\n        args: [...readContractParameters.args, gatewayUrls]\\n      }) : await readContractAction(readContractParameters);\\n      if (address.toLowerCase() !== resolvedAddress.toLowerCase())\\n        return null;\\n      return name;\\n    } catch (err) {\\n      if (strict)\\n        throw err;\\n      if (isNullUniversalResolverError(err, \"reverse\"))\\n        return null;\\n      throw err;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/ens/getEnsResolver.js\\n  init_getChainContractAddress();\\n  init_toHex();\\n  async function getEnsResolver(client, parameters) {\\n    const { blockNumber, blockTag, name } = parameters;\\n    const { chain } = client;\\n    const universalResolverAddress = (() => {\\n      if (parameters.universalResolverAddress)\\n        return parameters.universalResolverAddress;\\n      if (!chain)\\n        throw new Error(\"client chain not configured. universalResolverAddress is required.\");\\n      return getChainContractAddress({\\n        blockNumber,\\n        chain,\\n        contract: \"ensUniversalResolver\"\\n      });\\n    })();\\n    const tlds = chain?.ensTlds;\\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\\n      throw new Error(`${name} is not a valid ENS TLD (${tlds?.join(\", \")}) for chain \"${chain.name}\" (id: ${chain.id}).`);\\n    const [resolverAddress] = await getAction(client, readContract, \"readContract\")({\\n      address: universalResolverAddress,\\n      abi: [\\n        {\\n          inputs: [{ type: \"bytes\" }],\\n          name: \"findResolver\",\\n          outputs: [{ type: \"address\" }, { type: \"bytes32\" }],\\n          stateMutability: \"view\",\\n          type: \"function\"\\n        }\\n      ],\\n      functionName: \"findResolver\",\\n      args: [toHex(packetToBytes(name))],\\n      blockNumber,\\n      blockTag\\n    });\\n    return resolverAddress;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/decorators/public.js\\n  init_call();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createAccessList.js\\n  init_parseAccount();\\n  init_toHex();\\n  init_getCallError();\\n  init_extract();\\n  init_transactionRequest();\\n  init_assertRequest();\\n  async function createAccessList(client, args) {\\n    const { account: account_ = client.account, blockNumber, blockTag = \"latest\", blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, to, value, ...rest } = args;\\n    const account = account_ ? parseAccount(account_) : void 0;\\n    try {\\n      assertRequest(args);\\n      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n      const block = blockNumberHex || blockTag;\\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format;\\n      const format = chainFormat || formatTransactionRequest;\\n      const request = format({\\n        // Pick out extra data that might exist on the chain\\'s transaction request type.\\n        ...extract(rest, { format: chainFormat }),\\n        from: account?.address,\\n        blobs,\\n        data,\\n        gas,\\n        gasPrice,\\n        maxFeePerBlobGas,\\n        maxFeePerGas,\\n        maxPriorityFeePerGas,\\n        to,\\n        value\\n      });\\n      const response = await client.request({\\n        method: \"eth_createAccessList\",\\n        params: [request, block]\\n      });\\n      return {\\n        accessList: response.accessList,\\n        gasUsed: BigInt(response.gasUsed)\\n      };\\n    } catch (err) {\\n      throw getCallError(err, {\\n        ...args,\\n        account,\\n        chain: client.chain\\n      });\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createBlockFilter.js\\n  async function createBlockFilter(client) {\\n    const getRequest = createFilterRequestScope(client, {\\n      method: \"eth_newBlockFilter\"\\n    });\\n    const id = await client.request({\\n      method: \"eth_newBlockFilter\"\\n    });\\n    return { id, request: getRequest(id), type: \"block\" };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createEventFilter.js\\n  init_toHex();\\n  async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock } = {}) {\\n    const events = events_ ?? (event ? [event] : void 0);\\n    const getRequest = createFilterRequestScope(client, {\\n      method: \"eth_newFilter\"\\n    });\\n    let topics = [];\\n    if (events) {\\n      const encoded = events.flatMap((event2) => encodeEventTopics({\\n        abi: [event2],\\n        eventName: event2.name,\\n        args\\n      }));\\n      topics = [encoded];\\n      if (event)\\n        topics = topics[0];\\n    }\\n    const id = await client.request({\\n      method: \"eth_newFilter\",\\n      params: [\\n        {\\n          address,\\n          fromBlock: typeof fromBlock === \"bigint\" ? numberToHex(fromBlock) : fromBlock,\\n          toBlock: typeof toBlock === \"bigint\" ? numberToHex(toBlock) : toBlock,\\n          ...topics.length ? { topics } : {}\\n        }\\n      ]\\n    });\\n    return {\\n      abi: events,\\n      args,\\n      eventName: event ? event.name : void 0,\\n      fromBlock,\\n      id,\\n      request: getRequest(id),\\n      strict: Boolean(strict),\\n      toBlock,\\n      type: \"event\"\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/createPendingTransactionFilter.js\\n  async function createPendingTransactionFilter(client) {\\n    const getRequest = createFilterRequestScope(client, {\\n      method: \"eth_newPendingTransactionFilter\"\\n    });\\n    const id = await client.request({\\n      method: \"eth_newPendingTransactionFilter\"\\n    });\\n    return { id, request: getRequest(id), type: \"transaction\" };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBlobBaseFee.js\\n  async function getBlobBaseFee(client) {\\n    const baseFee = await client.request({\\n      method: \"eth_blobBaseFee\"\\n    });\\n    return BigInt(baseFee);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getBlockTransactionCount.js\\n  init_fromHex();\\n  init_toHex();\\n  async function getBlockTransactionCount(client, { blockHash, blockNumber, blockTag = \"latest\" } = {}) {\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    let count;\\n    if (blockHash) {\\n      count = await client.request({\\n        method: \"eth_getBlockTransactionCountByHash\",\\n        params: [blockHash]\\n      }, { dedupe: true });\\n    } else {\\n      count = await client.request({\\n        method: \"eth_getBlockTransactionCountByNumber\",\\n        params: [blockNumberHex || blockTag]\\n      }, { dedupe: Boolean(blockNumberHex) });\\n    }\\n    return hexToNumber(count);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getCode.js\\n  init_toHex();\\n  async function getCode(client, { address, blockNumber, blockTag = \"latest\" }) {\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    const hex = await client.request({\\n      method: \"eth_getCode\",\\n      params: [address, blockNumberHex || blockTag]\\n    }, { dedupe: Boolean(blockNumberHex) });\\n    if (hex === \"0x\")\\n      return void 0;\\n    return hex;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/eip712.js\\n  init_base();\\n  var Eip712DomainNotFoundError = class extends BaseError2 {\\n    constructor({ address }) {\\n      super(`No EIP-712 domain found on contract \"${address}\".`, {\\n        metaMessages: [\\n          \"Ensure that:\",\\n          `- The contract is deployed at the address \"${address}\".`,\\n          \"- `eip712Domain()` function exists on the contract.\",\\n          \"- `eip712Domain()` function matches signature to ERC-5267 specification.\"\\n        ],\\n        name: \"Eip712DomainNotFoundError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getEip712Domain.js\\n  async function getEip712Domain(client, parameters) {\\n    const { address, factory, factoryData } = parameters;\\n    try {\\n      const [fields, name, version4, chainId, verifyingContract, salt, extensions] = await getAction(client, readContract, \"readContract\")({\\n        abi,\\n        address,\\n        functionName: \"eip712Domain\",\\n        factory,\\n        factoryData\\n      });\\n      return {\\n        domain: {\\n          name,\\n          version: version4,\\n          chainId: Number(chainId),\\n          verifyingContract,\\n          salt\\n        },\\n        extensions,\\n        fields\\n      };\\n    } catch (e) {\\n      const error = e;\\n      if (error.name === \"ContractFunctionExecutionError\" && error.cause.name === \"ContractFunctionZeroDataError\") {\\n        throw new Eip712DomainNotFoundError({ address });\\n      }\\n      throw error;\\n    }\\n  }\\n  var abi = [\\n    {\\n      inputs: [],\\n      name: \"eip712Domain\",\\n      outputs: [\\n        { name: \"fields\", type: \"bytes1\" },\\n        { name: \"name\", type: \"string\" },\\n        { name: \"version\", type: \"string\" },\\n        { name: \"chainId\", type: \"uint256\" },\\n        { name: \"verifyingContract\", type: \"address\" },\\n        { name: \"salt\", type: \"bytes32\" },\\n        { name: \"extensions\", type: \"uint256[]\" }\\n      ],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    }\\n  ];\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getFeeHistory.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/feeHistory.js\\n  function formatFeeHistory(feeHistory) {\\n    return {\\n      baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\\n      gasUsedRatio: feeHistory.gasUsedRatio,\\n      oldestBlock: BigInt(feeHistory.oldestBlock),\\n      reward: feeHistory.reward?.map((reward) => reward.map((value) => BigInt(value)))\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getFeeHistory.js\\n  async function getFeeHistory(client, { blockCount, blockNumber, blockTag = \"latest\", rewardPercentiles }) {\\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n    const feeHistory = await client.request({\\n      method: \"eth_feeHistory\",\\n      params: [\\n        numberToHex(blockCount),\\n        blockNumberHex || blockTag,\\n        rewardPercentiles\\n      ]\\n    }, { dedupe: Boolean(blockNumberHex) });\\n    return formatFeeHistory(feeHistory);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getFilterLogs.js\\n  async function getFilterLogs(_client, { filter }) {\\n    const strict = filter.strict ?? false;\\n    const logs = await filter.request({\\n      method: \"eth_getFilterLogs\",\\n      params: [filter.id]\\n    });\\n    const formattedLogs = logs.map((log) => formatLog(log));\\n    if (!filter.abi)\\n      return formattedLogs;\\n    return parseEventLogs({\\n      abi: filter.abi,\\n      logs: formattedLogs,\\n      strict\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getProof.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/chain/defineChain.js\\n  function defineChain(chain) {\\n    return {\\n      formatters: void 0,\\n      fees: void 0,\\n      serializers: void 0,\\n      ...chain\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/typedData.js\\n  init_abi();\\n  init_address();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/errors/typedData.js\\n  init_stringify();\\n  init_base();\\n  var InvalidDomainError = class extends BaseError2 {\\n    constructor({ domain }) {\\n      super(`Invalid domain \"${stringify(domain)}\".`, {\\n        metaMessages: [\"Must be a valid EIP-712 domain.\"]\\n      });\\n    }\\n  };\\n  var InvalidPrimaryTypeError = class extends BaseError2 {\\n    constructor({ primaryType, types }) {\\n      super(`Invalid primary type \\\\`${primaryType}\\\\` must be one of \\\\`${JSON.stringify(Object.keys(types))}\\\\`.`, {\\n        docsPath: \"/api/glossary/Errors#typeddatainvalidprimarytypeerror\",\\n        metaMessages: [\"Check that the primary type is a key in `types`.\"]\\n      });\\n    }\\n  };\\n  var InvalidStructTypeError = class extends BaseError2 {\\n    constructor({ type }) {\\n      super(`Struct type \"${type}\" is invalid.`, {\\n        metaMessages: [\"Struct type must not be a Solidity type.\"],\\n        name: \"InvalidStructTypeError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/typedData.js\\n  init_isAddress();\\n  init_size();\\n  init_toHex();\\n  init_regex2();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/hashTypedData.js\\n  init_encodeAbiParameters();\\n  init_concat();\\n  init_toHex();\\n  init_keccak256();\\n  function hashTypedData(parameters) {\\n    const { domain = {}, message, primaryType } = parameters;\\n    const types = {\\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\\n      ...parameters.types\\n    };\\n    validateTypedData({\\n      domain,\\n      message,\\n      primaryType,\\n      types\\n    });\\n    const parts = [\"0x1901\"];\\n    if (domain)\\n      parts.push(hashDomain({\\n        domain,\\n        types\\n      }));\\n    if (primaryType !== \"EIP712Domain\")\\n      parts.push(hashStruct({\\n        data: message,\\n        primaryType,\\n        types\\n      }));\\n    return keccak256(concat(parts));\\n  }\\n  function hashDomain({ domain, types }) {\\n    return hashStruct({\\n      data: domain,\\n      primaryType: \"EIP712Domain\",\\n      types\\n    });\\n  }\\n  function hashStruct({ data, primaryType, types }) {\\n    const encoded = encodeData({\\n      data,\\n      primaryType,\\n      types\\n    });\\n    return keccak256(encoded);\\n  }\\n  function encodeData({ data, primaryType, types }) {\\n    const encodedTypes = [{ type: \"bytes32\" }];\\n    const encodedValues = [hashType({ primaryType, types })];\\n    for (const field of types[primaryType]) {\\n      const [type, value] = encodeField({\\n        types,\\n        name: field.name,\\n        type: field.type,\\n        value: data[field.name]\\n      });\\n      encodedTypes.push(type);\\n      encodedValues.push(value);\\n    }\\n    return encodeAbiParameters(encodedTypes, encodedValues);\\n  }\\n  function hashType({ primaryType, types }) {\\n    const encodedHashType = toHex(encodeType({ primaryType, types }));\\n    return keccak256(encodedHashType);\\n  }\\n  function encodeType({ primaryType, types }) {\\n    let result = \"\";\\n    const unsortedDeps = findTypeDependencies({ primaryType, types });\\n    unsortedDeps.delete(primaryType);\\n    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\\n    for (const type of deps) {\\n      result += `${type}(${types[type].map(({ name, type: t }) => `${t} ${name}`).join(\",\")})`;\\n    }\\n    return result;\\n  }\\n  function findTypeDependencies({ primaryType: primaryType_, types }, results = /* @__PURE__ */ new Set()) {\\n    const match = primaryType_.match(/^\\\\w*/u);\\n    const primaryType = match?.[0];\\n    if (results.has(primaryType) || types[primaryType] === void 0) {\\n      return results;\\n    }\\n    results.add(primaryType);\\n    for (const field of types[primaryType]) {\\n      findTypeDependencies({ primaryType: field.type, types }, results);\\n    }\\n    return results;\\n  }\\n  function encodeField({ types, name, type, value }) {\\n    if (types[type] !== void 0) {\\n      return [\\n        { type: \"bytes32\" },\\n        keccak256(encodeData({ data: value, primaryType: type, types }))\\n      ];\\n    }\\n    if (type === \"bytes\") {\\n      const prepend = value.length % 2 ? \"0\" : \"\";\\n      value = `0x${prepend + value.slice(2)}`;\\n      return [{ type: \"bytes32\" }, keccak256(value)];\\n    }\\n    if (type === \"string\")\\n      return [{ type: \"bytes32\" }, keccak256(toHex(value))];\\n    if (type.lastIndexOf(\"]\") === type.length - 1) {\\n      const parsedType = type.slice(0, type.lastIndexOf(\"[\"));\\n      const typeValuePairs = value.map((item) => encodeField({\\n        name,\\n        type: parsedType,\\n        types,\\n        value: item\\n      }));\\n      return [\\n        { type: \"bytes32\" },\\n        keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))\\n      ];\\n    }\\n    return [{ type }, value];\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/typedData.js\\n  init_stringify();\\n  function serializeTypedData(parameters) {\\n    const { domain: domain_, message: message_, primaryType, types } = parameters;\\n    const normalizeData = (struct, data_) => {\\n      const data = { ...data_ };\\n      for (const param of struct) {\\n        const { name, type } = param;\\n        if (type === \"address\")\\n          data[name] = data[name].toLowerCase();\\n      }\\n      return data;\\n    };\\n    const domain = (() => {\\n      if (!types.EIP712Domain)\\n        return {};\\n      if (!domain_)\\n        return {};\\n      return normalizeData(types.EIP712Domain, domain_);\\n    })();\\n    const message = (() => {\\n      if (primaryType === \"EIP712Domain\")\\n        return void 0;\\n      return normalizeData(types[primaryType], message_);\\n    })();\\n    return stringify({ domain, message, primaryType, types });\\n  }\\n  function validateTypedData(parameters) {\\n    const { domain, message, primaryType, types } = parameters;\\n    const validateData = (struct, data) => {\\n      for (const param of struct) {\\n        const { name, type } = param;\\n        const value = data[name];\\n        const integerMatch = type.match(integerRegex2);\\n        if (integerMatch && (typeof value === \"number\" || typeof value === \"bigint\")) {\\n          const [_type, base2, size_] = integerMatch;\\n          numberToHex(value, {\\n            signed: base2 === \"int\",\\n            size: Number.parseInt(size_) / 8\\n          });\\n        }\\n        if (type === \"address\" && typeof value === \"string\" && !isAddress(value))\\n          throw new InvalidAddressError({ address: value });\\n        const bytesMatch = type.match(bytesRegex2);\\n        if (bytesMatch) {\\n          const [_type, size_] = bytesMatch;\\n          if (size_ && size(value) !== Number.parseInt(size_))\\n            throw new BytesSizeMismatchError({\\n              expectedSize: Number.parseInt(size_),\\n              givenSize: size(value)\\n            });\\n        }\\n        const struct2 = types[type];\\n        if (struct2) {\\n          validateReference(type);\\n          validateData(struct2, value);\\n        }\\n      }\\n    };\\n    if (types.EIP712Domain && domain) {\\n      if (typeof domain !== \"object\")\\n        throw new InvalidDomainError({ domain });\\n      validateData(types.EIP712Domain, domain);\\n    }\\n    if (primaryType !== \"EIP712Domain\") {\\n      if (types[primaryType])\\n        validateData(types[primaryType], message);\\n      else\\n        throw new InvalidPrimaryTypeError({ primaryType, types });\\n    }\\n  }\\n  function getTypesForEIP712Domain({ domain }) {\\n    return [\\n      typeof domain?.name === \"string\" && { name: \"name\", type: \"string\" },\\n      domain?.version && { name: \"version\", type: \"string\" },\\n      (typeof domain?.chainId === \"number\" || typeof domain?.chainId === \"bigint\") && {\\n        name: \"chainId\",\\n        type: \"uint256\"\\n      },\\n      domain?.verifyingContract && {\\n        name: \"verifyingContract\",\\n        type: \"address\"\\n      },\\n      domain?.salt && { name: \"salt\", type: \"bytes32\" }\\n    ].filter(Boolean);\\n  }\\n  function validateReference(type) {\\n    if (type === \"address\" || type === \"bool\" || type === \"string\" || type.startsWith(\"bytes\") || type.startsWith(\"uint\") || type.startsWith(\"int\"))\\n      throw new InvalidStructTypeError({ type });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/index.js\\n  init_encodeFunctionData();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/authorization/serializeAuthorizationList.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/serializeTransaction.js\\n  init_transaction();\\n  init_concat();\\n  init_trim();\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/assertTransaction.js\\n  init_number();\\n  init_address();\\n  init_base();\\n  init_chain();\\n  init_node();\\n  init_isAddress();\\n  init_size();\\n  init_slice();\\n  init_fromHex();\\n  function assertTransactionEIP7702(transaction) {\\n    const { authorizationList } = transaction;\\n    if (authorizationList) {\\n      for (const authorization of authorizationList) {\\n        const { chainId } = authorization;\\n        const address = authorization.address;\\n        if (!isAddress(address))\\n          throw new InvalidAddressError({ address });\\n        if (chainId < 0)\\n          throw new InvalidChainIdError({ chainId });\\n      }\\n    }\\n    assertTransactionEIP1559(transaction);\\n  }\\n  function assertTransactionEIP4844(transaction) {\\n    const { blobVersionedHashes } = transaction;\\n    if (blobVersionedHashes) {\\n      if (blobVersionedHashes.length === 0)\\n        throw new EmptyBlobError();\\n      for (const hash2 of blobVersionedHashes) {\\n        const size_ = size(hash2);\\n        const version4 = hexToNumber(slice(hash2, 0, 1));\\n        if (size_ !== 32)\\n          throw new InvalidVersionedHashSizeError({ hash: hash2, size: size_ });\\n        if (version4 !== versionedHashVersionKzg)\\n          throw new InvalidVersionedHashVersionError({\\n            hash: hash2,\\n            version: version4\\n          });\\n      }\\n    }\\n    assertTransactionEIP1559(transaction);\\n  }\\n  function assertTransactionEIP1559(transaction) {\\n    const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;\\n    if (chainId <= 0)\\n      throw new InvalidChainIdError({ chainId });\\n    if (to && !isAddress(to))\\n      throw new InvalidAddressError({ address: to });\\n    if (maxFeePerGas && maxFeePerGas > maxUint256)\\n      throw new FeeCapTooHighError({ maxFeePerGas });\\n    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)\\n      throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\\n  }\\n  function assertTransactionEIP2930(transaction) {\\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;\\n    if (chainId <= 0)\\n      throw new InvalidChainIdError({ chainId });\\n    if (to && !isAddress(to))\\n      throw new InvalidAddressError({ address: to });\\n    if (maxPriorityFeePerGas || maxFeePerGas)\\n      throw new BaseError2(\"`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.\");\\n    if (gasPrice && gasPrice > maxUint256)\\n      throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\\n  }\\n  function assertTransactionLegacy(transaction) {\\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;\\n    if (to && !isAddress(to))\\n      throw new InvalidAddressError({ address: to });\\n    if (typeof chainId !== \"undefined\" && chainId <= 0)\\n      throw new InvalidChainIdError({ chainId });\\n    if (maxPriorityFeePerGas || maxFeePerGas)\\n      throw new BaseError2(\"`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.\");\\n    if (gasPrice && gasPrice > maxUint256)\\n      throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/serializeAccessList.js\\n  init_address();\\n  init_transaction();\\n  init_isAddress();\\n  function serializeAccessList(accessList) {\\n    if (!accessList || accessList.length === 0)\\n      return [];\\n    const serializedAccessList = [];\\n    for (let i = 0; i < accessList.length; i++) {\\n      const { address, storageKeys } = accessList[i];\\n      for (let j = 0; j < storageKeys.length; j++) {\\n        if (storageKeys[j].length - 2 !== 64) {\\n          throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] });\\n        }\\n      }\\n      if (!isAddress(address, { strict: false })) {\\n        throw new InvalidAddressError({ address });\\n      }\\n      serializedAccessList.push([address, storageKeys]);\\n    }\\n    return serializedAccessList;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/transaction/serializeTransaction.js\\n  function serializeTransaction(transaction, signature) {\\n    const type = getTransactionType(transaction);\\n    if (type === \"eip1559\")\\n      return serializeTransactionEIP1559(transaction, signature);\\n    if (type === \"eip2930\")\\n      return serializeTransactionEIP2930(transaction, signature);\\n    if (type === \"eip4844\")\\n      return serializeTransactionEIP4844(transaction, signature);\\n    if (type === \"eip7702\")\\n      return serializeTransactionEIP7702(transaction, signature);\\n    return serializeTransactionLegacy(transaction, signature);\\n  }\\n  function serializeTransactionEIP7702(transaction, signature) {\\n    const { authorizationList, chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;\\n    assertTransactionEIP7702(transaction);\\n    const serializedAccessList = serializeAccessList(accessList);\\n    const serializedAuthorizationList = serializeAuthorizationList(authorizationList);\\n    return concatHex([\\n      \"0x04\",\\n      toRlp([\\n        toHex(chainId),\\n        nonce ? toHex(nonce) : \"0x\",\\n        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\\n        maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\\n        gas ? toHex(gas) : \"0x\",\\n        to ?? \"0x\",\\n        value ? toHex(value) : \"0x\",\\n        data ?? \"0x\",\\n        serializedAccessList,\\n        serializedAuthorizationList,\\n        ...toYParitySignatureArray(transaction, signature)\\n      ])\\n    ]);\\n  }\\n  function serializeTransactionEIP4844(transaction, signature) {\\n    const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;\\n    assertTransactionEIP4844(transaction);\\n    let blobVersionedHashes = transaction.blobVersionedHashes;\\n    let sidecars = transaction.sidecars;\\n    if (transaction.blobs && (typeof blobVersionedHashes === \"undefined\" || typeof sidecars === \"undefined\")) {\\n      const blobs2 = typeof transaction.blobs[0] === \"string\" ? transaction.blobs : transaction.blobs.map((x) => bytesToHex(x));\\n      const kzg = transaction.kzg;\\n      const commitments2 = blobsToCommitments({\\n        blobs: blobs2,\\n        kzg\\n      });\\n      if (typeof blobVersionedHashes === \"undefined\")\\n        blobVersionedHashes = commitmentsToVersionedHashes({\\n          commitments: commitments2\\n        });\\n      if (typeof sidecars === \"undefined\") {\\n        const proofs2 = blobsToProofs({ blobs: blobs2, commitments: commitments2, kzg });\\n        sidecars = toBlobSidecars({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });\\n      }\\n    }\\n    const serializedAccessList = serializeAccessList(accessList);\\n    const serializedTransaction = [\\n      toHex(chainId),\\n      nonce ? toHex(nonce) : \"0x\",\\n      maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\\n      maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\\n      gas ? toHex(gas) : \"0x\",\\n      to ?? \"0x\",\\n      value ? toHex(value) : \"0x\",\\n      data ?? \"0x\",\\n      serializedAccessList,\\n      maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : \"0x\",\\n      blobVersionedHashes ?? [],\\n      ...toYParitySignatureArray(transaction, signature)\\n    ];\\n    const blobs = [];\\n    const commitments = [];\\n    const proofs = [];\\n    if (sidecars)\\n      for (let i = 0; i < sidecars.length; i++) {\\n        const { blob, commitment, proof } = sidecars[i];\\n        blobs.push(blob);\\n        commitments.push(commitment);\\n        proofs.push(proof);\\n      }\\n    return concatHex([\\n      \"0x03\",\\n      sidecars ? (\\n        // If sidecars are enabled, envelope turns into a \"wrapper\":\\n        toRlp([serializedTransaction, blobs, commitments, proofs])\\n      ) : (\\n        // If sidecars are disabled, standard envelope is used:\\n        toRlp(serializedTransaction)\\n      )\\n    ]);\\n  }\\n  function serializeTransactionEIP1559(transaction, signature) {\\n    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;\\n    assertTransactionEIP1559(transaction);\\n    const serializedAccessList = serializeAccessList(accessList);\\n    const serializedTransaction = [\\n      toHex(chainId),\\n      nonce ? toHex(nonce) : \"0x\",\\n      maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\\n      maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\\n      gas ? toHex(gas) : \"0x\",\\n      to ?? \"0x\",\\n      value ? toHex(value) : \"0x\",\\n      data ?? \"0x\",\\n      serializedAccessList,\\n      ...toYParitySignatureArray(transaction, signature)\\n    ];\\n    return concatHex([\\n      \"0x02\",\\n      toRlp(serializedTransaction)\\n    ]);\\n  }\\n  function serializeTransactionEIP2930(transaction, signature) {\\n    const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;\\n    assertTransactionEIP2930(transaction);\\n    const serializedAccessList = serializeAccessList(accessList);\\n    const serializedTransaction = [\\n      toHex(chainId),\\n      nonce ? toHex(nonce) : \"0x\",\\n      gasPrice ? toHex(gasPrice) : \"0x\",\\n      gas ? toHex(gas) : \"0x\",\\n      to ?? \"0x\",\\n      value ? toHex(value) : \"0x\",\\n      data ?? \"0x\",\\n      serializedAccessList,\\n      ...toYParitySignatureArray(transaction, signature)\\n    ];\\n    return concatHex([\\n      \"0x01\",\\n      toRlp(serializedTransaction)\\n    ]);\\n  }\\n  function serializeTransactionLegacy(transaction, signature) {\\n    const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;\\n    assertTransactionLegacy(transaction);\\n    let serializedTransaction = [\\n      nonce ? toHex(nonce) : \"0x\",\\n      gasPrice ? toHex(gasPrice) : \"0x\",\\n      gas ? toHex(gas) : \"0x\",\\n      to ?? \"0x\",\\n      value ? toHex(value) : \"0x\",\\n      data ?? \"0x\"\\n    ];\\n    if (signature) {\\n      const v = (() => {\\n        if (signature.v >= 35n) {\\n          const inferredChainId = (signature.v - 35n) / 2n;\\n          if (inferredChainId > 0)\\n            return signature.v;\\n          return 27n + (signature.v === 35n ? 0n : 1n);\\n        }\\n        if (chainId > 0)\\n          return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\\n        const v2 = 27n + (signature.v === 27n ? 0n : 1n);\\n        if (signature.v !== v2)\\n          throw new InvalidLegacyVError({ v: signature.v });\\n        return v2;\\n      })();\\n      const r = trim(signature.r);\\n      const s = trim(signature.s);\\n      serializedTransaction = [\\n        ...serializedTransaction,\\n        toHex(v),\\n        r === \"0x00\" ? \"0x\" : r,\\n        s === \"0x00\" ? \"0x\" : s\\n      ];\\n    } else if (chainId > 0) {\\n      serializedTransaction = [\\n        ...serializedTransaction,\\n        toHex(chainId),\\n        \"0x\",\\n        \"0x\"\\n      ];\\n    }\\n    return toRlp(serializedTransaction);\\n  }\\n  function toYParitySignatureArray(transaction, signature_) {\\n    const signature = signature_ ?? transaction;\\n    const { v, yParity } = signature;\\n    if (typeof signature.r === \"undefined\")\\n      return [];\\n    if (typeof signature.s === \"undefined\")\\n      return [];\\n    if (typeof v === \"undefined\" && typeof yParity === \"undefined\")\\n      return [];\\n    const r = trim(signature.r);\\n    const s = trim(signature.s);\\n    const yParity_ = (() => {\\n      if (typeof yParity === \"number\")\\n        return yParity ? toHex(1) : \"0x\";\\n      if (v === 0n)\\n        return \"0x\";\\n      if (v === 1n)\\n        return toHex(1);\\n      return v === 27n ? \"0x\" : toHex(1);\\n    })();\\n    return [yParity_, r === \"0x00\" ? \"0x\" : r, s === \"0x00\" ? \"0x\" : s];\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/authorization/serializeAuthorizationList.js\\n  function serializeAuthorizationList(authorizationList) {\\n    if (!authorizationList || authorizationList.length === 0)\\n      return [];\\n    const serializedAuthorizationList = [];\\n    for (const authorization of authorizationList) {\\n      const { chainId, nonce, ...signature } = authorization;\\n      const contractAddress = authorization.address;\\n      serializedAuthorizationList.push([\\n        chainId ? toHex(chainId) : \"0x\",\\n        contractAddress,\\n        nonce ? toHex(nonce) : \"0x\",\\n        ...toYParitySignatureArray({}, signature)\\n      ]);\\n    }\\n    return serializedAuthorizationList;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/transactionReceipt.js\\n  init_fromHex();\\n  init_formatter();\\n  var receiptStatuses = {\\n    \"0x0\": \"reverted\",\\n    \"0x1\": \"success\"\\n  };\\n  function formatTransactionReceipt(transactionReceipt) {\\n    const receipt = {\\n      ...transactionReceipt,\\n      blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,\\n      contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,\\n      cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,\\n      effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,\\n      gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,\\n      logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,\\n      to: transactionReceipt.to ? transactionReceipt.to : null,\\n      transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,\\n      status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,\\n      type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null\\n    };\\n    if (transactionReceipt.blobGasPrice)\\n      receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);\\n    if (transactionReceipt.blobGasUsed)\\n      receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);\\n    return receipt;\\n  }\\n  var defineTransactionReceipt = /* @__PURE__ */ defineFormatter(\"transactionReceipt\", formatTransactionReceipt);\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/index.js\\n  init_fromHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/hashMessage.js\\n  init_keccak256();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/strings.js\\n  var presignMessagePrefix = \"\u0019Ethereum Signed Message:\\\\n\";\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/toPrefixedMessage.js\\n  init_concat();\\n  init_size();\\n  init_toHex();\\n  function toPrefixedMessage(message_) {\\n    const message = (() => {\\n      if (typeof message_ === \"string\")\\n        return stringToHex(message_);\\n      if (typeof message_.raw === \"string\")\\n        return message_.raw;\\n      return bytesToHex(message_.raw);\\n    })();\\n    const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`);\\n    return concat([prefix, message]);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/hashMessage.js\\n  function hashMessage(message, to_) {\\n    return keccak256(toPrefixedMessage(message), to_);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/bytes.js\\n  var erc6492MagicBytes = \"0x6492649264926492649264926492649264926492649264926492649264926492\";\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/isErc6492Signature.js\\n  init_slice();\\n  function isErc6492Signature(signature) {\\n    return sliceHex(signature, -32) === erc6492MagicBytes;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/serializeErc6492Signature.js\\n  init_encodeAbiParameters();\\n  init_concat();\\n  init_toBytes();\\n  function serializeErc6492Signature(parameters) {\\n    const { address, data, signature, to = \"hex\" } = parameters;\\n    const signature_ = concatHex([\\n      encodeAbiParameters([{ type: \"address\" }, { type: \"bytes\" }, { type: \"bytes\" }], [address, data, signature]),\\n      erc6492MagicBytes\\n    ]);\\n    if (to === \"hex\")\\n      return signature_;\\n    return hexToBytes(signature_);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/formatters/proof.js\\n  function formatStorageProof(storageProof) {\\n    return storageProof.map((proof) => ({\\n      ...proof,\\n      value: BigInt(proof.value)\\n    }));\\n  }\\n  function formatProof(proof) {\\n    return {\\n      ...proof,\\n      balance: proof.balance ? BigInt(proof.balance) : void 0,\\n      nonce: proof.nonce ? hexToNumber(proof.nonce) : void 0,\\n      storageProof: proof.storageProof ? formatStorageProof(proof.storageProof) : void 0\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getProof.js\\n  async function getProof(client, { address, blockNumber, blockTag: blockTag_, storageKeys }) {\\n    const blockTag = blockTag_ ?? \"latest\";\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    const proof = await client.request({\\n      method: \"eth_getProof\",\\n      params: [address, storageKeys, blockNumberHex || blockTag]\\n    });\\n    return formatProof(proof);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getStorageAt.js\\n  init_toHex();\\n  async function getStorageAt(client, { address, blockNumber, blockTag = \"latest\", slot }) {\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    const data = await client.request({\\n      method: \"eth_getStorageAt\",\\n      params: [address, slot, blockNumberHex || blockTag]\\n    });\\n    return data;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getTransaction.js\\n  init_transaction();\\n  init_toHex();\\n  async function getTransaction(client, { blockHash, blockNumber, blockTag: blockTag_, hash: hash2, index: index2 }) {\\n    const blockTag = blockTag_ || \"latest\";\\n    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;\\n    let transaction = null;\\n    if (hash2) {\\n      transaction = await client.request({\\n        method: \"eth_getTransactionByHash\",\\n        params: [hash2]\\n      }, { dedupe: true });\\n    } else if (blockHash) {\\n      transaction = await client.request({\\n        method: \"eth_getTransactionByBlockHashAndIndex\",\\n        params: [blockHash, numberToHex(index2)]\\n      }, { dedupe: true });\\n    } else if (blockNumberHex || blockTag) {\\n      transaction = await client.request({\\n        method: \"eth_getTransactionByBlockNumberAndIndex\",\\n        params: [blockNumberHex || blockTag, numberToHex(index2)]\\n      }, { dedupe: Boolean(blockNumberHex) });\\n    }\\n    if (!transaction)\\n      throw new TransactionNotFoundError({\\n        blockHash,\\n        blockNumber,\\n        blockTag,\\n        hash: hash2,\\n        index: index2\\n      });\\n    const format = client.chain?.formatters?.transaction?.format || formatTransaction;\\n    return format(transaction);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getTransactionConfirmations.js\\n  async function getTransactionConfirmations(client, { hash: hash2, transactionReceipt }) {\\n    const [blockNumber, transaction] = await Promise.all([\\n      getAction(client, getBlockNumber, \"getBlockNumber\")({}),\\n      hash2 ? getAction(client, getTransaction, \"getTransaction\")({ hash: hash2 }) : void 0\\n    ]);\\n    const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;\\n    if (!transactionBlockNumber)\\n      return 0n;\\n    return blockNumber - transactionBlockNumber + 1n;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/getTransactionReceipt.js\\n  init_transaction();\\n  async function getTransactionReceipt(client, { hash: hash2 }) {\\n    const receipt = await client.request({\\n      method: \"eth_getTransactionReceipt\",\\n      params: [hash2]\\n    }, { dedupe: true });\\n    if (!receipt)\\n      throw new TransactionReceiptNotFoundError({ hash: hash2 });\\n    const format = client.chain?.formatters?.transactionReceipt?.format || formatTransactionReceipt;\\n    return format(receipt);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/multicall.js\\n  init_abis();\\n  init_abi();\\n  init_base();\\n  init_contract();\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_getChainContractAddress();\\n  async function multicall(client, parameters) {\\n    const { allowFailure = true, batchSize: batchSize_, blockNumber, blockTag, multicallAddress: multicallAddress_, stateOverride } = parameters;\\n    const contracts2 = parameters.contracts;\\n    const batchSize = batchSize_ ?? (typeof client.batch?.multicall === \"object\" && client.batch.multicall.batchSize || 1024);\\n    let multicallAddress = multicallAddress_;\\n    if (!multicallAddress) {\\n      if (!client.chain)\\n        throw new Error(\"client chain not configured. multicallAddress is required.\");\\n      multicallAddress = getChainContractAddress({\\n        blockNumber,\\n        chain: client.chain,\\n        contract: \"multicall3\"\\n      });\\n    }\\n    const chunkedCalls = [[]];\\n    let currentChunk = 0;\\n    let currentChunkSize = 0;\\n    for (let i = 0; i < contracts2.length; i++) {\\n      const { abi: abi2, address, args, functionName } = contracts2[i];\\n      try {\\n        const callData = encodeFunctionData({ abi: abi2, args, functionName });\\n        currentChunkSize += (callData.length - 2) / 2;\\n        if (\\n          // Check if batching is enabled.\\n          batchSize > 0 && // Check if the current size of the batch exceeds the size limit.\\n          currentChunkSize > batchSize && // Check if the current chunk is not already empty.\\n          chunkedCalls[currentChunk].length > 0\\n        ) {\\n          currentChunk++;\\n          currentChunkSize = (callData.length - 2) / 2;\\n          chunkedCalls[currentChunk] = [];\\n        }\\n        chunkedCalls[currentChunk] = [\\n          ...chunkedCalls[currentChunk],\\n          {\\n            allowFailure: true,\\n            callData,\\n            target: address\\n          }\\n        ];\\n      } catch (err) {\\n        const error = getContractError(err, {\\n          abi: abi2,\\n          address,\\n          args,\\n          docsPath: \"/docs/contract/multicall\",\\n          functionName\\n        });\\n        if (!allowFailure)\\n          throw error;\\n        chunkedCalls[currentChunk] = [\\n          ...chunkedCalls[currentChunk],\\n          {\\n            allowFailure: true,\\n            callData: \"0x\",\\n            target: address\\n          }\\n        ];\\n      }\\n    }\\n    const aggregate3Results = await Promise.allSettled(chunkedCalls.map((calls) => getAction(client, readContract, \"readContract\")({\\n      abi: multicall3Abi,\\n      address: multicallAddress,\\n      args: [calls],\\n      blockNumber,\\n      blockTag,\\n      functionName: \"aggregate3\",\\n      stateOverride\\n    })));\\n    const results = [];\\n    for (let i = 0; i < aggregate3Results.length; i++) {\\n      const result = aggregate3Results[i];\\n      if (result.status === \"rejected\") {\\n        if (!allowFailure)\\n          throw result.reason;\\n        for (let j = 0; j < chunkedCalls[i].length; j++) {\\n          results.push({\\n            status: \"failure\",\\n            error: result.reason,\\n            result: void 0\\n          });\\n        }\\n        continue;\\n      }\\n      const aggregate3Result = result.value;\\n      for (let j = 0; j < aggregate3Result.length; j++) {\\n        const { returnData, success } = aggregate3Result[j];\\n        const { callData } = chunkedCalls[i][j];\\n        const { abi: abi2, address, functionName, args } = contracts2[results.length];\\n        try {\\n          if (callData === \"0x\")\\n            throw new AbiDecodingZeroDataError();\\n          if (!success)\\n            throw new RawContractError({ data: returnData });\\n          const result2 = decodeFunctionResult({\\n            abi: abi2,\\n            args,\\n            data: returnData,\\n            functionName\\n          });\\n          results.push(allowFailure ? { result: result2, status: \"success\" } : result2);\\n        } catch (err) {\\n          const error = getContractError(err, {\\n            abi: abi2,\\n            address,\\n            args,\\n            docsPath: \"/docs/contract/multicall\",\\n            functionName\\n          });\\n          if (!allowFailure)\\n            throw error;\\n          results.push({ error, result: void 0, status: \"failure\" });\\n        }\\n      }\\n    }\\n    if (results.length !== contracts2.length)\\n      throw new BaseError2(\"multicall results mismatch\");\\n    return results;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/version.js\\n  var version3 = \"0.1.1\";\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/errors.js\\n  function getVersion() {\\n    return version3;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Errors.js\\n  var BaseError3 = class _BaseError extends Error {\\n    constructor(shortMessage, options = {}) {\\n      const details = (() => {\\n        if (options.cause instanceof _BaseError) {\\n          if (options.cause.details)\\n            return options.cause.details;\\n          if (options.cause.shortMessage)\\n            return options.cause.shortMessage;\\n        }\\n        if (options.cause?.message)\\n          return options.cause.message;\\n        return options.details;\\n      })();\\n      const docsPath8 = (() => {\\n        if (options.cause instanceof _BaseError)\\n          return options.cause.docsPath || options.docsPath;\\n        return options.docsPath;\\n      })();\\n      const docsBaseUrl = \"https://oxlib.sh\";\\n      const docs = `${docsBaseUrl}${docsPath8 ?? \"\"}`;\\n      const message = [\\n        shortMessage || \"An error occurred.\",\\n        ...options.metaMessages ? [\"\", ...options.metaMessages] : [],\\n        ...details || docsPath8 ? [\\n          \"\",\\n          details ? `Details: ${details}` : void 0,\\n          docsPath8 ? `See: ${docs}` : void 0\\n        ] : []\\n      ].filter((x) => typeof x === \"string\").join(\"\\\\n\");\\n      super(message, options.cause ? { cause: options.cause } : void 0);\\n      Object.defineProperty(this, \"details\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      Object.defineProperty(this, \"docs\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      Object.defineProperty(this, \"docsPath\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      Object.defineProperty(this, \"shortMessage\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      Object.defineProperty(this, \"cause\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"BaseError\"\\n      });\\n      Object.defineProperty(this, \"version\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: `ox@${getVersion()}`\\n      });\\n      this.cause = options.cause;\\n      this.details = details;\\n      this.docs = docs;\\n      this.docsPath = docsPath8;\\n      this.shortMessage = shortMessage;\\n    }\\n    walk(fn) {\\n      return walk2(this, fn);\\n    }\\n  };\\n  function walk2(err, fn) {\\n    if (fn?.(err))\\n      return err;\\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause)\\n      return walk2(err.cause, fn);\\n    return fn ? null : err;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Json.js\\n  var bigIntSuffix = \"#__bigint\";\\n  function stringify2(value, replacer, space) {\\n    return JSON.stringify(value, (key, value2) => {\\n      if (typeof replacer === \"function\")\\n        return replacer(key, value2);\\n      if (typeof value2 === \"bigint\")\\n        return value2.toString() + bigIntSuffix;\\n      return value2;\\n    }, space);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/bytes.js\\n  function assertSize2(bytes, size_) {\\n    if (size3(bytes) > size_)\\n      throw new SizeOverflowError2({\\n        givenSize: size3(bytes),\\n        maxSize: size_\\n      });\\n  }\\n  var charCodeMap2 = {\\n    zero: 48,\\n    nine: 57,\\n    A: 65,\\n    F: 70,\\n    a: 97,\\n    f: 102\\n  };\\n  function charCodeToBase162(char) {\\n    if (char >= charCodeMap2.zero && char <= charCodeMap2.nine)\\n      return char - charCodeMap2.zero;\\n    if (char >= charCodeMap2.A && char <= charCodeMap2.F)\\n      return char - (charCodeMap2.A - 10);\\n    if (char >= charCodeMap2.a && char <= charCodeMap2.f)\\n      return char - (charCodeMap2.a - 10);\\n    return void 0;\\n  }\\n  function pad2(bytes, options = {}) {\\n    const { dir, size: size5 = 32 } = options;\\n    if (size5 === 0)\\n      return bytes;\\n    if (bytes.length > size5)\\n      throw new SizeExceedsPaddingSizeError2({\\n        size: bytes.length,\\n        targetSize: size5,\\n        type: \"Bytes\"\\n      });\\n    const paddedBytes = new Uint8Array(size5);\\n    for (let i = 0; i < size5; i++) {\\n      const padEnd = dir === \"right\";\\n      paddedBytes[padEnd ? i : size5 - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\\n    }\\n    return paddedBytes;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/hex.js\\n  function assertSize3(hex, size_) {\\n    if (size4(hex) > size_)\\n      throw new SizeOverflowError3({\\n        givenSize: size4(hex),\\n        maxSize: size_\\n      });\\n  }\\n  function assertStartOffset2(value, start) {\\n    if (typeof start === \"number\" && start > 0 && start > size4(value) - 1)\\n      throw new SliceOffsetOutOfBoundsError3({\\n        offset: start,\\n        position: \"start\",\\n        size: size4(value)\\n      });\\n  }\\n  function assertEndOffset2(value, start, end) {\\n    if (typeof start === \"number\" && typeof end === \"number\" && size4(value) !== end - start) {\\n      throw new SliceOffsetOutOfBoundsError3({\\n        offset: end,\\n        position: \"end\",\\n        size: size4(value)\\n      });\\n    }\\n  }\\n  function pad3(hex_, options = {}) {\\n    const { dir, size: size5 = 32 } = options;\\n    if (size5 === 0)\\n      return hex_;\\n    const hex = hex_.replace(\"0x\", \"\");\\n    if (hex.length > size5 * 2)\\n      throw new SizeExceedsPaddingSizeError3({\\n        size: Math.ceil(hex.length / 2),\\n        targetSize: size5,\\n        type: \"Hex\"\\n      });\\n    return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size5 * 2, \"0\")}`;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Bytes.js\\n  var encoder3 = /* @__PURE__ */ new TextEncoder();\\n  function from(value) {\\n    if (value instanceof Uint8Array)\\n      return value;\\n    if (typeof value === \"string\")\\n      return fromHex2(value);\\n    return fromArray(value);\\n  }\\n  function fromArray(value) {\\n    return value instanceof Uint8Array ? value : new Uint8Array(value);\\n  }\\n  function fromHex2(value, options = {}) {\\n    const { size: size5 } = options;\\n    let hex = value;\\n    if (size5) {\\n      assertSize3(value, size5);\\n      hex = padRight(value, size5);\\n    }\\n    let hexString = hex.slice(2);\\n    if (hexString.length % 2)\\n      hexString = `0${hexString}`;\\n    const length = hexString.length / 2;\\n    const bytes = new Uint8Array(length);\\n    for (let index2 = 0, j = 0; index2 < length; index2++) {\\n      const nibbleLeft = charCodeToBase162(hexString.charCodeAt(j++));\\n      const nibbleRight = charCodeToBase162(hexString.charCodeAt(j++));\\n      if (nibbleLeft === void 0 || nibbleRight === void 0) {\\n        throw new BaseError3(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\\n      }\\n      bytes[index2] = nibbleLeft * 16 + nibbleRight;\\n    }\\n    return bytes;\\n  }\\n  function fromString(value, options = {}) {\\n    const { size: size5 } = options;\\n    const bytes = encoder3.encode(value);\\n    if (typeof size5 === \"number\") {\\n      assertSize2(bytes, size5);\\n      return padRight2(bytes, size5);\\n    }\\n    return bytes;\\n  }\\n  function padRight2(value, size5) {\\n    return pad2(value, { dir: \"right\", size: size5 });\\n  }\\n  function size3(value) {\\n    return value.length;\\n  }\\n  var SizeOverflowError2 = class extends BaseError3 {\\n    constructor({ givenSize, maxSize }) {\\n      super(`Size cannot exceed \\\\`${maxSize}\\\\` bytes. Given size: \\\\`${givenSize}\\\\` bytes.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Bytes.SizeOverflowError\"\\n      });\\n    }\\n  };\\n  var SizeExceedsPaddingSizeError2 = class extends BaseError3 {\\n    constructor({ size: size5, targetSize, type }) {\\n      super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\\\\`${size5}\\\\`) exceeds padding size (\\\\`${targetSize}\\\\`).`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Bytes.SizeExceedsPaddingSizeError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Hex.js\\n  var encoder4 = /* @__PURE__ */ new TextEncoder();\\n  var hexes3 = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, \"0\"));\\n  function assert(value, options = {}) {\\n    const { strict = false } = options;\\n    if (!value)\\n      throw new InvalidHexTypeError(value);\\n    if (typeof value !== \"string\")\\n      throw new InvalidHexTypeError(value);\\n    if (strict) {\\n      if (!/^0x[0-9a-fA-F]*$/.test(value))\\n        throw new InvalidHexValueError(value);\\n    }\\n    if (!value.startsWith(\"0x\"))\\n      throw new InvalidHexValueError(value);\\n  }\\n  function concat2(...values) {\\n    return `0x${values.reduce((acc, x) => acc + x.replace(\"0x\", \"\"), \"\")}`;\\n  }\\n  function fromBoolean(value, options = {}) {\\n    const hex = `0x${Number(value)}`;\\n    if (typeof options.size === \"number\") {\\n      assertSize3(hex, options.size);\\n      return padLeft(hex, options.size);\\n    }\\n    return hex;\\n  }\\n  function fromBytes(value, options = {}) {\\n    let string = \"\";\\n    for (let i = 0; i < value.length; i++)\\n      string += hexes3[value[i]];\\n    const hex = `0x${string}`;\\n    if (typeof options.size === \"number\") {\\n      assertSize3(hex, options.size);\\n      return padRight(hex, options.size);\\n    }\\n    return hex;\\n  }\\n  function fromNumber(value, options = {}) {\\n    const { signed, size: size5 } = options;\\n    const value_ = BigInt(value);\\n    let maxValue;\\n    if (size5) {\\n      if (signed)\\n        maxValue = (1n << BigInt(size5) * 8n - 1n) - 1n;\\n      else\\n        maxValue = 2n ** (BigInt(size5) * 8n) - 1n;\\n    } else if (typeof value === \"number\") {\\n      maxValue = BigInt(Number.MAX_SAFE_INTEGER);\\n    }\\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\\n    if (maxValue && value_ > maxValue || value_ < minValue) {\\n      const suffix = typeof value === \"bigint\" ? \"n\" : \"\";\\n      throw new IntegerOutOfRangeError2({\\n        max: maxValue ? `${maxValue}${suffix}` : void 0,\\n        min: `${minValue}${suffix}`,\\n        signed,\\n        size: size5,\\n        value: `${value}${suffix}`\\n      });\\n    }\\n    const stringValue = (signed && value_ < 0 ? (1n << BigInt(size5 * 8)) + BigInt(value_) : value_).toString(16);\\n    const hex = `0x${stringValue}`;\\n    if (size5)\\n      return padLeft(hex, size5);\\n    return hex;\\n  }\\n  function fromString2(value, options = {}) {\\n    return fromBytes(encoder4.encode(value), options);\\n  }\\n  function padLeft(value, size5) {\\n    return pad3(value, { dir: \"left\", size: size5 });\\n  }\\n  function padRight(value, size5) {\\n    return pad3(value, { dir: \"right\", size: size5 });\\n  }\\n  function slice2(value, start, end, options = {}) {\\n    const { strict } = options;\\n    assertStartOffset2(value, start);\\n    const value_ = `0x${value.replace(\"0x\", \"\").slice((start ?? 0) * 2, (end ?? value.length) * 2)}`;\\n    if (strict)\\n      assertEndOffset2(value_, start, end);\\n    return value_;\\n  }\\n  function size4(value) {\\n    return Math.ceil((value.length - 2) / 2);\\n  }\\n  function validate(value, options = {}) {\\n    const { strict = false } = options;\\n    try {\\n      assert(value, { strict });\\n      return true;\\n    } catch {\\n      return false;\\n    }\\n  }\\n  var IntegerOutOfRangeError2 = class extends BaseError3 {\\n    constructor({ max, min, signed, size: size5, value }) {\\n      super(`Number \\\\`${value}\\\\` is not in safe${size5 ? ` ${size5 * 8}-bit` : \"\"}${signed ? \" signed\" : \" unsigned\"} integer range ${max ? `(\\\\`${min}\\\\` to \\\\`${max}\\\\`)` : `(above \\\\`${min}\\\\`)`}`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.IntegerOutOfRangeError\"\\n      });\\n    }\\n  };\\n  var InvalidHexTypeError = class extends BaseError3 {\\n    constructor(value) {\\n      super(`Value \\\\`${typeof value === \"object\" ? stringify2(value) : value}\\\\` of type \\\\`${typeof value}\\\\` is an invalid hex type.`, {\\n        metaMessages: [\\'Hex types must be represented as `\"0x${string}\"`.\\']\\n      });\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.InvalidHexTypeError\"\\n      });\\n    }\\n  };\\n  var InvalidHexValueError = class extends BaseError3 {\\n    constructor(value) {\\n      super(`Value \\\\`${value}\\\\` is an invalid hex value.`, {\\n        metaMessages: [\\n          \\'Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).\\'\\n        ]\\n      });\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.InvalidHexValueError\"\\n      });\\n    }\\n  };\\n  var SizeOverflowError3 = class extends BaseError3 {\\n    constructor({ givenSize, maxSize }) {\\n      super(`Size cannot exceed \\\\`${maxSize}\\\\` bytes. Given size: \\\\`${givenSize}\\\\` bytes.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.SizeOverflowError\"\\n      });\\n    }\\n  };\\n  var SliceOffsetOutOfBoundsError3 = class extends BaseError3 {\\n    constructor({ offset, position, size: size5 }) {\\n      super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \\\\`${offset}\\\\` is out-of-bounds (size: \\\\`${size5}\\\\`).`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.SliceOffsetOutOfBoundsError\"\\n      });\\n    }\\n  };\\n  var SizeExceedsPaddingSizeError3 = class extends BaseError3 {\\n    constructor({ size: size5, targetSize, type }) {\\n      super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\\\\`${size5}\\\\`) exceeds padding size (\\\\`${targetSize}\\\\`).`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Hex.SizeExceedsPaddingSizeError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Withdrawal.js\\n  function toRpc(withdrawal) {\\n    return {\\n      address: withdrawal.address,\\n      amount: fromNumber(withdrawal.amount),\\n      index: fromNumber(withdrawal.index),\\n      validatorIndex: fromNumber(withdrawal.validatorIndex)\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/BlockOverrides.js\\n  function toRpc2(blockOverrides) {\\n    return {\\n      ...typeof blockOverrides.baseFeePerGas === \"bigint\" && {\\n        baseFeePerGas: fromNumber(blockOverrides.baseFeePerGas)\\n      },\\n      ...typeof blockOverrides.blobBaseFee === \"bigint\" && {\\n        blobBaseFee: fromNumber(blockOverrides.blobBaseFee)\\n      },\\n      ...typeof blockOverrides.feeRecipient === \"string\" && {\\n        feeRecipient: blockOverrides.feeRecipient\\n      },\\n      ...typeof blockOverrides.gasLimit === \"bigint\" && {\\n        gasLimit: fromNumber(blockOverrides.gasLimit)\\n      },\\n      ...typeof blockOverrides.number === \"bigint\" && {\\n        number: fromNumber(blockOverrides.number)\\n      },\\n      ...typeof blockOverrides.prevRandao === \"bigint\" && {\\n        prevRandao: fromNumber(blockOverrides.prevRandao)\\n      },\\n      ...typeof blockOverrides.time === \"bigint\" && {\\n        time: fromNumber(blockOverrides.time)\\n      },\\n      ...blockOverrides.withdrawals && {\\n        withdrawals: blockOverrides.withdrawals.map(toRpc)\\n      }\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/simulateBlocks.js\\n  init_parseAccount();\\n  init_abi();\\n  init_contract();\\n  init_node();\\n  init_decodeFunctionResult();\\n  init_encodeFunctionData();\\n  init_toHex();\\n  init_getNodeError();\\n  init_transactionRequest();\\n  init_stateOverride2();\\n  init_assertRequest();\\n  async function simulateBlocks(client, parameters) {\\n    const { blockNumber, blockTag = \"latest\", blocks, returnFullTransactions, traceTransfers, validation } = parameters;\\n    try {\\n      const blockStateCalls = [];\\n      for (const block2 of blocks) {\\n        const blockOverrides = block2.blockOverrides ? toRpc2(block2.blockOverrides) : void 0;\\n        const calls = block2.calls.map((call_) => {\\n          const call2 = call_;\\n          const account = call2.account ? parseAccount(call2.account) : void 0;\\n          const request = {\\n            ...call2,\\n            data: call2.abi ? encodeFunctionData(call2) : call2.data,\\n            from: call2.from ?? account?.address\\n          };\\n          assertRequest(request);\\n          return formatTransactionRequest(request);\\n        });\\n        const stateOverrides = block2.stateOverrides ? serializeStateOverride(block2.stateOverrides) : void 0;\\n        blockStateCalls.push({\\n          blockOverrides,\\n          calls,\\n          stateOverrides\\n        });\\n      }\\n      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\\n      const block = blockNumberHex || blockTag;\\n      const result = await client.request({\\n        method: \"eth_simulateV1\",\\n        params: [\\n          { blockStateCalls, returnFullTransactions, traceTransfers, validation },\\n          block\\n        ]\\n      });\\n      return result.map((block2, i) => ({\\n        ...formatBlock(block2),\\n        calls: block2.calls.map((call2, j) => {\\n          const { abi: abi2, args, functionName, to } = blocks[i].calls[j];\\n          const data = call2.error?.data ?? call2.returnData;\\n          const gasUsed = BigInt(call2.gasUsed);\\n          const logs = call2.logs?.map((log) => formatLog(log));\\n          const status = call2.status === \"0x1\" ? \"success\" : \"failure\";\\n          const result2 = abi2 && status === \"success\" && data !== \"0x\" ? decodeFunctionResult({\\n            abi: abi2,\\n            data,\\n            functionName\\n          }) : null;\\n          const error = (() => {\\n            if (status === \"success\")\\n              return void 0;\\n            let error2 = void 0;\\n            if (call2.error?.data === \"0x\")\\n              error2 = new AbiDecodingZeroDataError();\\n            else if (call2.error)\\n              error2 = new RawContractError(call2.error);\\n            if (!error2)\\n              return void 0;\\n            return getContractError(error2, {\\n              abi: abi2 ?? [],\\n              address: to,\\n              args,\\n              functionName: functionName ?? \"<unknown>\"\\n            });\\n          })();\\n          return {\\n            data,\\n            gasUsed,\\n            logs,\\n            status,\\n            ...status === \"success\" ? {\\n              result: result2\\n            } : {\\n              error\\n            }\\n          };\\n        })\\n      }));\\n    } catch (e) {\\n      const cause = e;\\n      const error = getNodeError(cause, {});\\n      if (error instanceof UnknownNodeError)\\n        throw cause;\\n      throw error;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/AbiItem.js\\n  init_exports();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.2/node_modules/@noble/hashes/esm/_assert.js\\n  function anumber2(n) {\\n    if (!Number.isSafeInteger(n) || n < 0)\\n      throw new Error(\"positive integer expected, got \" + n);\\n  }\\n  function isBytes3(a) {\\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\\n  }\\n  function abytes3(b, ...lengths) {\\n    if (!isBytes3(b))\\n      throw new Error(\"Uint8Array expected\");\\n    if (lengths.length > 0 && !lengths.includes(b.length))\\n      throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\\n  }\\n  function aexists2(instance, checkFinished = true) {\\n    if (instance.destroyed)\\n      throw new Error(\"Hash instance has been destroyed\");\\n    if (checkFinished && instance.finished)\\n      throw new Error(\"Hash#digest() has already been called\");\\n  }\\n  function aoutput2(out, instance) {\\n    abytes3(out);\\n    const min = instance.outputLen;\\n    if (out.length < min) {\\n      throw new Error(\"digestInto() expects output buffer of length at least \" + min);\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.2/node_modules/@noble/hashes/esm/utils.js\\n  function u322(arr) {\\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\\n  }\\n  var isLE2 = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();\\n  function byteSwap2(word) {\\n    return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;\\n  }\\n  function byteSwap322(arr) {\\n    for (let i = 0; i < arr.length; i++) {\\n      arr[i] = byteSwap2(arr[i]);\\n    }\\n  }\\n  var hasHexBuiltin = (\\n    // @ts-ignore\\n    typeof Uint8Array.from([]).toHex === \"function\" && typeof Uint8Array.fromHex === \"function\"\\n  );\\n  function utf8ToBytes3(str) {\\n    if (typeof str !== \"string\")\\n      throw new Error(\"utf8ToBytes expected string, got \" + typeof str);\\n    return new Uint8Array(new TextEncoder().encode(str));\\n  }\\n  function toBytes3(data) {\\n    if (typeof data === \"string\")\\n      data = utf8ToBytes3(data);\\n    abytes3(data);\\n    return data;\\n  }\\n  var Hash2 = class {\\n    // Safe version that clones internal state\\n    clone() {\\n      return this._cloneInto();\\n    }\\n  };\\n  function wrapConstructor2(hashCons) {\\n    const hashC = (msg) => hashCons().update(toBytes3(msg)).digest();\\n    const tmp = hashCons();\\n    hashC.outputLen = tmp.outputLen;\\n    hashC.blockLen = tmp.blockLen;\\n    hashC.create = () => hashCons();\\n    return hashC;\\n  }\\n  function wrapXOFConstructorWithOpts2(hashCons) {\\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes3(msg)).digest();\\n    const tmp = hashCons({});\\n    hashC.outputLen = tmp.outputLen;\\n    hashC.blockLen = tmp.blockLen;\\n    hashC.create = (opts) => hashCons(opts);\\n    return hashC;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.2/node_modules/@noble/hashes/esm/_u64.js\\n  var U32_MASK642 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\\n  var _32n2 = /* @__PURE__ */ BigInt(32);\\n  function fromBig2(n, le = false) {\\n    if (le)\\n      return { h: Number(n & U32_MASK642), l: Number(n >> _32n2 & U32_MASK642) };\\n    return { h: Number(n >> _32n2 & U32_MASK642) | 0, l: Number(n & U32_MASK642) | 0 };\\n  }\\n  function split2(lst, le = false) {\\n    let Ah = new Uint32Array(lst.length);\\n    let Al = new Uint32Array(lst.length);\\n    for (let i = 0; i < lst.length; i++) {\\n      const { h, l } = fromBig2(lst[i], le);\\n      [Ah[i], Al[i]] = [h, l];\\n    }\\n    return [Ah, Al];\\n  }\\n  var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;\\n  var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;\\n  var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;\\n  var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/@noble+hashes@1.7.2/node_modules/@noble/hashes/esm/sha3.js\\n  var SHA3_PI2 = [];\\n  var SHA3_ROTL2 = [];\\n  var _SHA3_IOTA2 = [];\\n  var _0n7 = /* @__PURE__ */ BigInt(0);\\n  var _1n7 = /* @__PURE__ */ BigInt(1);\\n  var _2n6 = /* @__PURE__ */ BigInt(2);\\n  var _7n2 = /* @__PURE__ */ BigInt(7);\\n  var _256n2 = /* @__PURE__ */ BigInt(256);\\n  var _0x71n2 = /* @__PURE__ */ BigInt(113);\\n  for (let round = 0, R = _1n7, x = 1, y = 0; round < 24; round++) {\\n    [x, y] = [y, (2 * x + 3 * y) % 5];\\n    SHA3_PI2.push(2 * (5 * y + x));\\n    SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);\\n    let t = _0n7;\\n    for (let j = 0; j < 7; j++) {\\n      R = (R << _1n7 ^ (R >> _7n2) * _0x71n2) % _256n2;\\n      if (R & _2n6)\\n        t ^= _1n7 << (_1n7 << /* @__PURE__ */ BigInt(j)) - _1n7;\\n    }\\n    _SHA3_IOTA2.push(t);\\n  }\\n  var [SHA3_IOTA_H2, SHA3_IOTA_L2] = /* @__PURE__ */ split2(_SHA3_IOTA2, true);\\n  var rotlH2 = (h, l, s) => s > 32 ? rotlBH2(h, l, s) : rotlSH2(h, l, s);\\n  var rotlL2 = (h, l, s) => s > 32 ? rotlBL2(h, l, s) : rotlSL2(h, l, s);\\n  function keccakP2(s, rounds = 24) {\\n    const B = new Uint32Array(5 * 2);\\n    for (let round = 24 - rounds; round < 24; round++) {\\n      for (let x = 0; x < 10; x++)\\n        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\\n      for (let x = 0; x < 10; x += 2) {\\n        const idx1 = (x + 8) % 10;\\n        const idx0 = (x + 2) % 10;\\n        const B0 = B[idx0];\\n        const B1 = B[idx0 + 1];\\n        const Th = rotlH2(B0, B1, 1) ^ B[idx1];\\n        const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];\\n        for (let y = 0; y < 50; y += 10) {\\n          s[x + y] ^= Th;\\n          s[x + y + 1] ^= Tl;\\n        }\\n      }\\n      let curH = s[2];\\n      let curL = s[3];\\n      for (let t = 0; t < 24; t++) {\\n        const shift = SHA3_ROTL2[t];\\n        const Th = rotlH2(curH, curL, shift);\\n        const Tl = rotlL2(curH, curL, shift);\\n        const PI = SHA3_PI2[t];\\n        curH = s[PI];\\n        curL = s[PI + 1];\\n        s[PI] = Th;\\n        s[PI + 1] = Tl;\\n      }\\n      for (let y = 0; y < 50; y += 10) {\\n        for (let x = 0; x < 10; x++)\\n          B[x] = s[y + x];\\n        for (let x = 0; x < 10; x++)\\n          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\\n      }\\n      s[0] ^= SHA3_IOTA_H2[round];\\n      s[1] ^= SHA3_IOTA_L2[round];\\n    }\\n    B.fill(0);\\n  }\\n  var Keccak2 = class _Keccak extends Hash2 {\\n    // NOTE: we accept arguments in bytes instead of bits here.\\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\\n      super();\\n      this.pos = 0;\\n      this.posOut = 0;\\n      this.finished = false;\\n      this.destroyed = false;\\n      this.enableXOF = false;\\n      this.blockLen = blockLen;\\n      this.suffix = suffix;\\n      this.outputLen = outputLen;\\n      this.enableXOF = enableXOF;\\n      this.rounds = rounds;\\n      anumber2(outputLen);\\n      if (0 >= this.blockLen || this.blockLen >= 200)\\n        throw new Error(\"Sha3 supports only keccak-f1600 function\");\\n      this.state = new Uint8Array(200);\\n      this.state32 = u322(this.state);\\n    }\\n    keccak() {\\n      if (!isLE2)\\n        byteSwap322(this.state32);\\n      keccakP2(this.state32, this.rounds);\\n      if (!isLE2)\\n        byteSwap322(this.state32);\\n      this.posOut = 0;\\n      this.pos = 0;\\n    }\\n    update(data) {\\n      aexists2(this);\\n      const { blockLen, state } = this;\\n      data = toBytes3(data);\\n      const len = data.length;\\n      for (let pos = 0; pos < len; ) {\\n        const take = Math.min(blockLen - this.pos, len - pos);\\n        for (let i = 0; i < take; i++)\\n          state[this.pos++] ^= data[pos++];\\n        if (this.pos === blockLen)\\n          this.keccak();\\n      }\\n      return this;\\n    }\\n    finish() {\\n      if (this.finished)\\n        return;\\n      this.finished = true;\\n      const { state, suffix, pos, blockLen } = this;\\n      state[pos] ^= suffix;\\n      if ((suffix & 128) !== 0 && pos === blockLen - 1)\\n        this.keccak();\\n      state[blockLen - 1] ^= 128;\\n      this.keccak();\\n    }\\n    writeInto(out) {\\n      aexists2(this, false);\\n      abytes3(out);\\n      this.finish();\\n      const bufferOut = this.state;\\n      const { blockLen } = this;\\n      for (let pos = 0, len = out.length; pos < len; ) {\\n        if (this.posOut >= blockLen)\\n          this.keccak();\\n        const take = Math.min(blockLen - this.posOut, len - pos);\\n        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\\n        this.posOut += take;\\n        pos += take;\\n      }\\n      return out;\\n    }\\n    xofInto(out) {\\n      if (!this.enableXOF)\\n        throw new Error(\"XOF is not possible for this instance\");\\n      return this.writeInto(out);\\n    }\\n    xof(bytes) {\\n      anumber2(bytes);\\n      return this.xofInto(new Uint8Array(bytes));\\n    }\\n    digestInto(out) {\\n      aoutput2(out, this);\\n      if (this.finished)\\n        throw new Error(\"digest() was already called\");\\n      this.writeInto(out);\\n      this.destroy();\\n      return out;\\n    }\\n    digest() {\\n      return this.digestInto(new Uint8Array(this.outputLen));\\n    }\\n    destroy() {\\n      this.destroyed = true;\\n      this.state.fill(0);\\n    }\\n    _cloneInto(to) {\\n      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\\n      to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\\n      to.state32.set(this.state32);\\n      to.pos = this.pos;\\n      to.posOut = this.posOut;\\n      to.finished = this.finished;\\n      to.rounds = rounds;\\n      to.suffix = suffix;\\n      to.outputLen = outputLen;\\n      to.enableXOF = enableXOF;\\n      to.destroyed = this.destroyed;\\n      return to;\\n    }\\n  };\\n  var gen2 = (suffix, blockLen, outputLen) => wrapConstructor2(() => new Keccak2(blockLen, suffix, outputLen));\\n  var sha3_2242 = /* @__PURE__ */ gen2(6, 144, 224 / 8);\\n  var sha3_2562 = /* @__PURE__ */ gen2(6, 136, 256 / 8);\\n  var sha3_3842 = /* @__PURE__ */ gen2(6, 104, 384 / 8);\\n  var sha3_5122 = /* @__PURE__ */ gen2(6, 72, 512 / 8);\\n  var keccak_2242 = /* @__PURE__ */ gen2(1, 144, 224 / 8);\\n  var keccak_2562 = /* @__PURE__ */ gen2(1, 136, 256 / 8);\\n  var keccak_3842 = /* @__PURE__ */ gen2(1, 104, 384 / 8);\\n  var keccak_5122 = /* @__PURE__ */ gen2(1, 72, 512 / 8);\\n  var genShake2 = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts2((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));\\n  var shake1282 = /* @__PURE__ */ genShake2(31, 168, 128 / 8);\\n  var shake2562 = /* @__PURE__ */ genShake2(31, 136, 256 / 8);\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Hash.js\\n  function keccak2562(value, options = {}) {\\n    const { as = typeof value === \"string\" ? \"Hex\" : \"Bytes\" } = options;\\n    const bytes = keccak_2562(from(value));\\n    if (as === \"Bytes\")\\n      return bytes;\\n    return fromBytes(bytes);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/lru.js\\n  var LruMap2 = class extends Map {\\n    constructor(size5) {\\n      super();\\n      Object.defineProperty(this, \"maxSize\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: void 0\\n      });\\n      this.maxSize = size5;\\n    }\\n    get(key) {\\n      const value = super.get(key);\\n      if (super.has(key) && value !== void 0) {\\n        this.delete(key);\\n        super.set(key, value);\\n      }\\n      return value;\\n    }\\n    set(key, value) {\\n      super.set(key, value);\\n      if (this.maxSize && this.size > this.maxSize) {\\n        const firstKey = this.keys().next().value;\\n        if (firstKey)\\n          this.delete(firstKey);\\n      }\\n      return this;\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Caches.js\\n  var caches = {\\n    checksum: /* @__PURE__ */ new LruMap2(8192)\\n  };\\n  var checksum = caches.checksum;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Address.js\\n  var addressRegex2 = /^0x[a-fA-F0-9]{40}$/;\\n  function assert2(value, options = {}) {\\n    const { strict = true } = options;\\n    if (!addressRegex2.test(value))\\n      throw new InvalidAddressError2({\\n        address: value,\\n        cause: new InvalidInputError()\\n      });\\n    if (strict) {\\n      if (value.toLowerCase() === value)\\n        return;\\n      if (checksum2(value) !== value)\\n        throw new InvalidAddressError2({\\n          address: value,\\n          cause: new InvalidChecksumError()\\n        });\\n    }\\n  }\\n  function checksum2(address) {\\n    if (checksum.has(address))\\n      return checksum.get(address);\\n    assert2(address, { strict: false });\\n    const hexAddress = address.substring(2).toLowerCase();\\n    const hash2 = keccak2562(fromString(hexAddress), { as: \"Bytes\" });\\n    const characters = hexAddress.split(\"\");\\n    for (let i = 0; i < 40; i += 2) {\\n      if (hash2[i >> 1] >> 4 >= 8 && characters[i]) {\\n        characters[i] = characters[i].toUpperCase();\\n      }\\n      if ((hash2[i >> 1] & 15) >= 8 && characters[i + 1]) {\\n        characters[i + 1] = characters[i + 1].toUpperCase();\\n      }\\n    }\\n    const result = `0x${characters.join(\"\")}`;\\n    checksum.set(address, result);\\n    return result;\\n  }\\n  function validate2(address, options = {}) {\\n    const { strict = true } = options ?? {};\\n    try {\\n      assert2(address, { strict });\\n      return true;\\n    } catch {\\n      return false;\\n    }\\n  }\\n  var InvalidAddressError2 = class extends BaseError3 {\\n    constructor({ address, cause }) {\\n      super(`Address \"${address}\" is invalid.`, {\\n        cause\\n      });\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Address.InvalidAddressError\"\\n      });\\n    }\\n  };\\n  var InvalidInputError = class extends BaseError3 {\\n    constructor() {\\n      super(\"Address is not a 20 byte (40 hexadecimal character) value.\");\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Address.InvalidInputError\"\\n      });\\n    }\\n  };\\n  var InvalidChecksumError = class extends BaseError3 {\\n    constructor() {\\n      super(\"Address does not match its checksum counterpart.\");\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"Address.InvalidChecksumError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/abiItem.js\\n  function normalizeSignature2(signature) {\\n    let active = true;\\n    let current = \"\";\\n    let level = 0;\\n    let result = \"\";\\n    let valid = false;\\n    for (let i = 0; i < signature.length; i++) {\\n      const char = signature[i];\\n      if ([\"(\", \")\", \",\"].includes(char))\\n        active = true;\\n      if (char === \"(\")\\n        level++;\\n      if (char === \")\")\\n        level--;\\n      if (!active)\\n        continue;\\n      if (level === 0) {\\n        if (char === \" \" && [\"event\", \"function\", \"error\", \"\"].includes(result))\\n          result = \"\";\\n        else {\\n          result += char;\\n          if (char === \")\") {\\n            valid = true;\\n            break;\\n          }\\n        }\\n        continue;\\n      }\\n      if (char === \" \") {\\n        if (signature[i - 1] !== \",\" && current !== \",\" && current !== \",(\") {\\n          current = \"\";\\n          active = false;\\n        }\\n        continue;\\n      }\\n      result += char;\\n      current += char;\\n    }\\n    if (!valid)\\n      throw new BaseError3(\"Unable to normalize signature.\");\\n    return result;\\n  }\\n  function isArgOfType2(arg, abiParameter) {\\n    const argType = typeof arg;\\n    const abiParameterType = abiParameter.type;\\n    switch (abiParameterType) {\\n      case \"address\":\\n        return validate2(arg, { strict: false });\\n      case \"bool\":\\n        return argType === \"boolean\";\\n      case \"function\":\\n        return argType === \"string\";\\n      case \"string\":\\n        return argType === \"string\";\\n      default: {\\n        if (abiParameterType === \"tuple\" && \"components\" in abiParameter)\\n          return Object.values(abiParameter.components).every((component, index2) => {\\n            return isArgOfType2(Object.values(arg)[index2], component);\\n          });\\n        if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\\n          return argType === \"number\" || argType === \"bigint\";\\n        if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\\n          return argType === \"string\" || arg instanceof Uint8Array;\\n        if (/[a-z]+[1-9]{0,3}(\\\\[[0-9]{0,}\\\\])+$/.test(abiParameterType)) {\\n          return Array.isArray(arg) && arg.every((x) => isArgOfType2(x, {\\n            ...abiParameter,\\n            // Pop off `[]` or `[M]` from end of type\\n            type: abiParameterType.replace(/(\\\\[[0-9]{0,}\\\\])$/, \"\")\\n          }));\\n        }\\n        return false;\\n      }\\n    }\\n  }\\n  function getAmbiguousTypes2(sourceParameters, targetParameters, args) {\\n    for (const parameterIndex in sourceParameters) {\\n      const sourceParameter = sourceParameters[parameterIndex];\\n      const targetParameter = targetParameters[parameterIndex];\\n      if (sourceParameter.type === \"tuple\" && targetParameter.type === \"tuple\" && \"components\" in sourceParameter && \"components\" in targetParameter)\\n        return getAmbiguousTypes2(sourceParameter.components, targetParameter.components, args[parameterIndex]);\\n      const types = [sourceParameter.type, targetParameter.type];\\n      const ambiguous = (() => {\\n        if (types.includes(\"address\") && types.includes(\"bytes20\"))\\n          return true;\\n        if (types.includes(\"address\") && types.includes(\"string\"))\\n          return validate2(args[parameterIndex], {\\n            strict: false\\n          });\\n        if (types.includes(\"address\") && types.includes(\"bytes\"))\\n          return validate2(args[parameterIndex], {\\n            strict: false\\n          });\\n        return false;\\n      })();\\n      if (ambiguous)\\n        return types;\\n    }\\n    return;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/AbiItem.js\\n  function from2(abiItem, options = {}) {\\n    const { prepare = true } = options;\\n    const item = (() => {\\n      if (Array.isArray(abiItem))\\n        return parseAbiItem(abiItem);\\n      if (typeof abiItem === \"string\")\\n        return parseAbiItem(abiItem);\\n      return abiItem;\\n    })();\\n    return {\\n      ...item,\\n      ...prepare ? { hash: getSignatureHash(item) } : {}\\n    };\\n  }\\n  function fromAbi(abi2, name, options) {\\n    const { args = [], prepare = true } = options ?? {};\\n    const isSelector = validate(name, { strict: false });\\n    const abiItems = abi2.filter((abiItem2) => {\\n      if (isSelector) {\\n        if (abiItem2.type === \"function\" || abiItem2.type === \"error\")\\n          return getSelector(abiItem2) === slice2(name, 0, 4);\\n        if (abiItem2.type === \"event\")\\n          return getSignatureHash(abiItem2) === name;\\n        return false;\\n      }\\n      return \"name\" in abiItem2 && abiItem2.name === name;\\n    });\\n    if (abiItems.length === 0)\\n      throw new NotFoundError({ name });\\n    if (abiItems.length === 1)\\n      return {\\n        ...abiItems[0],\\n        ...prepare ? { hash: getSignatureHash(abiItems[0]) } : {}\\n      };\\n    let matchedAbiItem = void 0;\\n    for (const abiItem2 of abiItems) {\\n      if (!(\"inputs\" in abiItem2))\\n        continue;\\n      if (!args || args.length === 0) {\\n        if (!abiItem2.inputs || abiItem2.inputs.length === 0)\\n          return {\\n            ...abiItem2,\\n            ...prepare ? { hash: getSignatureHash(abiItem2) } : {}\\n          };\\n        continue;\\n      }\\n      if (!abiItem2.inputs)\\n        continue;\\n      if (abiItem2.inputs.length === 0)\\n        continue;\\n      if (abiItem2.inputs.length !== args.length)\\n        continue;\\n      const matched = args.every((arg, index2) => {\\n        const abiParameter = \"inputs\" in abiItem2 && abiItem2.inputs[index2];\\n        if (!abiParameter)\\n          return false;\\n        return isArgOfType2(arg, abiParameter);\\n      });\\n      if (matched) {\\n        if (matchedAbiItem && \"inputs\" in matchedAbiItem && matchedAbiItem.inputs) {\\n          const ambiguousTypes = getAmbiguousTypes2(abiItem2.inputs, matchedAbiItem.inputs, args);\\n          if (ambiguousTypes)\\n            throw new AmbiguityError({\\n              abiItem: abiItem2,\\n              type: ambiguousTypes[0]\\n            }, {\\n              abiItem: matchedAbiItem,\\n              type: ambiguousTypes[1]\\n            });\\n        }\\n        matchedAbiItem = abiItem2;\\n      }\\n    }\\n    const abiItem = (() => {\\n      if (matchedAbiItem)\\n        return matchedAbiItem;\\n      const [abiItem2, ...overloads] = abiItems;\\n      return { ...abiItem2, overloads };\\n    })();\\n    if (!abiItem)\\n      throw new NotFoundError({ name });\\n    return {\\n      ...abiItem,\\n      ...prepare ? { hash: getSignatureHash(abiItem) } : {}\\n    };\\n  }\\n  function getSelector(abiItem) {\\n    return slice2(getSignatureHash(abiItem), 0, 4);\\n  }\\n  function getSignature(abiItem) {\\n    const signature = (() => {\\n      if (typeof abiItem === \"string\")\\n        return abiItem;\\n      return formatAbiItem(abiItem);\\n    })();\\n    return normalizeSignature2(signature);\\n  }\\n  function getSignatureHash(abiItem) {\\n    if (typeof abiItem !== \"string\" && \"hash\" in abiItem && abiItem.hash)\\n      return abiItem.hash;\\n    return keccak2562(fromString2(getSignature(abiItem)));\\n  }\\n  var AmbiguityError = class extends BaseError3 {\\n    constructor(x, y) {\\n      super(\"Found ambiguous types in overloaded ABI Items.\", {\\n        metaMessages: [\\n          // TODO: abitype to add support for signature-formatted ABI items.\\n          `\\\\`${x.type}\\\\` in \\\\`${normalizeSignature2(formatAbiItem(x.abiItem))}\\\\`, and`,\\n          `\\\\`${y.type}\\\\` in \\\\`${normalizeSignature2(formatAbiItem(y.abiItem))}\\\\``,\\n          \"\",\\n          \"These types encode differently and cannot be distinguished at runtime.\",\\n          \"Remove one of the ambiguous items in the ABI.\"\\n        ]\\n      });\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiItem.AmbiguityError\"\\n      });\\n    }\\n  };\\n  var NotFoundError = class extends BaseError3 {\\n    constructor({ name, data, type = \"item\" }) {\\n      const selector = (() => {\\n        if (name)\\n          return ` with name \"${name}\"`;\\n        if (data)\\n          return ` with data \"${data}\"`;\\n        return \"\";\\n      })();\\n      super(`ABI ${type}${selector} not found.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiItem.NotFoundError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/Solidity.js\\n  var arrayRegex = /^(.*)\\\\[([0-9]*)\\\\]$/;\\n  var bytesRegex3 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\\n  var integerRegex3 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\\n  var maxInt82 = 2n ** (8n - 1n) - 1n;\\n  var maxInt162 = 2n ** (16n - 1n) - 1n;\\n  var maxInt242 = 2n ** (24n - 1n) - 1n;\\n  var maxInt322 = 2n ** (32n - 1n) - 1n;\\n  var maxInt402 = 2n ** (40n - 1n) - 1n;\\n  var maxInt482 = 2n ** (48n - 1n) - 1n;\\n  var maxInt562 = 2n ** (56n - 1n) - 1n;\\n  var maxInt642 = 2n ** (64n - 1n) - 1n;\\n  var maxInt722 = 2n ** (72n - 1n) - 1n;\\n  var maxInt802 = 2n ** (80n - 1n) - 1n;\\n  var maxInt882 = 2n ** (88n - 1n) - 1n;\\n  var maxInt962 = 2n ** (96n - 1n) - 1n;\\n  var maxInt1042 = 2n ** (104n - 1n) - 1n;\\n  var maxInt1122 = 2n ** (112n - 1n) - 1n;\\n  var maxInt1202 = 2n ** (120n - 1n) - 1n;\\n  var maxInt1282 = 2n ** (128n - 1n) - 1n;\\n  var maxInt1362 = 2n ** (136n - 1n) - 1n;\\n  var maxInt1442 = 2n ** (144n - 1n) - 1n;\\n  var maxInt1522 = 2n ** (152n - 1n) - 1n;\\n  var maxInt1602 = 2n ** (160n - 1n) - 1n;\\n  var maxInt1682 = 2n ** (168n - 1n) - 1n;\\n  var maxInt1762 = 2n ** (176n - 1n) - 1n;\\n  var maxInt1842 = 2n ** (184n - 1n) - 1n;\\n  var maxInt1922 = 2n ** (192n - 1n) - 1n;\\n  var maxInt2002 = 2n ** (200n - 1n) - 1n;\\n  var maxInt2082 = 2n ** (208n - 1n) - 1n;\\n  var maxInt2162 = 2n ** (216n - 1n) - 1n;\\n  var maxInt2242 = 2n ** (224n - 1n) - 1n;\\n  var maxInt2322 = 2n ** (232n - 1n) - 1n;\\n  var maxInt2402 = 2n ** (240n - 1n) - 1n;\\n  var maxInt2482 = 2n ** (248n - 1n) - 1n;\\n  var maxInt2562 = 2n ** (256n - 1n) - 1n;\\n  var minInt82 = -(2n ** (8n - 1n));\\n  var minInt162 = -(2n ** (16n - 1n));\\n  var minInt242 = -(2n ** (24n - 1n));\\n  var minInt322 = -(2n ** (32n - 1n));\\n  var minInt402 = -(2n ** (40n - 1n));\\n  var minInt482 = -(2n ** (48n - 1n));\\n  var minInt562 = -(2n ** (56n - 1n));\\n  var minInt642 = -(2n ** (64n - 1n));\\n  var minInt722 = -(2n ** (72n - 1n));\\n  var minInt802 = -(2n ** (80n - 1n));\\n  var minInt882 = -(2n ** (88n - 1n));\\n  var minInt962 = -(2n ** (96n - 1n));\\n  var minInt1042 = -(2n ** (104n - 1n));\\n  var minInt1122 = -(2n ** (112n - 1n));\\n  var minInt1202 = -(2n ** (120n - 1n));\\n  var minInt1282 = -(2n ** (128n - 1n));\\n  var minInt1362 = -(2n ** (136n - 1n));\\n  var minInt1442 = -(2n ** (144n - 1n));\\n  var minInt1522 = -(2n ** (152n - 1n));\\n  var minInt1602 = -(2n ** (160n - 1n));\\n  var minInt1682 = -(2n ** (168n - 1n));\\n  var minInt1762 = -(2n ** (176n - 1n));\\n  var minInt1842 = -(2n ** (184n - 1n));\\n  var minInt1922 = -(2n ** (192n - 1n));\\n  var minInt2002 = -(2n ** (200n - 1n));\\n  var minInt2082 = -(2n ** (208n - 1n));\\n  var minInt2162 = -(2n ** (216n - 1n));\\n  var minInt2242 = -(2n ** (224n - 1n));\\n  var minInt2322 = -(2n ** (232n - 1n));\\n  var minInt2402 = -(2n ** (240n - 1n));\\n  var minInt2482 = -(2n ** (248n - 1n));\\n  var minInt2562 = -(2n ** (256n - 1n));\\n  var maxUint82 = 2n ** 8n - 1n;\\n  var maxUint162 = 2n ** 16n - 1n;\\n  var maxUint242 = 2n ** 24n - 1n;\\n  var maxUint322 = 2n ** 32n - 1n;\\n  var maxUint402 = 2n ** 40n - 1n;\\n  var maxUint482 = 2n ** 48n - 1n;\\n  var maxUint562 = 2n ** 56n - 1n;\\n  var maxUint642 = 2n ** 64n - 1n;\\n  var maxUint722 = 2n ** 72n - 1n;\\n  var maxUint802 = 2n ** 80n - 1n;\\n  var maxUint882 = 2n ** 88n - 1n;\\n  var maxUint962 = 2n ** 96n - 1n;\\n  var maxUint1042 = 2n ** 104n - 1n;\\n  var maxUint1122 = 2n ** 112n - 1n;\\n  var maxUint1202 = 2n ** 120n - 1n;\\n  var maxUint1282 = 2n ** 128n - 1n;\\n  var maxUint1362 = 2n ** 136n - 1n;\\n  var maxUint1442 = 2n ** 144n - 1n;\\n  var maxUint1522 = 2n ** 152n - 1n;\\n  var maxUint1602 = 2n ** 160n - 1n;\\n  var maxUint1682 = 2n ** 168n - 1n;\\n  var maxUint1762 = 2n ** 176n - 1n;\\n  var maxUint1842 = 2n ** 184n - 1n;\\n  var maxUint1922 = 2n ** 192n - 1n;\\n  var maxUint2002 = 2n ** 200n - 1n;\\n  var maxUint2082 = 2n ** 208n - 1n;\\n  var maxUint2162 = 2n ** 216n - 1n;\\n  var maxUint2242 = 2n ** 224n - 1n;\\n  var maxUint2322 = 2n ** 232n - 1n;\\n  var maxUint2402 = 2n ** 240n - 1n;\\n  var maxUint2482 = 2n ** 248n - 1n;\\n  var maxUint2562 = 2n ** 256n - 1n;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/internal/abiParameters.js\\n  function prepareParameters({ checksumAddress: checksumAddress2, parameters, values }) {\\n    const preparedParameters = [];\\n    for (let i = 0; i < parameters.length; i++) {\\n      preparedParameters.push(prepareParameter({\\n        checksumAddress: checksumAddress2,\\n        parameter: parameters[i],\\n        value: values[i]\\n      }));\\n    }\\n    return preparedParameters;\\n  }\\n  function prepareParameter({ checksumAddress: checksumAddress2 = false, parameter: parameter_, value }) {\\n    const parameter = parameter_;\\n    const arrayComponents = getArrayComponents2(parameter.type);\\n    if (arrayComponents) {\\n      const [length, type] = arrayComponents;\\n      return encodeArray2(value, {\\n        checksumAddress: checksumAddress2,\\n        length,\\n        parameter: {\\n          ...parameter,\\n          type\\n        }\\n      });\\n    }\\n    if (parameter.type === \"tuple\") {\\n      return encodeTuple2(value, {\\n        checksumAddress: checksumAddress2,\\n        parameter\\n      });\\n    }\\n    if (parameter.type === \"address\") {\\n      return encodeAddress2(value, {\\n        checksum: checksumAddress2\\n      });\\n    }\\n    if (parameter.type === \"bool\") {\\n      return encodeBoolean(value);\\n    }\\n    if (parameter.type.startsWith(\"uint\") || parameter.type.startsWith(\"int\")) {\\n      const signed = parameter.type.startsWith(\"int\");\\n      const [, , size5 = \"256\"] = integerRegex3.exec(parameter.type) ?? [];\\n      return encodeNumber2(value, {\\n        signed,\\n        size: Number(size5)\\n      });\\n    }\\n    if (parameter.type.startsWith(\"bytes\")) {\\n      return encodeBytes2(value, { type: parameter.type });\\n    }\\n    if (parameter.type === \"string\") {\\n      return encodeString2(value);\\n    }\\n    throw new InvalidTypeError(parameter.type);\\n  }\\n  function encode(preparedParameters) {\\n    let staticSize = 0;\\n    for (let i = 0; i < preparedParameters.length; i++) {\\n      const { dynamic, encoded } = preparedParameters[i];\\n      if (dynamic)\\n        staticSize += 32;\\n      else\\n        staticSize += size4(encoded);\\n    }\\n    const staticParameters = [];\\n    const dynamicParameters = [];\\n    let dynamicSize = 0;\\n    for (let i = 0; i < preparedParameters.length; i++) {\\n      const { dynamic, encoded } = preparedParameters[i];\\n      if (dynamic) {\\n        staticParameters.push(fromNumber(staticSize + dynamicSize, { size: 32 }));\\n        dynamicParameters.push(encoded);\\n        dynamicSize += size4(encoded);\\n      } else {\\n        staticParameters.push(encoded);\\n      }\\n    }\\n    return concat2(...staticParameters, ...dynamicParameters);\\n  }\\n  function encodeAddress2(value, options) {\\n    const { checksum: checksum3 = false } = options;\\n    assert2(value, { strict: checksum3 });\\n    return {\\n      dynamic: false,\\n      encoded: padLeft(value.toLowerCase())\\n    };\\n  }\\n  function encodeArray2(value, options) {\\n    const { checksumAddress: checksumAddress2, length, parameter } = options;\\n    const dynamic = length === null;\\n    if (!Array.isArray(value))\\n      throw new InvalidArrayError2(value);\\n    if (!dynamic && value.length !== length)\\n      throw new ArrayLengthMismatchError({\\n        expectedLength: length,\\n        givenLength: value.length,\\n        type: `${parameter.type}[${length}]`\\n      });\\n    let dynamicChild = false;\\n    const preparedParameters = [];\\n    for (let i = 0; i < value.length; i++) {\\n      const preparedParam = prepareParameter({\\n        checksumAddress: checksumAddress2,\\n        parameter,\\n        value: value[i]\\n      });\\n      if (preparedParam.dynamic)\\n        dynamicChild = true;\\n      preparedParameters.push(preparedParam);\\n    }\\n    if (dynamic || dynamicChild) {\\n      const data = encode(preparedParameters);\\n      if (dynamic) {\\n        const length2 = fromNumber(preparedParameters.length, { size: 32 });\\n        return {\\n          dynamic: true,\\n          encoded: preparedParameters.length > 0 ? concat2(length2, data) : length2\\n        };\\n      }\\n      if (dynamicChild)\\n        return { dynamic: true, encoded: data };\\n    }\\n    return {\\n      dynamic: false,\\n      encoded: concat2(...preparedParameters.map(({ encoded }) => encoded))\\n    };\\n  }\\n  function encodeBytes2(value, { type }) {\\n    const [, parametersize] = type.split(\"bytes\");\\n    const bytesSize = size4(value);\\n    if (!parametersize) {\\n      let value_ = value;\\n      if (bytesSize % 32 !== 0)\\n        value_ = padRight(value_, Math.ceil((value.length - 2) / 2 / 32) * 32);\\n      return {\\n        dynamic: true,\\n        encoded: concat2(padLeft(fromNumber(bytesSize, { size: 32 })), value_)\\n      };\\n    }\\n    if (bytesSize !== Number.parseInt(parametersize))\\n      throw new BytesSizeMismatchError2({\\n        expectedSize: Number.parseInt(parametersize),\\n        value\\n      });\\n    return { dynamic: false, encoded: padRight(value) };\\n  }\\n  function encodeBoolean(value) {\\n    if (typeof value !== \"boolean\")\\n      throw new BaseError3(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\\\`true\\\\` or \\\\`false\\\\`.`);\\n    return { dynamic: false, encoded: padLeft(fromBoolean(value)) };\\n  }\\n  function encodeNumber2(value, { signed, size: size5 }) {\\n    if (typeof size5 === \"number\") {\\n      const max = 2n ** (BigInt(size5) - (signed ? 1n : 0n)) - 1n;\\n      const min = signed ? -max - 1n : 0n;\\n      if (value > max || value < min)\\n        throw new IntegerOutOfRangeError2({\\n          max: max.toString(),\\n          min: min.toString(),\\n          signed,\\n          size: size5 / 8,\\n          value: value.toString()\\n        });\\n    }\\n    return {\\n      dynamic: false,\\n      encoded: fromNumber(value, {\\n        size: 32,\\n        signed\\n      })\\n    };\\n  }\\n  function encodeString2(value) {\\n    const hexValue = fromString2(value);\\n    const partsLength = Math.ceil(size4(hexValue) / 32);\\n    const parts = [];\\n    for (let i = 0; i < partsLength; i++) {\\n      parts.push(padRight(slice2(hexValue, i * 32, (i + 1) * 32)));\\n    }\\n    return {\\n      dynamic: true,\\n      encoded: concat2(padRight(fromNumber(size4(hexValue), { size: 32 })), ...parts)\\n    };\\n  }\\n  function encodeTuple2(value, options) {\\n    const { checksumAddress: checksumAddress2, parameter } = options;\\n    let dynamic = false;\\n    const preparedParameters = [];\\n    for (let i = 0; i < parameter.components.length; i++) {\\n      const param_ = parameter.components[i];\\n      const index2 = Array.isArray(value) ? i : param_.name;\\n      const preparedParam = prepareParameter({\\n        checksumAddress: checksumAddress2,\\n        parameter: param_,\\n        value: value[index2]\\n      });\\n      preparedParameters.push(preparedParam);\\n      if (preparedParam.dynamic)\\n        dynamic = true;\\n    }\\n    return {\\n      dynamic,\\n      encoded: dynamic ? encode(preparedParameters) : concat2(...preparedParameters.map(({ encoded }) => encoded))\\n    };\\n  }\\n  function getArrayComponents2(type) {\\n    const matches = type.match(/^(.*)\\\\[(\\\\d+)?\\\\]$/);\\n    return matches ? (\\n      // Return `null` if the array is dynamic.\\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\\n    ) : void 0;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/AbiParameters.js\\n  function encode2(parameters, values, options) {\\n    const { checksumAddress: checksumAddress2 = false } = options ?? {};\\n    if (parameters.length !== values.length)\\n      throw new LengthMismatchError({\\n        expectedLength: parameters.length,\\n        givenLength: values.length\\n      });\\n    const preparedParameters = prepareParameters({\\n      checksumAddress: checksumAddress2,\\n      parameters,\\n      values\\n    });\\n    const data = encode(preparedParameters);\\n    if (data.length === 0)\\n      return \"0x\";\\n    return data;\\n  }\\n  function encodePacked(types, values) {\\n    if (types.length !== values.length)\\n      throw new LengthMismatchError({\\n        expectedLength: types.length,\\n        givenLength: values.length\\n      });\\n    const data = [];\\n    for (let i = 0; i < types.length; i++) {\\n      const type = types[i];\\n      const value = values[i];\\n      data.push(encodePacked.encode(type, value));\\n    }\\n    return concat2(...data);\\n  }\\n  (function(encodePacked2) {\\n    function encode4(type, value, isArray = false) {\\n      if (type === \"address\") {\\n        const address = value;\\n        assert2(address);\\n        return padLeft(address.toLowerCase(), isArray ? 32 : 0);\\n      }\\n      if (type === \"string\")\\n        return fromString2(value);\\n      if (type === \"bytes\")\\n        return value;\\n      if (type === \"bool\")\\n        return padLeft(fromBoolean(value), isArray ? 32 : 1);\\n      const intMatch = type.match(integerRegex3);\\n      if (intMatch) {\\n        const [_type, baseType, bits = \"256\"] = intMatch;\\n        const size5 = Number.parseInt(bits) / 8;\\n        return fromNumber(value, {\\n          size: isArray ? 32 : size5,\\n          signed: baseType === \"int\"\\n        });\\n      }\\n      const bytesMatch = type.match(bytesRegex3);\\n      if (bytesMatch) {\\n        const [_type, size5] = bytesMatch;\\n        if (Number.parseInt(size5) !== (value.length - 2) / 2)\\n          throw new BytesSizeMismatchError2({\\n            expectedSize: Number.parseInt(size5),\\n            value\\n          });\\n        return padRight(value, isArray ? 32 : 0);\\n      }\\n      const arrayMatch = type.match(arrayRegex);\\n      if (arrayMatch && Array.isArray(value)) {\\n        const [_type, childType] = arrayMatch;\\n        const data = [];\\n        for (let i = 0; i < value.length; i++) {\\n          data.push(encode4(childType, value[i], true));\\n        }\\n        if (data.length === 0)\\n          return \"0x\";\\n        return concat2(...data);\\n      }\\n      throw new InvalidTypeError(type);\\n    }\\n    encodePacked2.encode = encode4;\\n  })(encodePacked || (encodePacked = {}));\\n  var ArrayLengthMismatchError = class extends BaseError3 {\\n    constructor({ expectedLength, givenLength, type }) {\\n      super(`Array length mismatch for type \\\\`${type}\\\\`. Expected: \\\\`${expectedLength}\\\\`. Given: \\\\`${givenLength}\\\\`.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiParameters.ArrayLengthMismatchError\"\\n      });\\n    }\\n  };\\n  var BytesSizeMismatchError2 = class extends BaseError3 {\\n    constructor({ expectedSize, value }) {\\n      super(`Size of bytes \"${value}\" (bytes${size4(value)}) does not match expected size (bytes${expectedSize}).`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiParameters.BytesSizeMismatchError\"\\n      });\\n    }\\n  };\\n  var LengthMismatchError = class extends BaseError3 {\\n    constructor({ expectedLength, givenLength }) {\\n      super([\\n        \"ABI encoding parameters/values length mismatch.\",\\n        `Expected length (parameters): ${expectedLength}`,\\n        `Given length (values): ${givenLength}`\\n      ].join(\"\\\\n\"));\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiParameters.LengthMismatchError\"\\n      });\\n    }\\n  };\\n  var InvalidArrayError2 = class extends BaseError3 {\\n    constructor(value) {\\n      super(`Value \\\\`${value}\\\\` is not a valid array.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiParameters.InvalidArrayError\"\\n      });\\n    }\\n  };\\n  var InvalidTypeError = class extends BaseError3 {\\n    constructor(type) {\\n      super(`Type \\\\`${type}\\\\` is not a valid ABI Type.`);\\n      Object.defineProperty(this, \"name\", {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        value: \"AbiParameters.InvalidTypeError\"\\n      });\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/AbiConstructor.js\\n  function encode3(abiConstructor, options) {\\n    const { bytecode, args } = options;\\n    return concat2(bytecode, abiConstructor.inputs?.length && args?.length ? encode2(abiConstructor.inputs, args) : \"0x\");\\n  }\\n  function from3(abiConstructor) {\\n    return from2(abiConstructor);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/ox@0.6.9_typescript@5.8.3_zod@3.24.3/node_modules/ox/_esm/core/AbiFunction.js\\n  function encodeData2(abiFunction, ...args) {\\n    const { overloads } = abiFunction;\\n    const item = overloads ? fromAbi2([abiFunction, ...overloads], abiFunction.name, {\\n      args: args[0]\\n    }) : abiFunction;\\n    const selector = getSelector2(item);\\n    const data = args.length > 0 ? encode2(item.inputs, args[0]) : void 0;\\n    return data ? concat2(selector, data) : selector;\\n  }\\n  function from4(abiFunction, options = {}) {\\n    return from2(abiFunction, options);\\n  }\\n  function fromAbi2(abi2, name, options) {\\n    const item = fromAbi(abi2, name, options);\\n    if (item.type !== \"function\")\\n      throw new NotFoundError({ name, type: \"function\" });\\n    return item;\\n  }\\n  function getSelector2(abiItem) {\\n    return getSelector(abiItem);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/simulateCalls.js\\n  init_parseAccount();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/constants/address.js\\n  var ethAddress = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\\n  var zeroAddress = \"0x0000000000000000000000000000000000000000\";\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/simulateCalls.js\\n  init_contracts();\\n  init_base();\\n  init_encodeFunctionData();\\n  var getBalanceCode = \"0x6080604052348015600e575f80fd5b5061016d8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063f8b2cb4f1461002d575b5f80fd5b610047600480360381019061004291906100db565b61005d565b604051610054919061011e565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100aa82610081565b9050919050565b6100ba816100a0565b81146100c4575f80fd5b50565b5f813590506100d5816100b1565b92915050565b5f602082840312156100f0576100ef61007d565b5b5f6100fd848285016100c7565b91505092915050565b5f819050919050565b61011881610106565b82525050565b5f6020820190506101315f83018461010f565b9291505056fea26469706673582212203b9fe929fe995c7cf9887f0bdba8a36dd78e8b73f149b17d2d9ad7cd09d2dc6264736f6c634300081a0033\";\\n  async function simulateCalls(client, parameters) {\\n    const { blockNumber, blockTag, calls, stateOverrides, traceAssetChanges, traceTransfers, validation } = parameters;\\n    const account = parameters.account ? parseAccount(parameters.account) : void 0;\\n    if (traceAssetChanges && !account)\\n      throw new BaseError2(\"`account` is required when `traceAssetChanges` is true\");\\n    const getBalanceData = account ? encode3(from3(\"constructor(bytes, bytes)\"), {\\n      bytecode: deploylessCallViaBytecodeBytecode,\\n      args: [\\n        getBalanceCode,\\n        encodeData2(from4(\"function getBalance(address)\"), [account.address])\\n      ]\\n    }) : void 0;\\n    const assetAddresses = traceAssetChanges ? await Promise.all(parameters.calls.map(async (call2) => {\\n      if (!call2.data && !call2.abi)\\n        return;\\n      const { accessList } = await createAccessList(client, {\\n        account: account.address,\\n        ...call2,\\n        data: call2.abi ? encodeFunctionData(call2) : call2.data\\n      });\\n      return accessList.map(({ address, storageKeys }) => storageKeys.length > 0 ? address : null);\\n    })).then((x) => x.flat().filter(Boolean)) : [];\\n    const resultsStateOverrides = stateOverrides?.map((override) => {\\n      if (override.address === account?.address)\\n        return {\\n          ...override,\\n          nonce: 0\\n        };\\n      return override;\\n    });\\n    const blocks = await simulateBlocks(client, {\\n      blockNumber,\\n      blockTag,\\n      blocks: [\\n        ...traceAssetChanges ? [\\n          // ETH pre balances\\n          {\\n            calls: [{ data: getBalanceData }],\\n            stateOverrides\\n          },\\n          // Asset pre balances\\n          {\\n            calls: assetAddresses.map((address, i) => ({\\n              abi: [\\n                from4(\"function balanceOf(address) returns (uint256)\")\\n              ],\\n              functionName: \"balanceOf\",\\n              args: [account.address],\\n              to: address,\\n              from: zeroAddress,\\n              nonce: i\\n            })),\\n            stateOverrides: [\\n              {\\n                address: zeroAddress,\\n                nonce: 0\\n              }\\n            ]\\n          }\\n        ] : [],\\n        {\\n          calls: [...calls, {}].map((call2, index2) => ({\\n            ...call2,\\n            from: account?.address,\\n            nonce: index2\\n          })),\\n          stateOverrides: resultsStateOverrides\\n        },\\n        ...traceAssetChanges ? [\\n          // ETH post balances\\n          {\\n            calls: [{ data: getBalanceData }]\\n          },\\n          // Asset post balances\\n          {\\n            calls: assetAddresses.map((address, i) => ({\\n              abi: [\\n                from4(\"function balanceOf(address) returns (uint256)\")\\n              ],\\n              functionName: \"balanceOf\",\\n              args: [account.address],\\n              to: address,\\n              from: zeroAddress,\\n              nonce: i\\n            })),\\n            stateOverrides: [\\n              {\\n                address: zeroAddress,\\n                nonce: 0\\n              }\\n            ]\\n          },\\n          // Decimals\\n          {\\n            calls: assetAddresses.map((address, i) => ({\\n              to: address,\\n              abi: [\\n                from4(\"function decimals() returns (uint256)\")\\n              ],\\n              functionName: \"decimals\",\\n              from: zeroAddress,\\n              nonce: i\\n            })),\\n            stateOverrides: [\\n              {\\n                address: zeroAddress,\\n                nonce: 0\\n              }\\n            ]\\n          },\\n          // Token URI\\n          {\\n            calls: assetAddresses.map((address, i) => ({\\n              to: address,\\n              abi: [\\n                from4(\"function tokenURI(uint256) returns (string)\")\\n              ],\\n              functionName: \"tokenURI\",\\n              args: [0n],\\n              from: zeroAddress,\\n              nonce: i\\n            })),\\n            stateOverrides: [\\n              {\\n                address: zeroAddress,\\n                nonce: 0\\n              }\\n            ]\\n          },\\n          // Symbols\\n          {\\n            calls: assetAddresses.map((address, i) => ({\\n              to: address,\\n              abi: [from4(\"function symbol() returns (string)\")],\\n              functionName: \"symbol\",\\n              from: zeroAddress,\\n              nonce: i\\n            })),\\n            stateOverrides: [\\n              {\\n                address: zeroAddress,\\n                nonce: 0\\n              }\\n            ]\\n          }\\n        ] : []\\n      ],\\n      traceTransfers,\\n      validation\\n    });\\n    const block_results = traceAssetChanges ? blocks[2] : blocks[0];\\n    const [block_ethPre, block_assetsPre, , block_ethPost, block_assetsPost, block_decimals, block_tokenURI, block_symbols] = traceAssetChanges ? blocks : [];\\n    const { calls: block_calls, ...block } = block_results;\\n    const results = block_calls.slice(0, -1) ?? [];\\n    const ethPre = block_ethPre?.calls ?? [];\\n    const assetsPre = block_assetsPre?.calls ?? [];\\n    const balancesPre = [...ethPre, ...assetsPre].map((call2) => call2.status === \"success\" ? hexToBigInt(call2.data) : null);\\n    const ethPost = block_ethPost?.calls ?? [];\\n    const assetsPost = block_assetsPost?.calls ?? [];\\n    const balancesPost = [...ethPost, ...assetsPost].map((call2) => call2.status === \"success\" ? hexToBigInt(call2.data) : null);\\n    const decimals = (block_decimals?.calls ?? []).map((x) => x.status === \"success\" ? x.result : null);\\n    const symbols = (block_symbols?.calls ?? []).map((x) => x.status === \"success\" ? x.result : null);\\n    const tokenURI = (block_tokenURI?.calls ?? []).map((x) => x.status === \"success\" ? x.result : null);\\n    const changes = [];\\n    for (const [i, balancePost] of balancesPost.entries()) {\\n      const balancePre = balancesPre[i];\\n      if (typeof balancePost !== \"bigint\")\\n        continue;\\n      if (typeof balancePre !== \"bigint\")\\n        continue;\\n      const decimals_ = decimals[i - 1];\\n      const symbol_ = symbols[i - 1];\\n      const tokenURI_ = tokenURI[i - 1];\\n      const token = (() => {\\n        if (i === 0)\\n          return {\\n            address: ethAddress,\\n            decimals: 18,\\n            symbol: \"ETH\"\\n          };\\n        return {\\n          address: assetAddresses[i - 1],\\n          decimals: tokenURI_ || decimals_ ? Number(decimals_ ?? 1) : void 0,\\n          symbol: symbol_ ?? void 0\\n        };\\n      })();\\n      if (changes.some((change) => change.token.address === token.address))\\n        continue;\\n      changes.push({\\n        token,\\n        value: {\\n          pre: balancePre,\\n          post: balancePost,\\n          diff: balancePost - balancePre\\n        }\\n      });\\n    }\\n    return {\\n      assetChanges: changes,\\n      block,\\n      results\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/verifyHash.js\\n  init_abis();\\n  init_contracts();\\n  init_contract();\\n  init_encodeDeployData();\\n  init_getAddress();\\n  init_isAddressEqual();\\n  init_isHex();\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/signature/serializeSignature.js\\n  init_secp256k1();\\n  init_fromHex();\\n  init_toBytes();\\n  function serializeSignature({ r, s, to = \"hex\", v, yParity }) {\\n    const yParity_ = (() => {\\n      if (yParity === 0 || yParity === 1)\\n        return yParity;\\n      if (v && (v === 27n || v === 28n || v >= 35n))\\n        return v % 2n === 0n ? 1 : 0;\\n      throw new Error(\"Invalid `v` or `yParity` value\");\\n    })();\\n    const signature = `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${yParity_ === 0 ? \"1b\" : \"1c\"}`;\\n    if (to === \"hex\")\\n      return signature;\\n    return hexToBytes(signature);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/verifyHash.js\\n  init_call();\\n  async function verifyHash(client, parameters) {\\n    const { address, factory, factoryData, hash: hash2, signature, universalSignatureVerifierAddress = client.chain?.contracts?.universalSignatureVerifier?.address, ...rest } = parameters;\\n    const signatureHex = (() => {\\n      if (isHex(signature))\\n        return signature;\\n      if (typeof signature === \"object\" && \"r\" in signature && \"s\" in signature)\\n        return serializeSignature(signature);\\n      return bytesToHex(signature);\\n    })();\\n    const wrappedSignature = await (async () => {\\n      if (!factory && !factoryData)\\n        return signatureHex;\\n      if (isErc6492Signature(signatureHex))\\n        return signatureHex;\\n      return serializeErc6492Signature({\\n        address: factory,\\n        data: factoryData,\\n        signature: signatureHex\\n      });\\n    })();\\n    try {\\n      const args = universalSignatureVerifierAddress ? {\\n        to: universalSignatureVerifierAddress,\\n        data: encodeFunctionData({\\n          abi: universalSignatureValidatorAbi,\\n          functionName: \"isValidSig\",\\n          args: [address, hash2, wrappedSignature]\\n        }),\\n        ...rest\\n      } : {\\n        data: encodeDeployData({\\n          abi: universalSignatureValidatorAbi,\\n          args: [address, hash2, wrappedSignature],\\n          bytecode: universalSignatureValidatorByteCode\\n        }),\\n        ...rest\\n      };\\n      const { data } = await getAction(client, call, \"call\")(args);\\n      return hexToBool(data ?? \"0x0\");\\n    } catch (error) {\\n      try {\\n        const verified = isAddressEqual(getAddress(address), await recoverAddress({ hash: hash2, signature }));\\n        if (verified)\\n          return true;\\n      } catch {\\n      }\\n      if (error instanceof CallExecutionError) {\\n        return false;\\n      }\\n      throw error;\\n    }\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/verifyMessage.js\\n  async function verifyMessage(client, { address, message, factory, factoryData, signature, ...callRequest }) {\\n    const hash2 = hashMessage(message);\\n    return verifyHash(client, {\\n      address,\\n      factory,\\n      factoryData,\\n      hash: hash2,\\n      signature,\\n      ...callRequest\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/verifyTypedData.js\\n  async function verifyTypedData(client, parameters) {\\n    const { address, factory, factoryData, signature, message, primaryType, types, domain, ...callRequest } = parameters;\\n    const hash2 = hashTypedData({ message, primaryType, types, domain });\\n    return verifyHash(client, {\\n      address,\\n      factory,\\n      factoryData,\\n      hash: hash2,\\n      signature,\\n      ...callRequest\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/waitForTransactionReceipt.js\\n  init_transaction();\\n  init_withResolvers();\\n  init_stringify();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchBlockNumber.js\\n  init_fromHex();\\n  init_stringify();\\n  function watchBlockNumber(client, { emitOnBegin = false, emitMissed = false, onBlockNumber, onError, poll: poll_, pollingInterval = client.pollingInterval }) {\\n    const enablePolling = (() => {\\n      if (typeof poll_ !== \"undefined\")\\n        return poll_;\\n      if (client.transport.type === \"webSocket\")\\n        return false;\\n      if (client.transport.type === \"fallback\" && client.transport.transports[0].config.type === \"webSocket\")\\n        return false;\\n      return true;\\n    })();\\n    let prevBlockNumber;\\n    const pollBlockNumber = () => {\\n      const observerId = stringify([\\n        \"watchBlockNumber\",\\n        client.uid,\\n        emitOnBegin,\\n        emitMissed,\\n        pollingInterval\\n      ]);\\n      return observe(observerId, { onBlockNumber, onError }, (emit) => poll(async () => {\\n        try {\\n          const blockNumber = await getAction(client, getBlockNumber, \"getBlockNumber\")({ cacheTime: 0 });\\n          if (prevBlockNumber) {\\n            if (blockNumber === prevBlockNumber)\\n              return;\\n            if (blockNumber - prevBlockNumber > 1 && emitMissed) {\\n              for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\\n                emit.onBlockNumber(i, prevBlockNumber);\\n                prevBlockNumber = i;\\n              }\\n            }\\n          }\\n          if (!prevBlockNumber || blockNumber > prevBlockNumber) {\\n            emit.onBlockNumber(blockNumber, prevBlockNumber);\\n            prevBlockNumber = blockNumber;\\n          }\\n        } catch (err) {\\n          emit.onError?.(err);\\n        }\\n      }, {\\n        emitOnBegin,\\n        interval: pollingInterval\\n      }));\\n    };\\n    const subscribeBlockNumber = () => {\\n      const observerId = stringify([\\n        \"watchBlockNumber\",\\n        client.uid,\\n        emitOnBegin,\\n        emitMissed\\n      ]);\\n      return observe(observerId, { onBlockNumber, onError }, (emit) => {\\n        let active = true;\\n        let unsubscribe = () => active = false;\\n        (async () => {\\n          try {\\n            const transport = (() => {\\n              if (client.transport.type === \"fallback\") {\\n                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === \"webSocket\");\\n                if (!transport2)\\n                  return client.transport;\\n                return transport2.value;\\n              }\\n              return client.transport;\\n            })();\\n            const { unsubscribe: unsubscribe_ } = await transport.subscribe({\\n              params: [\"newHeads\"],\\n              onData(data) {\\n                if (!active)\\n                  return;\\n                const blockNumber = hexToBigInt(data.result?.number);\\n                emit.onBlockNumber(blockNumber, prevBlockNumber);\\n                prevBlockNumber = blockNumber;\\n              },\\n              onError(error) {\\n                emit.onError?.(error);\\n              }\\n            });\\n            unsubscribe = unsubscribe_;\\n            if (!active)\\n              unsubscribe();\\n          } catch (err) {\\n            onError?.(err);\\n          }\\n        })();\\n        return () => unsubscribe();\\n      });\\n    };\\n    return enablePolling ? pollBlockNumber() : subscribeBlockNumber();\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/waitForTransactionReceipt.js\\n  async function waitForTransactionReceipt(client, {\\n    confirmations = 1,\\n    hash: hash2,\\n    onReplaced,\\n    pollingInterval = client.pollingInterval,\\n    retryCount = 6,\\n    retryDelay = ({ count }) => ~~(1 << count) * 200,\\n    // exponential backoff\\n    timeout = 18e4\\n  }) {\\n    const observerId = stringify([\"waitForTransactionReceipt\", client.uid, hash2]);\\n    let transaction;\\n    let replacedTransaction;\\n    let receipt;\\n    let retrying = false;\\n    const { promise, resolve, reject } = withResolvers();\\n    const timer = timeout ? setTimeout(() => reject(new WaitForTransactionReceiptTimeoutError({ hash: hash2 })), timeout) : void 0;\\n    const _unobserve = observe(observerId, { onReplaced, resolve, reject }, (emit) => {\\n      const _unwatch = getAction(client, watchBlockNumber, \"watchBlockNumber\")({\\n        emitMissed: true,\\n        emitOnBegin: true,\\n        poll: true,\\n        pollingInterval,\\n        async onBlockNumber(blockNumber_) {\\n          const done = (fn) => {\\n            clearTimeout(timer);\\n            _unwatch();\\n            fn();\\n            _unobserve();\\n          };\\n          let blockNumber = blockNumber_;\\n          if (retrying)\\n            return;\\n          try {\\n            if (receipt) {\\n              if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))\\n                return;\\n              done(() => emit.resolve(receipt));\\n              return;\\n            }\\n            if (!transaction) {\\n              retrying = true;\\n              await withRetry(async () => {\\n                transaction = await getAction(client, getTransaction, \"getTransaction\")({ hash: hash2 });\\n                if (transaction.blockNumber)\\n                  blockNumber = transaction.blockNumber;\\n              }, {\\n                delay: retryDelay,\\n                retryCount\\n              });\\n              retrying = false;\\n            }\\n            receipt = await getAction(client, getTransactionReceipt, \"getTransactionReceipt\")({ hash: hash2 });\\n            if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))\\n              return;\\n            done(() => emit.resolve(receipt));\\n          } catch (err) {\\n            if (err instanceof TransactionNotFoundError || err instanceof TransactionReceiptNotFoundError) {\\n              if (!transaction) {\\n                retrying = false;\\n                return;\\n              }\\n              try {\\n                replacedTransaction = transaction;\\n                retrying = true;\\n                const block = await withRetry(() => getAction(client, getBlock, \"getBlock\")({\\n                  blockNumber,\\n                  includeTransactions: true\\n                }), {\\n                  delay: retryDelay,\\n                  retryCount,\\n                  shouldRetry: ({ error }) => error instanceof BlockNotFoundError\\n                });\\n                retrying = false;\\n                const replacementTransaction = block.transactions.find(({ from: from5, nonce }) => from5 === replacedTransaction.from && nonce === replacedTransaction.nonce);\\n                if (!replacementTransaction)\\n                  return;\\n                receipt = await getAction(client, getTransactionReceipt, \"getTransactionReceipt\")({\\n                  hash: replacementTransaction.hash\\n                });\\n                if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))\\n                  return;\\n                let reason = \"replaced\";\\n                if (replacementTransaction.to === replacedTransaction.to && replacementTransaction.value === replacedTransaction.value && replacementTransaction.input === replacedTransaction.input) {\\n                  reason = \"repriced\";\\n                } else if (replacementTransaction.from === replacementTransaction.to && replacementTransaction.value === 0n) {\\n                  reason = \"cancelled\";\\n                }\\n                done(() => {\\n                  emit.onReplaced?.({\\n                    reason,\\n                    replacedTransaction,\\n                    transaction: replacementTransaction,\\n                    transactionReceipt: receipt\\n                  });\\n                  emit.resolve(receipt);\\n                });\\n              } catch (err_) {\\n                done(() => emit.reject(err_));\\n              }\\n            } else {\\n              done(() => emit.reject(err));\\n            }\\n          }\\n        }\\n      });\\n    });\\n    return promise;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchBlocks.js\\n  init_stringify();\\n  function watchBlocks(client, { blockTag = \"latest\", emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval }) {\\n    const enablePolling = (() => {\\n      if (typeof poll_ !== \"undefined\")\\n        return poll_;\\n      if (client.transport.type === \"webSocket\")\\n        return false;\\n      if (client.transport.type === \"fallback\" && client.transport.transports[0].config.type === \"webSocket\")\\n        return false;\\n      return true;\\n    })();\\n    const includeTransactions = includeTransactions_ ?? false;\\n    let prevBlock;\\n    const pollBlocks = () => {\\n      const observerId = stringify([\\n        \"watchBlocks\",\\n        client.uid,\\n        blockTag,\\n        emitMissed,\\n        emitOnBegin,\\n        includeTransactions,\\n        pollingInterval\\n      ]);\\n      return observe(observerId, { onBlock, onError }, (emit) => poll(async () => {\\n        try {\\n          const block = await getAction(client, getBlock, \"getBlock\")({\\n            blockTag,\\n            includeTransactions\\n          });\\n          if (block.number && prevBlock?.number) {\\n            if (block.number === prevBlock.number)\\n              return;\\n            if (block.number - prevBlock.number > 1 && emitMissed) {\\n              for (let i = prevBlock?.number + 1n; i < block.number; i++) {\\n                const block2 = await getAction(client, getBlock, \"getBlock\")({\\n                  blockNumber: i,\\n                  includeTransactions\\n                });\\n                emit.onBlock(block2, prevBlock);\\n                prevBlock = block2;\\n              }\\n            }\\n          }\\n          if (\\n            // If no previous block exists, emit.\\n            !prevBlock?.number || // If the block tag is \"pending\" with no block number, emit.\\n            blockTag === \"pending\" && !block?.number || // If the next block number is greater than the previous block number, emit.\\n            // We don\\'t want to emit blocks in the past.\\n            block.number && block.number > prevBlock.number\\n          ) {\\n            emit.onBlock(block, prevBlock);\\n            prevBlock = block;\\n          }\\n        } catch (err) {\\n          emit.onError?.(err);\\n        }\\n      }, {\\n        emitOnBegin,\\n        interval: pollingInterval\\n      }));\\n    };\\n    const subscribeBlocks = () => {\\n      let active = true;\\n      let emitFetched = true;\\n      let unsubscribe = () => active = false;\\n      (async () => {\\n        try {\\n          if (emitOnBegin) {\\n            getAction(client, getBlock, \"getBlock\")({\\n              blockTag,\\n              includeTransactions\\n            }).then((block) => {\\n              if (!active)\\n                return;\\n              if (!emitFetched)\\n                return;\\n              onBlock(block, void 0);\\n              emitFetched = false;\\n            });\\n          }\\n          const transport = (() => {\\n            if (client.transport.type === \"fallback\") {\\n              const transport2 = client.transport.transports.find((transport3) => transport3.config.type === \"webSocket\");\\n              if (!transport2)\\n                return client.transport;\\n              return transport2.value;\\n            }\\n            return client.transport;\\n          })();\\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\\n            params: [\"newHeads\"],\\n            async onData(data) {\\n              if (!active)\\n                return;\\n              const block = await getAction(client, getBlock, \"getBlock\")({\\n                blockNumber: data.blockNumber,\\n                includeTransactions\\n              }).catch(() => {\\n              });\\n              if (!active)\\n                return;\\n              onBlock(block, prevBlock);\\n              emitFetched = false;\\n              prevBlock = block;\\n            },\\n            onError(error) {\\n              onError?.(error);\\n            }\\n          });\\n          unsubscribe = unsubscribe_;\\n          if (!active)\\n            unsubscribe();\\n        } catch (err) {\\n          onError?.(err);\\n        }\\n      })();\\n      return () => unsubscribe();\\n    };\\n    return enablePolling ? pollBlocks() : subscribeBlocks();\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchEvent.js\\n  init_stringify();\\n  init_abi();\\n  init_rpc();\\n  function watchEvent(client, { address, args, batch = true, event, events, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ }) {\\n    const enablePolling = (() => {\\n      if (typeof poll_ !== \"undefined\")\\n        return poll_;\\n      if (typeof fromBlock === \"bigint\")\\n        return true;\\n      if (client.transport.type === \"webSocket\")\\n        return false;\\n      if (client.transport.type === \"fallback\" && client.transport.transports[0].config.type === \"webSocket\")\\n        return false;\\n      return true;\\n    })();\\n    const strict = strict_ ?? false;\\n    const pollEvent = () => {\\n      const observerId = stringify([\\n        \"watchEvent\",\\n        address,\\n        args,\\n        batch,\\n        client.uid,\\n        event,\\n        pollingInterval,\\n        fromBlock\\n      ]);\\n      return observe(observerId, { onLogs, onError }, (emit) => {\\n        let previousBlockNumber;\\n        if (fromBlock !== void 0)\\n          previousBlockNumber = fromBlock - 1n;\\n        let filter;\\n        let initialized = false;\\n        const unwatch = poll(async () => {\\n          if (!initialized) {\\n            try {\\n              filter = await getAction(client, createEventFilter, \"createEventFilter\")({\\n                address,\\n                args,\\n                event,\\n                events,\\n                strict,\\n                fromBlock\\n              });\\n            } catch {\\n            }\\n            initialized = true;\\n            return;\\n          }\\n          try {\\n            let logs;\\n            if (filter) {\\n              logs = await getAction(client, getFilterChanges, \"getFilterChanges\")({ filter });\\n            } else {\\n              const blockNumber = await getAction(client, getBlockNumber, \"getBlockNumber\")({});\\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\\n                logs = await getAction(client, getLogs, \"getLogs\")({\\n                  address,\\n                  args,\\n                  event,\\n                  events,\\n                  fromBlock: previousBlockNumber + 1n,\\n                  toBlock: blockNumber\\n                });\\n              } else {\\n                logs = [];\\n              }\\n              previousBlockNumber = blockNumber;\\n            }\\n            if (logs.length === 0)\\n              return;\\n            if (batch)\\n              emit.onLogs(logs);\\n            else\\n              for (const log of logs)\\n                emit.onLogs([log]);\\n          } catch (err) {\\n            if (filter && err instanceof InvalidInputRpcError)\\n              initialized = false;\\n            emit.onError?.(err);\\n          }\\n        }, {\\n          emitOnBegin: true,\\n          interval: pollingInterval\\n        });\\n        return async () => {\\n          if (filter)\\n            await getAction(client, uninstallFilter, \"uninstallFilter\")({ filter });\\n          unwatch();\\n        };\\n      });\\n    };\\n    const subscribeEvent = () => {\\n      let active = true;\\n      let unsubscribe = () => active = false;\\n      (async () => {\\n        try {\\n          const transport = (() => {\\n            if (client.transport.type === \"fallback\") {\\n              const transport2 = client.transport.transports.find((transport3) => transport3.config.type === \"webSocket\");\\n              if (!transport2)\\n                return client.transport;\\n              return transport2.value;\\n            }\\n            return client.transport;\\n          })();\\n          const events_ = events ?? (event ? [event] : void 0);\\n          let topics = [];\\n          if (events_) {\\n            const encoded = events_.flatMap((event2) => encodeEventTopics({\\n              abi: [event2],\\n              eventName: event2.name,\\n              args\\n            }));\\n            topics = [encoded];\\n            if (event)\\n              topics = topics[0];\\n          }\\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\\n            params: [\"logs\", { address, topics }],\\n            onData(data) {\\n              if (!active)\\n                return;\\n              const log = data.result;\\n              try {\\n                const { eventName, args: args2 } = decodeEventLog({\\n                  abi: events_ ?? [],\\n                  data: log.data,\\n                  topics: log.topics,\\n                  strict\\n                });\\n                const formatted = formatLog(log, { args: args2, eventName });\\n                onLogs([formatted]);\\n              } catch (err) {\\n                let eventName;\\n                let isUnnamed;\\n                if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\\n                  if (strict_)\\n                    return;\\n                  eventName = err.abiItem.name;\\n                  isUnnamed = err.abiItem.inputs?.some((x) => !(\"name\" in x && x.name));\\n                }\\n                const formatted = formatLog(log, {\\n                  args: isUnnamed ? [] : {},\\n                  eventName\\n                });\\n                onLogs([formatted]);\\n              }\\n            },\\n            onError(error) {\\n              onError?.(error);\\n            }\\n          });\\n          unsubscribe = unsubscribe_;\\n          if (!active)\\n            unsubscribe();\\n        } catch (err) {\\n          onError?.(err);\\n        }\\n      })();\\n      return () => unsubscribe();\\n    };\\n    return enablePolling ? pollEvent() : subscribeEvent();\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/public/watchPendingTransactions.js\\n  init_stringify();\\n  function watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval }) {\\n    const enablePolling = typeof poll_ !== \"undefined\" ? poll_ : client.transport.type !== \"webSocket\";\\n    const pollPendingTransactions = () => {\\n      const observerId = stringify([\\n        \"watchPendingTransactions\",\\n        client.uid,\\n        batch,\\n        pollingInterval\\n      ]);\\n      return observe(observerId, { onTransactions, onError }, (emit) => {\\n        let filter;\\n        const unwatch = poll(async () => {\\n          try {\\n            if (!filter) {\\n              try {\\n                filter = await getAction(client, createPendingTransactionFilter, \"createPendingTransactionFilter\")({});\\n                return;\\n              } catch (err) {\\n                unwatch();\\n                throw err;\\n              }\\n            }\\n            const hashes = await getAction(client, getFilterChanges, \"getFilterChanges\")({ filter });\\n            if (hashes.length === 0)\\n              return;\\n            if (batch)\\n              emit.onTransactions(hashes);\\n            else\\n              for (const hash2 of hashes)\\n                emit.onTransactions([hash2]);\\n          } catch (err) {\\n            emit.onError?.(err);\\n          }\\n        }, {\\n          emitOnBegin: true,\\n          interval: pollingInterval\\n        });\\n        return async () => {\\n          if (filter)\\n            await getAction(client, uninstallFilter, \"uninstallFilter\")({ filter });\\n          unwatch();\\n        };\\n      });\\n    };\\n    const subscribePendingTransactions = () => {\\n      let active = true;\\n      let unsubscribe = () => active = false;\\n      (async () => {\\n        try {\\n          const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\\n            params: [\"newPendingTransactions\"],\\n            onData(data) {\\n              if (!active)\\n                return;\\n              const transaction = data.result;\\n              onTransactions([transaction]);\\n            },\\n            onError(error) {\\n              onError?.(error);\\n            }\\n          });\\n          unsubscribe = unsubscribe_;\\n          if (!active)\\n            unsubscribe();\\n        } catch (err) {\\n          onError?.(err);\\n        }\\n      })();\\n      return () => unsubscribe();\\n    };\\n    return enablePolling ? pollPendingTransactions() : subscribePendingTransactions();\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/siwe/parseSiweMessage.js\\n  function parseSiweMessage(message) {\\n    const { scheme, statement, ...prefix } = message.match(prefixRegex)?.groups ?? {};\\n    const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } = message.match(suffixRegex)?.groups ?? {};\\n    const resources = message.split(\"Resources:\")[1]?.split(\"\\\\n- \").slice(1);\\n    return {\\n      ...prefix,\\n      ...suffix,\\n      ...chainId ? { chainId: Number(chainId) } : {},\\n      ...expirationTime ? { expirationTime: new Date(expirationTime) } : {},\\n      ...issuedAt ? { issuedAt: new Date(issuedAt) } : {},\\n      ...notBefore ? { notBefore: new Date(notBefore) } : {},\\n      ...requestId ? { requestId } : {},\\n      ...resources ? { resources } : {},\\n      ...scheme ? { scheme } : {},\\n      ...statement ? { statement } : {}\\n    };\\n  }\\n  var prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\\\/\\\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\\\n)(?<address>0x[a-fA-F0-9]{40})\\\\n\\\\n(?:(?<statement>.*)\\\\n\\\\n)?/;\\n  var suffixRegex = /(?:URI: (?<uri>.+))\\\\n(?:Version: (?<version>.+))\\\\n(?:Chain ID: (?<chainId>\\\\d+))\\\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\\\n(?:Issued At: (?<issuedAt>.+))(?:\\\\nExpiration Time: (?<expirationTime>.+))?(?:\\\\nNot Before: (?<notBefore>.+))?(?:\\\\nRequest ID: (?<requestId>.+))?/;\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/utils/siwe/validateSiweMessage.js\\n  init_isAddressEqual();\\n  function validateSiweMessage(parameters) {\\n    const { address, domain, message, nonce, scheme, time = /* @__PURE__ */ new Date() } = parameters;\\n    if (domain && message.domain !== domain)\\n      return false;\\n    if (nonce && message.nonce !== nonce)\\n      return false;\\n    if (scheme && message.scheme !== scheme)\\n      return false;\\n    if (message.expirationTime && time >= message.expirationTime)\\n      return false;\\n    if (message.notBefore && time < message.notBefore)\\n      return false;\\n    try {\\n      if (!message.address)\\n        return false;\\n      if (address && !isAddressEqual(message.address, address))\\n        return false;\\n    } catch {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/siwe/verifySiweMessage.js\\n  async function verifySiweMessage(client, parameters) {\\n    const { address, domain, message, nonce, scheme, signature, time = /* @__PURE__ */ new Date(), ...callRequest } = parameters;\\n    const parsed = parseSiweMessage(message);\\n    if (!parsed.address)\\n      return false;\\n    const isValid2 = validateSiweMessage({\\n      address,\\n      domain,\\n      message: parsed,\\n      nonce,\\n      scheme,\\n      time\\n    });\\n    if (!isValid2)\\n      return false;\\n    const hash2 = hashMessage(message);\\n    return verifyHash(client, {\\n      address: parsed.address,\\n      hash: hash2,\\n      signature,\\n      ...callRequest\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/decorators/public.js\\n  function publicActions(client) {\\n    return {\\n      call: (args) => call(client, args),\\n      createAccessList: (args) => createAccessList(client, args),\\n      createBlockFilter: () => createBlockFilter(client),\\n      createContractEventFilter: (args) => createContractEventFilter(client, args),\\n      createEventFilter: (args) => createEventFilter(client, args),\\n      createPendingTransactionFilter: () => createPendingTransactionFilter(client),\\n      estimateContractGas: (args) => estimateContractGas(client, args),\\n      estimateGas: (args) => estimateGas(client, args),\\n      getBalance: (args) => getBalance(client, args),\\n      getBlobBaseFee: () => getBlobBaseFee(client),\\n      getBlock: (args) => getBlock(client, args),\\n      getBlockNumber: (args) => getBlockNumber(client, args),\\n      getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\\n      getBytecode: (args) => getCode(client, args),\\n      getChainId: () => getChainId(client),\\n      getCode: (args) => getCode(client, args),\\n      getContractEvents: (args) => getContractEvents(client, args),\\n      getEip712Domain: (args) => getEip712Domain(client, args),\\n      getEnsAddress: (args) => getEnsAddress(client, args),\\n      getEnsAvatar: (args) => getEnsAvatar(client, args),\\n      getEnsName: (args) => getEnsName(client, args),\\n      getEnsResolver: (args) => getEnsResolver(client, args),\\n      getEnsText: (args) => getEnsText(client, args),\\n      getFeeHistory: (args) => getFeeHistory(client, args),\\n      estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\\n      getFilterChanges: (args) => getFilterChanges(client, args),\\n      getFilterLogs: (args) => getFilterLogs(client, args),\\n      getGasPrice: () => getGasPrice(client),\\n      getLogs: (args) => getLogs(client, args),\\n      getProof: (args) => getProof(client, args),\\n      estimateMaxPriorityFeePerGas: (args) => estimateMaxPriorityFeePerGas(client, args),\\n      getStorageAt: (args) => getStorageAt(client, args),\\n      getTransaction: (args) => getTransaction(client, args),\\n      getTransactionConfirmations: (args) => getTransactionConfirmations(client, args),\\n      getTransactionCount: (args) => getTransactionCount(client, args),\\n      getTransactionReceipt: (args) => getTransactionReceipt(client, args),\\n      multicall: (args) => multicall(client, args),\\n      prepareTransactionRequest: (args) => prepareTransactionRequest(client, args),\\n      readContract: (args) => readContract(client, args),\\n      sendRawTransaction: (args) => sendRawTransaction(client, args),\\n      simulate: (args) => simulateBlocks(client, args),\\n      simulateBlocks: (args) => simulateBlocks(client, args),\\n      simulateCalls: (args) => simulateCalls(client, args),\\n      simulateContract: (args) => simulateContract(client, args),\\n      verifyMessage: (args) => verifyMessage(client, args),\\n      verifySiweMessage: (args) => verifySiweMessage(client, args),\\n      verifyTypedData: (args) => verifyTypedData(client, args),\\n      uninstallFilter: (args) => uninstallFilter(client, args),\\n      waitForTransactionReceipt: (args) => waitForTransactionReceipt(client, args),\\n      watchBlocks: (args) => watchBlocks(client, args),\\n      watchBlockNumber: (args) => watchBlockNumber(client, args),\\n      watchContractEvent: (args) => watchContractEvent(client, args),\\n      watchEvent: (args) => watchEvent(client, args),\\n      watchPendingTransactions: (args) => watchPendingTransactions(client, args)\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/createPublicClient.js\\n  function createPublicClient(parameters) {\\n    const { key = \"public\", name = \"Public Client\" } = parameters;\\n    const client = createClient({\\n      ...parameters,\\n      key,\\n      name,\\n      type: \"publicClient\"\\n    });\\n    return client.extend(publicActions);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/addChain.js\\n  init_toHex();\\n  async function addChain(client, { chain }) {\\n    const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain;\\n    await client.request({\\n      method: \"wallet_addEthereumChain\",\\n      params: [\\n        {\\n          chainId: numberToHex(id),\\n          chainName: name,\\n          nativeCurrency,\\n          rpcUrls: rpcUrls.default.http,\\n          blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(({ url }) => url) : void 0\\n        }\\n      ]\\n    }, { dedupe: true, retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/deployContract.js\\n  init_encodeDeployData();\\n  function deployContract(walletClient, parameters) {\\n    const { abi: abi2, args, bytecode, ...request } = parameters;\\n    const calldata = encodeDeployData({ abi: abi2, args, bytecode });\\n    return sendTransaction(walletClient, {\\n      ...request,\\n      ...request.authorizationList ? { to: null } : {},\\n      data: calldata\\n    });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/getAddresses.js\\n  init_getAddress();\\n  async function getAddresses(client) {\\n    if (client.account?.type === \"local\")\\n      return [client.account.address];\\n    const addresses = await client.request({ method: \"eth_accounts\" }, { dedupe: true });\\n    return addresses.map((address) => checksumAddress(address));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/getPermissions.js\\n  async function getPermissions(client) {\\n    const permissions = await client.request({ method: \"wallet_getPermissions\" }, { dedupe: true });\\n    return permissions;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/prepareAuthorization.js\\n  init_parseAccount();\\n  init_isAddressEqual();\\n  async function prepareAuthorization(client, parameters) {\\n    const { account: account_ = client.account, chainId, nonce } = parameters;\\n    if (!account_)\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/eip7702/prepareAuthorization\"\\n      });\\n    const account = parseAccount(account_);\\n    const executor = (() => {\\n      if (!parameters.executor)\\n        return void 0;\\n      if (parameters.executor === \"self\")\\n        return parameters.executor;\\n      return parseAccount(parameters.executor);\\n    })();\\n    const authorization = {\\n      address: parameters.contractAddress ?? parameters.address,\\n      chainId,\\n      nonce\\n    };\\n    if (typeof authorization.chainId === \"undefined\")\\n      authorization.chainId = client.chain?.id ?? await getAction(client, getChainId, \"getChainId\")({});\\n    if (typeof authorization.nonce === \"undefined\") {\\n      authorization.nonce = await getAction(client, getTransactionCount, \"getTransactionCount\")({\\n        address: account.address,\\n        blockTag: \"pending\"\\n      });\\n      if (executor === \"self\" || executor?.address && isAddressEqual(executor.address, account.address))\\n        authorization.nonce += 1;\\n    }\\n    return authorization;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/requestAddresses.js\\n  init_getAddress();\\n  async function requestAddresses(client) {\\n    const addresses = await client.request({ method: \"eth_requestAccounts\" }, { dedupe: true, retryCount: 0 });\\n    return addresses.map((address) => getAddress(address));\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/requestPermissions.js\\n  async function requestPermissions(client, permissions) {\\n    return client.request({\\n      method: \"wallet_requestPermissions\",\\n      params: [permissions]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/signAuthorization.js\\n  init_parseAccount();\\n  async function signAuthorization(client, parameters) {\\n    const { account: account_ = client.account } = parameters;\\n    if (!account_)\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/eip7702/signAuthorization\"\\n      });\\n    const account = parseAccount(account_);\\n    if (!account.signAuthorization)\\n      throw new AccountTypeNotSupportedError({\\n        docsPath: \"/docs/eip7702/signAuthorization\",\\n        metaMessages: [\\n          \"The `signAuthorization` Action does not support JSON-RPC Accounts.\"\\n        ],\\n        type: account.type\\n      });\\n    const authorization = await prepareAuthorization(client, parameters);\\n    return account.signAuthorization(authorization);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/signMessage.js\\n  init_parseAccount();\\n  init_toHex();\\n  async function signMessage(client, { account: account_ = client.account, message }) {\\n    if (!account_)\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/actions/wallet/signMessage\"\\n      });\\n    const account = parseAccount(account_);\\n    if (account.signMessage)\\n      return account.signMessage({ message });\\n    const message_ = (() => {\\n      if (typeof message === \"string\")\\n        return stringToHex(message);\\n      if (message.raw instanceof Uint8Array)\\n        return toHex(message.raw);\\n      return message.raw;\\n    })();\\n    return client.request({\\n      method: \"personal_sign\",\\n      params: [message_, account.address]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/signTransaction.js\\n  init_parseAccount();\\n  init_toHex();\\n  init_transactionRequest();\\n  init_assertRequest();\\n  async function signTransaction(client, parameters) {\\n    const { account: account_ = client.account, chain = client.chain, ...transaction } = parameters;\\n    if (!account_)\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/actions/wallet/signTransaction\"\\n      });\\n    const account = parseAccount(account_);\\n    assertRequest({\\n      account,\\n      ...parameters\\n    });\\n    const chainId = await getAction(client, getChainId, \"getChainId\")({});\\n    if (chain !== null)\\n      assertCurrentChain({\\n        currentChainId: chainId,\\n        chain\\n      });\\n    const formatters2 = chain?.formatters || client.chain?.formatters;\\n    const format = formatters2?.transactionRequest?.format || formatTransactionRequest;\\n    if (account.signTransaction)\\n      return account.signTransaction({\\n        ...transaction,\\n        chainId\\n      }, { serializer: client.chain?.serializers?.transaction });\\n    return await client.request({\\n      method: \"eth_signTransaction\",\\n      params: [\\n        {\\n          ...format(transaction),\\n          chainId: numberToHex(chainId),\\n          from: account.address\\n        }\\n      ]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/signTypedData.js\\n  init_parseAccount();\\n  async function signTypedData(client, parameters) {\\n    const { account: account_ = client.account, domain, message, primaryType } = parameters;\\n    if (!account_)\\n      throw new AccountNotFoundError({\\n        docsPath: \"/docs/actions/wallet/signTypedData\"\\n      });\\n    const account = parseAccount(account_);\\n    const types = {\\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\\n      ...parameters.types\\n    };\\n    validateTypedData({ domain, message, primaryType, types });\\n    if (account.signTypedData)\\n      return account.signTypedData({ domain, message, primaryType, types });\\n    const typedData = serializeTypedData({ domain, message, primaryType, types });\\n    return client.request({\\n      method: \"eth_signTypedData_v4\",\\n      params: [account.address, typedData]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/switchChain.js\\n  init_toHex();\\n  async function switchChain(client, { id }) {\\n    await client.request({\\n      method: \"wallet_switchEthereumChain\",\\n      params: [\\n        {\\n          chainId: numberToHex(id)\\n        }\\n      ]\\n    }, { retryCount: 0 });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/actions/wallet/watchAsset.js\\n  async function watchAsset(client, params) {\\n    const added = await client.request({\\n      method: \"wallet_watchAsset\",\\n      params\\n    }, { retryCount: 0 });\\n    return added;\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/decorators/wallet.js\\n  function walletActions(client) {\\n    return {\\n      addChain: (args) => addChain(client, args),\\n      deployContract: (args) => deployContract(client, args),\\n      getAddresses: () => getAddresses(client),\\n      getChainId: () => getChainId(client),\\n      getPermissions: () => getPermissions(client),\\n      prepareAuthorization: (args) => prepareAuthorization(client, args),\\n      prepareTransactionRequest: (args) => prepareTransactionRequest(client, args),\\n      requestAddresses: () => requestAddresses(client),\\n      requestPermissions: (args) => requestPermissions(client, args),\\n      sendRawTransaction: (args) => sendRawTransaction(client, args),\\n      sendTransaction: (args) => sendTransaction(client, args),\\n      signAuthorization: (args) => signAuthorization(client, args),\\n      signMessage: (args) => signMessage(client, args),\\n      signTransaction: (args) => signTransaction(client, args),\\n      signTypedData: (args) => signTypedData(client, args),\\n      switchChain: (args) => switchChain(client, args),\\n      watchAsset: (args) => watchAsset(client, args),\\n      writeContract: (args) => writeContract(client, args)\\n    };\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/clients/createWalletClient.js\\n  function createWalletClient(parameters) {\\n    const { key = \"wallet\", name = \"Wallet Client\", transport } = parameters;\\n    const client = createClient({\\n      ...parameters,\\n      key,\\n      name,\\n      transport,\\n      type: \"walletClient\"\\n    });\\n    return client.extend(walletActions);\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/index.js\\n  init_toHex();\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/op-stack/contracts.js\\n  var contracts = {\\n    gasPriceOracle: { address: \"0x420000000000000000000000000000000000000F\" },\\n    l1Block: { address: \"0x4200000000000000000000000000000000000015\" },\\n    l2CrossDomainMessenger: {\\n      address: \"0x4200000000000000000000000000000000000007\"\\n    },\\n    l2Erc721Bridge: { address: \"0x4200000000000000000000000000000000000014\" },\\n    l2StandardBridge: { address: \"0x4200000000000000000000000000000000000010\" },\\n    l2ToL1MessagePasser: {\\n      address: \"0x4200000000000000000000000000000000000016\"\\n    }\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/op-stack/formatters.js\\n  init_fromHex();\\n  var formatters = {\\n    block: /* @__PURE__ */ defineBlock({\\n      format(args) {\\n        const transactions = args.transactions?.map((transaction) => {\\n          if (typeof transaction === \"string\")\\n            return transaction;\\n          const formatted = formatTransaction(transaction);\\n          if (formatted.typeHex === \"0x7e\") {\\n            formatted.isSystemTx = transaction.isSystemTx;\\n            formatted.mint = transaction.mint ? hexToBigInt(transaction.mint) : void 0;\\n            formatted.sourceHash = transaction.sourceHash;\\n            formatted.type = \"deposit\";\\n          }\\n          return formatted;\\n        });\\n        return {\\n          transactions,\\n          stateRoot: args.stateRoot\\n        };\\n      }\\n    }),\\n    transaction: /* @__PURE__ */ defineTransaction({\\n      format(args) {\\n        const transaction = {};\\n        if (args.type === \"0x7e\") {\\n          transaction.isSystemTx = args.isSystemTx;\\n          transaction.mint = args.mint ? hexToBigInt(args.mint) : void 0;\\n          transaction.sourceHash = args.sourceHash;\\n          transaction.type = \"deposit\";\\n        }\\n        return transaction;\\n      }\\n    }),\\n    transactionReceipt: /* @__PURE__ */ defineTransactionReceipt({\\n      format(args) {\\n        return {\\n          l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\\n          l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\\n          l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\\n          l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null\\n        };\\n      }\\n    })\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/op-stack/serializers.js\\n  init_address();\\n  init_isAddress();\\n  init_concat();\\n  init_toHex();\\n  function serializeTransaction2(transaction, signature) {\\n    if (isDeposit(transaction))\\n      return serializeTransactionDeposit(transaction);\\n    return serializeTransaction(transaction, signature);\\n  }\\n  var serializers = {\\n    transaction: serializeTransaction2\\n  };\\n  function serializeTransactionDeposit(transaction) {\\n    assertTransactionDeposit(transaction);\\n    const { sourceHash, data, from: from5, gas, isSystemTx, mint, to, value } = transaction;\\n    const serializedTransaction = [\\n      sourceHash,\\n      from5,\\n      to ?? \"0x\",\\n      mint ? toHex(mint) : \"0x\",\\n      value ? toHex(value) : \"0x\",\\n      gas ? toHex(gas) : \"0x\",\\n      isSystemTx ? \"0x1\" : \"0x\",\\n      data ?? \"0x\"\\n    ];\\n    return concatHex([\\n      \"0x7e\",\\n      toRlp(serializedTransaction)\\n    ]);\\n  }\\n  function isDeposit(transaction) {\\n    if (transaction.type === \"deposit\")\\n      return true;\\n    if (typeof transaction.sourceHash !== \"undefined\")\\n      return true;\\n    return false;\\n  }\\n  function assertTransactionDeposit(transaction) {\\n    const { from: from5, to } = transaction;\\n    if (from5 && !isAddress(from5))\\n      throw new InvalidAddressError({ address: from5 });\\n    if (to && !isAddress(to))\\n      throw new InvalidAddressError({ address: to });\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/op-stack/chainConfig.js\\n  var chainConfig = {\\n    contracts,\\n    formatters,\\n    serializers\\n  };\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/chains/definitions/base.js\\n  var sourceId = 1;\\n  var base = /* @__PURE__ */ defineChain({\\n    ...chainConfig,\\n    id: 8453,\\n    name: \"Base\",\\n    nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\\n    rpcUrls: {\\n      default: {\\n        http: [\"https://mainnet.base.org\"]\\n      }\\n    },\\n    blockExplorers: {\\n      default: {\\n        name: \"Basescan\",\\n        url: \"https://basescan.org\",\\n        apiUrl: \"https://api.basescan.org/api\"\\n      }\\n    },\\n    contracts: {\\n      ...chainConfig.contracts,\\n      disputeGameFactory: {\\n        [sourceId]: {\\n          address: \"0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e\"\\n        }\\n      },\\n      l2OutputOracle: {\\n        [sourceId]: {\\n          address: \"0x56315b90c40730925ec5485cf004d835058518A0\"\\n        }\\n      },\\n      multicall3: {\\n        address: \"0xca11bde05977b3631167028862be2a173976ca11\",\\n        blockCreated: 5022\\n      },\\n      portal: {\\n        [sourceId]: {\\n          address: \"0x49048044D57e1C92A77f79988d21Fa8fAF74E97e\",\\n          blockCreated: 17482143\\n        }\\n      },\\n      l1StandardBridge: {\\n        [sourceId]: {\\n          address: \"0x3154Cf16ccdb4C6d922629664174b904d80F2C35\",\\n          blockCreated: 17482143\\n        }\\n      }\\n    },\\n    sourceId\\n  });\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/viem@2.27.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.3/node_modules/viem/_esm/chains/definitions/baseSepolia.js\\n  var sourceId2 = 11155111;\\n  var baseSepolia = /* @__PURE__ */ defineChain({\\n    ...chainConfig,\\n    id: 84532,\\n    network: \"base-sepolia\",\\n    name: \"Base Sepolia\",\\n    nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\\n    rpcUrls: {\\n      default: {\\n        http: [\"https://sepolia.base.org\"]\\n      }\\n    },\\n    blockExplorers: {\\n      default: {\\n        name: \"Basescan\",\\n        url: \"https://sepolia.basescan.org\",\\n        apiUrl: \"https://api-sepolia.basescan.org/api\"\\n      }\\n    },\\n    contracts: {\\n      ...chainConfig.contracts,\\n      disputeGameFactory: {\\n        [sourceId2]: {\\n          address: \"0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1\"\\n        }\\n      },\\n      l2OutputOracle: {\\n        [sourceId2]: {\\n          address: \"0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254\"\\n        }\\n      },\\n      portal: {\\n        [sourceId2]: {\\n          address: \"0x49f53e41452c74589e85ca1677426ba426459e85\",\\n          blockCreated: 4446677\\n        }\\n      },\\n      l1StandardBridge: {\\n        [sourceId2]: {\\n          address: \"0xfd0Bf71F60660E2f608ed56e1659C450eB113120\",\\n          blockCreated: 4446677\\n        }\\n      },\\n      multicall3: {\\n        address: \"0xca11bde05977b3631167028862be2a173976ca11\",\\n        blockCreated: 1059647\\n      }\\n    },\\n    testnet: true,\\n    sourceId: sourceId2\\n  });\\n\\n  // src/types/shared/evm/config.ts\\n  var config = {\\n    \"84532\": {\\n      usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\\n      usdcName: \"USDC\"\\n    },\\n    \"8453\": {\\n      usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\\n      usdcName: \"USDC\"\\n    },\\n    \"43113\": {\\n      usdcAddress: \"0x5425890298aed601595a70AB815c96711a31Bc65\",\\n      usdcName: \"USD Coin\"\\n    },\\n    \"43114\": {\\n      usdcAddress: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\\n      usdcName: \"USDC\"\\n    },\\n    \"4689\": {\\n      usdcAddress: \"0xcdf79194c6c285077a58da47641d4dbe51f63542\",\\n      usdcName: \"Bridged USDC\"\\n    }\\n  };\\n\\n  // src/types/shared/evm/eip3009.ts\\n  var authorizationTypes = {\\n    TransferWithAuthorization: [\\n      { name: \"from\", type: \"address\" },\\n      { name: \"to\", type: \"address\" },\\n      { name: \"value\", type: \"uint256\" },\\n      { name: \"validAfter\", type: \"uint256\" },\\n      { name: \"validBefore\", type: \"uint256\" },\\n      { name: \"nonce\", type: \"bytes32\" }\\n    ]\\n  };\\n\\n  // src/types/shared/evm/erc20PermitABI.ts\\n  var usdcABI = [\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"owner\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"spender\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: false,\\n          internalType: \"uint256\",\\n          name: \"value\",\\n          type: \"uint256\"\\n        }\\n      ],\\n      name: \"Approval\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"authorizer\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: true,\\n          internalType: \"bytes32\",\\n          name: \"nonce\",\\n          type: \"bytes32\"\\n        }\\n      ],\\n      name: \"AuthorizationCanceled\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"authorizer\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: true,\\n          internalType: \"bytes32\",\\n          name: \"nonce\",\\n          type: \"bytes32\"\\n        }\\n      ],\\n      name: \"AuthorizationUsed\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"_account\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"Blacklisted\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"newBlacklister\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"BlacklisterChanged\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"burner\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: false,\\n          internalType: \"uint256\",\\n          name: \"amount\",\\n          type: \"uint256\"\\n        }\\n      ],\\n      name: \"Burn\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"newMasterMinter\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"MasterMinterChanged\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"minter\",\\n          type: \"address\"\\n        },\\n        { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\\n        {\\n          indexed: false,\\n          internalType: \"uint256\",\\n          name: \"amount\",\\n          type: \"uint256\"\\n        }\\n      ],\\n      name: \"Mint\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"minter\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: false,\\n          internalType: \"uint256\",\\n          name: \"minterAllowedAmount\",\\n          type: \"uint256\"\\n        }\\n      ],\\n      name: \"MinterConfigured\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"oldMinter\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"MinterRemoved\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: false,\\n          internalType: \"address\",\\n          name: \"previousOwner\",\\n          type: \"address\"\\n        },\\n        {\\n          indexed: false,\\n          internalType: \"address\",\\n          name: \"newOwner\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"OwnershipTransferred\",\\n      type: \"event\"\\n    },\\n    { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"newAddress\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"PauserChanged\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"newRescuer\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"RescuerChanged\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\\n        { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\\n        {\\n          indexed: false,\\n          internalType: \"uint256\",\\n          name: \"value\",\\n          type: \"uint256\"\\n        }\\n      ],\\n      name: \"Transfer\",\\n      type: \"event\"\\n    },\\n    {\\n      anonymous: false,\\n      inputs: [\\n        {\\n          indexed: true,\\n          internalType: \"address\",\\n          name: \"_account\",\\n          type: \"address\"\\n        }\\n      ],\\n      name: \"UnBlacklisted\",\\n      type: \"event\"\\n    },\\n    { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\\n    {\\n      inputs: [],\\n      name: \"CANCEL_AUTHORIZATION_TYPEHASH\",\\n      outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"DOMAIN_SEPARATOR\",\\n      outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"PERMIT_TYPEHASH\",\\n      outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\\n      outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\\n      outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"owner\", type: \"address\" },\\n        { internalType: \"address\", name: \"spender\", type: \"address\" }\\n      ],\\n      name: \"allowance\",\\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"spender\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\\n      ],\\n      name: \"approve\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"authorizer\", type: \"address\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" }\\n      ],\\n      name: \"authorizationState\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\\n      name: \"balanceOf\",\\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\\n      name: \"blacklist\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"blacklister\",\\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\\n      name: \"burn\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"authorizer\", type: \"address\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\\n        { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\\n        { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\\n      ],\\n      name: \"cancelAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"authorizer\", type: \"address\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\\n      ],\\n      name: \"cancelAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"minter\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"minterAllowedAmount\", type: \"uint256\" }\\n      ],\\n      name: \"configureMinter\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"currency\",\\n      outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"decimals\",\\n      outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"spender\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"decrement\", type: \"uint256\" }\\n      ],\\n      name: \"decreaseAllowance\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"spender\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"increment\", type: \"uint256\" }\\n      ],\\n      name: \"increaseAllowance\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"string\", name: \"tokenName\", type: \"string\" },\\n        { internalType: \"string\", name: \"tokenSymbol\", type: \"string\" },\\n        { internalType: \"string\", name: \"tokenCurrency\", type: \"string\" },\\n        { internalType: \"uint8\", name: \"tokenDecimals\", type: \"uint8\" },\\n        { internalType: \"address\", name: \"newMasterMinter\", type: \"address\" },\\n        { internalType: \"address\", name: \"newPauser\", type: \"address\" },\\n        { internalType: \"address\", name: \"newBlacklister\", type: \"address\" },\\n        { internalType: \"address\", name: \"newOwner\", type: \"address\" }\\n      ],\\n      name: \"initialize\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"string\", name: \"newName\", type: \"string\" }],\\n      name: \"initializeV2\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"lostAndFound\", type: \"address\" }],\\n      name: \"initializeV2_1\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        {\\n          internalType: \"address[]\",\\n          name: \"accountsToBlacklist\",\\n          type: \"address[]\"\\n        },\\n        { internalType: \"string\", name: \"newSymbol\", type: \"string\" }\\n      ],\\n      name: \"initializeV2_2\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\\n      name: \"isBlacklisted\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\\n      name: \"isMinter\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"masterMinter\",\\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"_to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }\\n      ],\\n      name: \"mint\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\\n      name: \"minterAllowance\",\\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"name\",\\n      outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\\n      name: \"nonces\",\\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"owner\",\\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"pause\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"paused\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"pauser\",\\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"owner\", type: \"address\" },\\n        { internalType: \"address\", name: \"spender\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\\n        { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\\n      ],\\n      name: \"permit\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"owner\", type: \"address\" },\\n        { internalType: \"address\", name: \"spender\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\\n        { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\\n        { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\\n        { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\\n      ],\\n      name: \"permit\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"from\", type: \"address\" },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\\n      ],\\n      name: \"receiveWithAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"from\", type: \"address\" },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\\n        { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\\n        { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\\n      ],\\n      name: \"receiveWithAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\\n      name: \"removeMinter\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        {\\n          internalType: \"contract IERC20\",\\n          name: \"tokenContract\",\\n          type: \"address\"\\n        },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\\n      ],\\n      name: \"rescueERC20\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"rescuer\",\\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"symbol\",\\n      outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"totalSupply\",\\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\\n      stateMutability: \"view\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\\n      ],\\n      name: \"transfer\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"from\", type: \"address\" },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\\n      ],\\n      name: \"transferFrom\",\\n      outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\\n      name: \"transferOwnership\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"from\", type: \"address\" },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\\n      ],\\n      name: \"transferWithAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [\\n        { internalType: \"address\", name: \"from\", type: \"address\" },\\n        { internalType: \"address\", name: \"to\", type: \"address\" },\\n        { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\\n        { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\\n        { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\\n        { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\\n        { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\\n        { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\\n      ],\\n      name: \"transferWithAuthorization\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\\n      name: \"unBlacklist\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"unpause\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_newBlacklister\", type: \"address\" }],\\n      name: \"updateBlacklister\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_newMasterMinter\", type: \"address\" }],\\n      name: \"updateMasterMinter\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"_newPauser\", type: \"address\" }],\\n      name: \"updatePauser\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [{ internalType: \"address\", name: \"newRescuer\", type: \"address\" }],\\n      name: \"updateRescuer\",\\n      outputs: [],\\n      stateMutability: \"nonpayable\",\\n      type: \"function\"\\n    },\\n    {\\n      inputs: [],\\n      name: \"version\",\\n      outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\\n      stateMutability: \"pure\",\\n      type: \"function\"\\n    }\\n  ];\\n\\n  // src/types/shared/evm/wallet.ts\\n  function isSignerWallet(wallet) {\\n    return \"chain\" in wallet && \"transport\" in wallet;\\n  }\\n  function isAccount(wallet) {\\n    return \"address\" in wallet && \"type\" in wallet;\\n  }\\n\\n  // src/shared/base64.ts\\n  function safeBase64Encode(data) {\\n    if (typeof globalThis !== \"undefined\" && typeof globalThis.btoa === \"function\") {\\n      return globalThis.btoa(data);\\n    }\\n    return Buffer.from(data).toString(\"base64\");\\n  }\\n\\n  // ../../../examples/typescript/node_modules/.pnpm/zod@3.24.3/node_modules/zod/lib/index.mjs\\n  var util;\\n  (function(util2) {\\n    util2.assertEqual = (val) => val;\\n    function assertIs(_arg) {\\n    }\\n    util2.assertIs = assertIs;\\n    function assertNever(_x) {\\n      throw new Error();\\n    }\\n    util2.assertNever = assertNever;\\n    util2.arrayToEnum = (items) => {\\n      const obj = {};\\n      for (const item of items) {\\n        obj[item] = item;\\n      }\\n      return obj;\\n    };\\n    util2.getValidEnumValues = (obj) => {\\n      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\\n      const filtered = {};\\n      for (const k of validKeys) {\\n        filtered[k] = obj[k];\\n      }\\n      return util2.objectValues(filtered);\\n    };\\n    util2.objectValues = (obj) => {\\n      return util2.objectKeys(obj).map(function(e) {\\n        return obj[e];\\n      });\\n    };\\n    util2.objectKeys = typeof Object.keys === \"function\" ? (obj) => Object.keys(obj) : (object) => {\\n      const keys = [];\\n      for (const key in object) {\\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\\n          keys.push(key);\\n        }\\n      }\\n      return keys;\\n    };\\n    util2.find = (arr, checker) => {\\n      for (const item of arr) {\\n        if (checker(item))\\n          return item;\\n      }\\n      return void 0;\\n    };\\n    util2.isInteger = typeof Number.isInteger === \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\\n    function joinValues(array, separator = \" | \") {\\n      return array.map((val) => typeof val === \"string\" ? `\\'${val}\\'` : val).join(separator);\\n    }\\n    util2.joinValues = joinValues;\\n    util2.jsonStringifyReplacer = (_, value) => {\\n      if (typeof value === \"bigint\") {\\n        return value.toString();\\n      }\\n      return value;\\n    };\\n  })(util || (util = {}));\\n  var objectUtil;\\n  (function(objectUtil2) {\\n    objectUtil2.mergeShapes = (first, second) => {\\n      return {\\n        ...first,\\n        ...second\\n        // second overwrites first\\n      };\\n    };\\n  })(objectUtil || (objectUtil = {}));\\n  var ZodParsedType = util.arrayToEnum([\\n    \"string\",\\n    \"nan\",\\n    \"number\",\\n    \"integer\",\\n    \"float\",\\n    \"boolean\",\\n    \"date\",\\n    \"bigint\",\\n    \"symbol\",\\n    \"function\",\\n    \"undefined\",\\n    \"null\",\\n    \"array\",\\n    \"object\",\\n    \"unknown\",\\n    \"promise\",\\n    \"void\",\\n    \"never\",\\n    \"map\",\\n    \"set\"\\n  ]);\\n  var getParsedType = (data) => {\\n    const t = typeof data;\\n    switch (t) {\\n      case \"undefined\":\\n        return ZodParsedType.undefined;\\n      case \"string\":\\n        return ZodParsedType.string;\\n      case \"number\":\\n        return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\\n      case \"boolean\":\\n        return ZodParsedType.boolean;\\n      case \"function\":\\n        return ZodParsedType.function;\\n      case \"bigint\":\\n        return ZodParsedType.bigint;\\n      case \"symbol\":\\n        return ZodParsedType.symbol;\\n      case \"object\":\\n        if (Array.isArray(data)) {\\n          return ZodParsedType.array;\\n        }\\n        if (data === null) {\\n          return ZodParsedType.null;\\n        }\\n        if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\\n          return ZodParsedType.promise;\\n        }\\n        if (typeof Map !== \"undefined\" && data instanceof Map) {\\n          return ZodParsedType.map;\\n        }\\n        if (typeof Set !== \"undefined\" && data instanceof Set) {\\n          return ZodParsedType.set;\\n        }\\n        if (typeof Date !== \"undefined\" && data instanceof Date) {\\n          return ZodParsedType.date;\\n        }\\n        return ZodParsedType.object;\\n      default:\\n        return ZodParsedType.unknown;\\n    }\\n  };\\n  var ZodIssueCode = util.arrayToEnum([\\n    \"invalid_type\",\\n    \"invalid_literal\",\\n    \"custom\",\\n    \"invalid_union\",\\n    \"invalid_union_discriminator\",\\n    \"invalid_enum_value\",\\n    \"unrecognized_keys\",\\n    \"invalid_arguments\",\\n    \"invalid_return_type\",\\n    \"invalid_date\",\\n    \"invalid_string\",\\n    \"too_small\",\\n    \"too_big\",\\n    \"invalid_intersection_types\",\\n    \"not_multiple_of\",\\n    \"not_finite\"\\n  ]);\\n  var quotelessJson = (obj) => {\\n    const json = JSON.stringify(obj, null, 2);\\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\\n  };\\n  var ZodError = class _ZodError extends Error {\\n    get errors() {\\n      return this.issues;\\n    }\\n    constructor(issues) {\\n      super();\\n      this.issues = [];\\n      this.addIssue = (sub) => {\\n        this.issues = [...this.issues, sub];\\n      };\\n      this.addIssues = (subs = []) => {\\n        this.issues = [...this.issues, ...subs];\\n      };\\n      const actualProto = new.target.prototype;\\n      if (Object.setPrototypeOf) {\\n        Object.setPrototypeOf(this, actualProto);\\n      } else {\\n        this.__proto__ = actualProto;\\n      }\\n      this.name = \"ZodError\";\\n      this.issues = issues;\\n    }\\n    format(_mapper) {\\n      const mapper = _mapper || function(issue) {\\n        return issue.message;\\n      };\\n      const fieldErrors = { _errors: [] };\\n      const processError = (error) => {\\n        for (const issue of error.issues) {\\n          if (issue.code === \"invalid_union\") {\\n            issue.unionErrors.map(processError);\\n          } else if (issue.code === \"invalid_return_type\") {\\n            processError(issue.returnTypeError);\\n          } else if (issue.code === \"invalid_arguments\") {\\n            processError(issue.argumentsError);\\n          } else if (issue.path.length === 0) {\\n            fieldErrors._errors.push(mapper(issue));\\n          } else {\\n            let curr = fieldErrors;\\n            let i = 0;\\n            while (i < issue.path.length) {\\n              const el = issue.path[i];\\n              const terminal = i === issue.path.length - 1;\\n              if (!terminal) {\\n                curr[el] = curr[el] || { _errors: [] };\\n              } else {\\n                curr[el] = curr[el] || { _errors: [] };\\n                curr[el]._errors.push(mapper(issue));\\n              }\\n              curr = curr[el];\\n              i++;\\n            }\\n          }\\n        }\\n      };\\n      processError(this);\\n      return fieldErrors;\\n    }\\n    static assert(value) {\\n      if (!(value instanceof _ZodError)) {\\n        throw new Error(`Not a ZodError: ${value}`);\\n      }\\n    }\\n    toString() {\\n      return this.message;\\n    }\\n    get message() {\\n      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\\n    }\\n    get isEmpty() {\\n      return this.issues.length === 0;\\n    }\\n    flatten(mapper = (issue) => issue.message) {\\n      const fieldErrors = {};\\n      const formErrors = [];\\n      for (const sub of this.issues) {\\n        if (sub.path.length > 0) {\\n          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\\n          fieldErrors[sub.path[0]].push(mapper(sub));\\n        } else {\\n          formErrors.push(mapper(sub));\\n        }\\n      }\\n      return { formErrors, fieldErrors };\\n    }\\n    get formErrors() {\\n      return this.flatten();\\n    }\\n  };\\n  ZodError.create = (issues) => {\\n    const error = new ZodError(issues);\\n    return error;\\n  };\\n  var errorMap = (issue, _ctx) => {\\n    let message;\\n    switch (issue.code) {\\n      case ZodIssueCode.invalid_type:\\n        if (issue.received === ZodParsedType.undefined) {\\n          message = \"Required\";\\n        } else {\\n          message = `Expected ${issue.expected}, received ${issue.received}`;\\n        }\\n        break;\\n      case ZodIssueCode.invalid_literal:\\n        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\\n        break;\\n      case ZodIssueCode.unrecognized_keys:\\n        message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\\n        break;\\n      case ZodIssueCode.invalid_union:\\n        message = `Invalid input`;\\n        break;\\n      case ZodIssueCode.invalid_union_discriminator:\\n        message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\\n        break;\\n      case ZodIssueCode.invalid_enum_value:\\n        message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received \\'${issue.received}\\'`;\\n        break;\\n      case ZodIssueCode.invalid_arguments:\\n        message = `Invalid function arguments`;\\n        break;\\n      case ZodIssueCode.invalid_return_type:\\n        message = `Invalid function return type`;\\n        break;\\n      case ZodIssueCode.invalid_date:\\n        message = `Invalid date`;\\n        break;\\n      case ZodIssueCode.invalid_string:\\n        if (typeof issue.validation === \"object\") {\\n          if (\"includes\" in issue.validation) {\\n            message = `Invalid input: must include \"${issue.validation.includes}\"`;\\n            if (typeof issue.validation.position === \"number\") {\\n              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\\n            }\\n          } else if (\"startsWith\" in issue.validation) {\\n            message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\\n          } else if (\"endsWith\" in issue.validation) {\\n            message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\\n          } else {\\n            util.assertNever(issue.validation);\\n          }\\n        } else if (issue.validation !== \"regex\") {\\n          message = `Invalid ${issue.validation}`;\\n        } else {\\n          message = \"Invalid\";\\n        }\\n        break;\\n      case ZodIssueCode.too_small:\\n        if (issue.type === \"array\")\\n          message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\\n        else if (issue.type === \"string\")\\n          message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\\n        else if (issue.type === \"number\")\\n          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\\n        else if (issue.type === \"date\")\\n          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\\n        else\\n          message = \"Invalid input\";\\n        break;\\n      case ZodIssueCode.too_big:\\n        if (issue.type === \"array\")\\n          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\\n        else if (issue.type === \"string\")\\n          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\\n        else if (issue.type === \"number\")\\n          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\\n        else if (issue.type === \"bigint\")\\n          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\\n        else if (issue.type === \"date\")\\n          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\\n        else\\n          message = \"Invalid input\";\\n        break;\\n      case ZodIssueCode.custom:\\n        message = `Invalid input`;\\n        break;\\n      case ZodIssueCode.invalid_intersection_types:\\n        message = `Intersection results could not be merged`;\\n        break;\\n      case ZodIssueCode.not_multiple_of:\\n        message = `Number must be a multiple of ${issue.multipleOf}`;\\n        break;\\n      case ZodIssueCode.not_finite:\\n        message = \"Number must be finite\";\\n        break;\\n      default:\\n        message = _ctx.defaultError;\\n        util.assertNever(issue);\\n    }\\n    return { message };\\n  };\\n  var overrideErrorMap = errorMap;\\n  function setErrorMap(map) {\\n    overrideErrorMap = map;\\n  }\\n  function getErrorMap() {\\n    return overrideErrorMap;\\n  }\\n  var makeIssue = (params) => {\\n    const { data, path, errorMaps, issueData } = params;\\n    const fullPath = [...path, ...issueData.path || []];\\n    const fullIssue = {\\n      ...issueData,\\n      path: fullPath\\n    };\\n    if (issueData.message !== void 0) {\\n      return {\\n        ...issueData,\\n        path: fullPath,\\n        message: issueData.message\\n      };\\n    }\\n    let errorMessage = \"\";\\n    const maps = errorMaps.filter((m) => !!m).slice().reverse();\\n    for (const map of maps) {\\n      errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\\n    }\\n    return {\\n      ...issueData,\\n      path: fullPath,\\n      message: errorMessage\\n    };\\n  };\\n  var EMPTY_PATH = [];\\n  function addIssueToContext(ctx, issueData) {\\n    const overrideMap = getErrorMap();\\n    const issue = makeIssue({\\n      issueData,\\n      data: ctx.data,\\n      path: ctx.path,\\n      errorMaps: [\\n        ctx.common.contextualErrorMap,\\n        // contextual error map is first priority\\n        ctx.schemaErrorMap,\\n        // then schema-bound map if available\\n        overrideMap,\\n        // then global override map\\n        overrideMap === errorMap ? void 0 : errorMap\\n        // then global default map\\n      ].filter((x) => !!x)\\n    });\\n    ctx.common.issues.push(issue);\\n  }\\n  var ParseStatus = class _ParseStatus {\\n    constructor() {\\n      this.value = \"valid\";\\n    }\\n    dirty() {\\n      if (this.value === \"valid\")\\n        this.value = \"dirty\";\\n    }\\n    abort() {\\n      if (this.value !== \"aborted\")\\n        this.value = \"aborted\";\\n    }\\n    static mergeArray(status, results) {\\n      const arrayValue = [];\\n      for (const s of results) {\\n        if (s.status === \"aborted\")\\n          return INVALID;\\n        if (s.status === \"dirty\")\\n          status.dirty();\\n        arrayValue.push(s.value);\\n      }\\n      return { status: status.value, value: arrayValue };\\n    }\\n    static async mergeObjectAsync(status, pairs) {\\n      const syncPairs = [];\\n      for (const pair of pairs) {\\n        const key = await pair.key;\\n        const value = await pair.value;\\n        syncPairs.push({\\n          key,\\n          value\\n        });\\n      }\\n      return _ParseStatus.mergeObjectSync(status, syncPairs);\\n    }\\n    static mergeObjectSync(status, pairs) {\\n      const finalObject = {};\\n      for (const pair of pairs) {\\n        const { key, value } = pair;\\n        if (key.status === \"aborted\")\\n          return INVALID;\\n        if (value.status === \"aborted\")\\n          return INVALID;\\n        if (key.status === \"dirty\")\\n          status.dirty();\\n        if (value.status === \"dirty\")\\n          status.dirty();\\n        if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\\n          finalObject[key.value] = value.value;\\n        }\\n      }\\n      return { status: status.value, value: finalObject };\\n    }\\n  };\\n  var INVALID = Object.freeze({\\n    status: \"aborted\"\\n  });\\n  var DIRTY = (value) => ({ status: \"dirty\", value });\\n  var OK = (value) => ({ status: \"valid\", value });\\n  var isAborted = (x) => x.status === \"aborted\";\\n  var isDirty = (x) => x.status === \"dirty\";\\n  var isValid = (x) => x.status === \"valid\";\\n  var isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\\n  function __classPrivateFieldGet(receiver, state, kind, f) {\\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\\n  }\\n  function __classPrivateFieldSet(receiver, state, value, kind, f) {\\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\\n  }\\n  var errorUtil;\\n  (function(errorUtil2) {\\n    errorUtil2.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\\n    errorUtil2.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\\n  })(errorUtil || (errorUtil = {}));\\n  var _ZodEnum_cache;\\n  var _ZodNativeEnum_cache;\\n  var ParseInputLazyPath = class {\\n    constructor(parent, value, path, key) {\\n      this._cachedPath = [];\\n      this.parent = parent;\\n      this.data = value;\\n      this._path = path;\\n      this._key = key;\\n    }\\n    get path() {\\n      if (!this._cachedPath.length) {\\n        if (this._key instanceof Array) {\\n          this._cachedPath.push(...this._path, ...this._key);\\n        } else {\\n          this._cachedPath.push(...this._path, this._key);\\n        }\\n      }\\n      return this._cachedPath;\\n    }\\n  };\\n  var handleResult = (ctx, result) => {\\n    if (isValid(result)) {\\n      return { success: true, data: result.value };\\n    } else {\\n      if (!ctx.common.issues.length) {\\n        throw new Error(\"Validation failed but no issues detected.\");\\n      }\\n      return {\\n        success: false,\\n        get error() {\\n          if (this._error)\\n            return this._error;\\n          const error = new ZodError(ctx.common.issues);\\n          this._error = error;\\n          return this._error;\\n        }\\n      };\\n    }\\n  };\\n  function processCreateParams(params) {\\n    if (!params)\\n      return {};\\n    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\\n    if (errorMap2 && (invalid_type_error || required_error)) {\\n      throw new Error(`Can\\'t use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\\n    }\\n    if (errorMap2)\\n      return { errorMap: errorMap2, description };\\n    const customMap = (iss, ctx) => {\\n      var _a, _b;\\n      const { message } = params;\\n      if (iss.code === \"invalid_enum_value\") {\\n        return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\\n      }\\n      if (typeof ctx.data === \"undefined\") {\\n        return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\\n      }\\n      if (iss.code !== \"invalid_type\")\\n        return { message: ctx.defaultError };\\n      return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\\n    };\\n    return { errorMap: customMap, description };\\n  }\\n  var ZodType = class {\\n    get description() {\\n      return this._def.description;\\n    }\\n    _getType(input) {\\n      return getParsedType(input.data);\\n    }\\n    _getOrReturnCtx(input, ctx) {\\n      return ctx || {\\n        common: input.parent.common,\\n        data: input.data,\\n        parsedType: getParsedType(input.data),\\n        schemaErrorMap: this._def.errorMap,\\n        path: input.path,\\n        parent: input.parent\\n      };\\n    }\\n    _processInputParams(input) {\\n      return {\\n        status: new ParseStatus(),\\n        ctx: {\\n          common: input.parent.common,\\n          data: input.data,\\n          parsedType: getParsedType(input.data),\\n          schemaErrorMap: this._def.errorMap,\\n          path: input.path,\\n          parent: input.parent\\n        }\\n      };\\n    }\\n    _parseSync(input) {\\n      const result = this._parse(input);\\n      if (isAsync(result)) {\\n        throw new Error(\"Synchronous parse encountered promise.\");\\n      }\\n      return result;\\n    }\\n    _parseAsync(input) {\\n      const result = this._parse(input);\\n      return Promise.resolve(result);\\n    }\\n    parse(data, params) {\\n      const result = this.safeParse(data, params);\\n      if (result.success)\\n        return result.data;\\n      throw result.error;\\n    }\\n    safeParse(data, params) {\\n      var _a;\\n      const ctx = {\\n        common: {\\n          issues: [],\\n          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\\n          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\\n        },\\n        path: (params === null || params === void 0 ? void 0 : params.path) || [],\\n        schemaErrorMap: this._def.errorMap,\\n        parent: null,\\n        data,\\n        parsedType: getParsedType(data)\\n      };\\n      const result = this._parseSync({ data, path: ctx.path, parent: ctx });\\n      return handleResult(ctx, result);\\n    }\\n    \"~validate\"(data) {\\n      var _a, _b;\\n      const ctx = {\\n        common: {\\n          issues: [],\\n          async: !!this[\"~standard\"].async\\n        },\\n        path: [],\\n        schemaErrorMap: this._def.errorMap,\\n        parent: null,\\n        data,\\n        parsedType: getParsedType(data)\\n      };\\n      if (!this[\"~standard\"].async) {\\n        try {\\n          const result = this._parseSync({ data, path: [], parent: ctx });\\n          return isValid(result) ? {\\n            value: result.value\\n          } : {\\n            issues: ctx.common.issues\\n          };\\n        } catch (err) {\\n          if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\\n            this[\"~standard\"].async = true;\\n          }\\n          ctx.common = {\\n            issues: [],\\n            async: true\\n          };\\n        }\\n      }\\n      return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {\\n        value: result.value\\n      } : {\\n        issues: ctx.common.issues\\n      });\\n    }\\n    async parseAsync(data, params) {\\n      const result = await this.safeParseAsync(data, params);\\n      if (result.success)\\n        return result.data;\\n      throw result.error;\\n    }\\n    async safeParseAsync(data, params) {\\n      const ctx = {\\n        common: {\\n          issues: [],\\n          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\\n          async: true\\n        },\\n        path: (params === null || params === void 0 ? void 0 : params.path) || [],\\n        schemaErrorMap: this._def.errorMap,\\n        parent: null,\\n        data,\\n        parsedType: getParsedType(data)\\n      };\\n      const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\\n      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\\n      return handleResult(ctx, result);\\n    }\\n    refine(check, message) {\\n      const getIssueProperties = (val) => {\\n        if (typeof message === \"string\" || typeof message === \"undefined\") {\\n          return { message };\\n        } else if (typeof message === \"function\") {\\n          return message(val);\\n        } else {\\n          return message;\\n        }\\n      };\\n      return this._refinement((val, ctx) => {\\n        const result = check(val);\\n        const setError = () => ctx.addIssue({\\n          code: ZodIssueCode.custom,\\n          ...getIssueProperties(val)\\n        });\\n        if (typeof Promise !== \"undefined\" && result instanceof Promise) {\\n          return result.then((data) => {\\n            if (!data) {\\n              setError();\\n              return false;\\n            } else {\\n              return true;\\n            }\\n          });\\n        }\\n        if (!result) {\\n          setError();\\n          return false;\\n        } else {\\n          return true;\\n        }\\n      });\\n    }\\n    refinement(check, refinementData) {\\n      return this._refinement((val, ctx) => {\\n        if (!check(val)) {\\n          ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\\n          return false;\\n        } else {\\n          return true;\\n        }\\n      });\\n    }\\n    _refinement(refinement) {\\n      return new ZodEffects({\\n        schema: this,\\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\\n        effect: { type: \"refinement\", refinement }\\n      });\\n    }\\n    superRefine(refinement) {\\n      return this._refinement(refinement);\\n    }\\n    constructor(def) {\\n      this.spa = this.safeParseAsync;\\n      this._def = def;\\n      this.parse = this.parse.bind(this);\\n      this.safeParse = this.safeParse.bind(this);\\n      this.parseAsync = this.parseAsync.bind(this);\\n      this.safeParseAsync = this.safeParseAsync.bind(this);\\n      this.spa = this.spa.bind(this);\\n      this.refine = this.refine.bind(this);\\n      this.refinement = this.refinement.bind(this);\\n      this.superRefine = this.superRefine.bind(this);\\n      this.optional = this.optional.bind(this);\\n      this.nullable = this.nullable.bind(this);\\n      this.nullish = this.nullish.bind(this);\\n      this.array = this.array.bind(this);\\n      this.promise = this.promise.bind(this);\\n      this.or = this.or.bind(this);\\n      this.and = this.and.bind(this);\\n      this.transform = this.transform.bind(this);\\n      this.brand = this.brand.bind(this);\\n      this.default = this.default.bind(this);\\n      this.catch = this.catch.bind(this);\\n      this.describe = this.describe.bind(this);\\n      this.pipe = this.pipe.bind(this);\\n      this.readonly = this.readonly.bind(this);\\n      this.isNullable = this.isNullable.bind(this);\\n      this.isOptional = this.isOptional.bind(this);\\n      this[\"~standard\"] = {\\n        version: 1,\\n        vendor: \"zod\",\\n        validate: (data) => this[\"~validate\"](data)\\n      };\\n    }\\n    optional() {\\n      return ZodOptional.create(this, this._def);\\n    }\\n    nullable() {\\n      return ZodNullable.create(this, this._def);\\n    }\\n    nullish() {\\n      return this.nullable().optional();\\n    }\\n    array() {\\n      return ZodArray.create(this);\\n    }\\n    promise() {\\n      return ZodPromise.create(this, this._def);\\n    }\\n    or(option) {\\n      return ZodUnion.create([this, option], this._def);\\n    }\\n    and(incoming) {\\n      return ZodIntersection.create(this, incoming, this._def);\\n    }\\n    transform(transform) {\\n      return new ZodEffects({\\n        ...processCreateParams(this._def),\\n        schema: this,\\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\\n        effect: { type: \"transform\", transform }\\n      });\\n    }\\n    default(def) {\\n      const defaultValueFunc = typeof def === \"function\" ? def : () => def;\\n      return new ZodDefault({\\n        ...processCreateParams(this._def),\\n        innerType: this,\\n        defaultValue: defaultValueFunc,\\n        typeName: ZodFirstPartyTypeKind.ZodDefault\\n      });\\n    }\\n    brand() {\\n      return new ZodBranded({\\n        typeName: ZodFirstPartyTypeKind.ZodBranded,\\n        type: this,\\n        ...processCreateParams(this._def)\\n      });\\n    }\\n    catch(def) {\\n      const catchValueFunc = typeof def === \"function\" ? def : () => def;\\n      return new ZodCatch({\\n        ...processCreateParams(this._def),\\n        innerType: this,\\n        catchValue: catchValueFunc,\\n        typeName: ZodFirstPartyTypeKind.ZodCatch\\n      });\\n    }\\n    describe(description) {\\n      const This = this.constructor;\\n      return new This({\\n        ...this._def,\\n        description\\n      });\\n    }\\n    pipe(target) {\\n      return ZodPipeline.create(this, target);\\n    }\\n    readonly() {\\n      return ZodReadonly.create(this);\\n    }\\n    isOptional() {\\n      return this.safeParse(void 0).success;\\n    }\\n    isNullable() {\\n      return this.safeParse(null).success;\\n    }\\n  };\\n  var cuidRegex = /^c[^\\\\s-]{8,}$/i;\\n  var cuid2Regex = /^[0-9a-z]+$/;\\n  var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\\n  var uuidRegex = /^[0-9a-fA-F]{8}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{12}$/i;\\n  var nanoidRegex = /^[a-z0-9_-]{21}$/i;\\n  var jwtRegex = /^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*$/;\\n  var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\\\d+Y)|(?:[-+]?\\\\d+[.,]\\\\d+Y$))?(?:(?:[-+]?\\\\d+M)|(?:[-+]?\\\\d+[.,]\\\\d+M$))?(?:(?:[-+]?\\\\d+W)|(?:[-+]?\\\\d+[.,]\\\\d+W$))?(?:(?:[-+]?\\\\d+D)|(?:[-+]?\\\\d+[.,]\\\\d+D$))?(?:T(?=[\\\\d+-])(?:(?:[-+]?\\\\d+H)|(?:[-+]?\\\\d+[.,]\\\\d+H$))?(?:(?:[-+]?\\\\d+M)|(?:[-+]?\\\\d+[.,]\\\\d+M$))?(?:[-+]?\\\\d+(?:[.,]\\\\d+)?S)?)??$/;\\n  var emailRegex = /^(?!\\\\.)(?!.*\\\\.\\\\.)([A-Z0-9_\\'+\\\\-\\\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\\\-]*\\\\.)+[A-Z]{2,}$/i;\\n  var _emojiRegex = `^(\\\\\\\\p{Extended_Pictographic}|\\\\\\\\p{Emoji_Component})+$`;\\n  var emojiRegex;\\n  var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\\n  var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\/(3[0-2]|[12]?[0-9])$/;\\n  var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\\n  var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\\n  var base64Regex2 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\\n  var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\\n  var dateRegexSource = `((\\\\\\\\d\\\\\\\\d[2468][048]|\\\\\\\\d\\\\\\\\d[13579][26]|\\\\\\\\d\\\\\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\\\\\d|30)|(02)-(0[1-9]|1\\\\\\\\d|2[0-8])))`;\\n  var dateRegex = new RegExp(`^${dateRegexSource}$`);\\n  function timeRegexSource(args) {\\n    let regex = `([01]\\\\\\\\d|2[0-3]):[0-5]\\\\\\\\d:[0-5]\\\\\\\\d`;\\n    if (args.precision) {\\n      regex = `${regex}\\\\\\\\.\\\\\\\\d{${args.precision}}`;\\n    } else if (args.precision == null) {\\n      regex = `${regex}(\\\\\\\\.\\\\\\\\d+)?`;\\n    }\\n    return regex;\\n  }\\n  function timeRegex(args) {\\n    return new RegExp(`^${timeRegexSource(args)}$`);\\n  }\\n  function datetimeRegex(args) {\\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\\n    const opts = [];\\n    opts.push(args.local ? `Z?` : `Z`);\\n    if (args.offset)\\n      opts.push(`([+-]\\\\\\\\d{2}:?\\\\\\\\d{2})`);\\n    regex = `${regex}(${opts.join(\"|\")})`;\\n    return new RegExp(`^${regex}$`);\\n  }\\n  function isValidIP(ip, version4) {\\n    if ((version4 === \"v4\" || !version4) && ipv4Regex.test(ip)) {\\n      return true;\\n    }\\n    if ((version4 === \"v6\" || !version4) && ipv6Regex.test(ip)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n  function isValidJWT(jwt, alg) {\\n    if (!jwtRegex.test(jwt))\\n      return false;\\n    try {\\n      const [header] = jwt.split(\".\");\\n      const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\\n      const decoded = JSON.parse(atob(base64));\\n      if (typeof decoded !== \"object\" || decoded === null)\\n        return false;\\n      if (!decoded.typ || !decoded.alg)\\n        return false;\\n      if (alg && decoded.alg !== alg)\\n        return false;\\n      return true;\\n    } catch (_a) {\\n      return false;\\n    }\\n  }\\n  function isValidCidr(ip, version4) {\\n    if ((version4 === \"v4\" || !version4) && ipv4CidrRegex.test(ip)) {\\n      return true;\\n    }\\n    if ((version4 === \"v6\" || !version4) && ipv6CidrRegex.test(ip)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n  var ZodString = class _ZodString extends ZodType {\\n    _parse(input) {\\n      if (this._def.coerce) {\\n        input.data = String(input.data);\\n      }\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.string) {\\n        const ctx2 = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx2, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.string,\\n          received: ctx2.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const status = new ParseStatus();\\n      let ctx = void 0;\\n      for (const check of this._def.checks) {\\n        if (check.kind === \"min\") {\\n          if (input.data.length < check.value) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_small,\\n              minimum: check.value,\\n              type: \"string\",\\n              inclusive: true,\\n              exact: false,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"max\") {\\n          if (input.data.length > check.value) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_big,\\n              maximum: check.value,\\n              type: \"string\",\\n              inclusive: true,\\n              exact: false,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"length\") {\\n          const tooBig = input.data.length > check.value;\\n          const tooSmall = input.data.length < check.value;\\n          if (tooBig || tooSmall) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            if (tooBig) {\\n              addIssueToContext(ctx, {\\n                code: ZodIssueCode.too_big,\\n                maximum: check.value,\\n                type: \"string\",\\n                inclusive: true,\\n                exact: true,\\n                message: check.message\\n              });\\n            } else if (tooSmall) {\\n              addIssueToContext(ctx, {\\n                code: ZodIssueCode.too_small,\\n                minimum: check.value,\\n                type: \"string\",\\n                inclusive: true,\\n                exact: true,\\n                message: check.message\\n              });\\n            }\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"email\") {\\n          if (!emailRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"email\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"emoji\") {\\n          if (!emojiRegex) {\\n            emojiRegex = new RegExp(_emojiRegex, \"u\");\\n          }\\n          if (!emojiRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"emoji\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"uuid\") {\\n          if (!uuidRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"uuid\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"nanoid\") {\\n          if (!nanoidRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"nanoid\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"cuid\") {\\n          if (!cuidRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"cuid\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"cuid2\") {\\n          if (!cuid2Regex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"cuid2\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"ulid\") {\\n          if (!ulidRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"ulid\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"url\") {\\n          try {\\n            new URL(input.data);\\n          } catch (_a) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"url\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"regex\") {\\n          check.regex.lastIndex = 0;\\n          const testResult = check.regex.test(input.data);\\n          if (!testResult) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"regex\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"trim\") {\\n          input.data = input.data.trim();\\n        } else if (check.kind === \"includes\") {\\n          if (!input.data.includes(check.value, check.position)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: { includes: check.value, position: check.position },\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"toLowerCase\") {\\n          input.data = input.data.toLowerCase();\\n        } else if (check.kind === \"toUpperCase\") {\\n          input.data = input.data.toUpperCase();\\n        } else if (check.kind === \"startsWith\") {\\n          if (!input.data.startsWith(check.value)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: { startsWith: check.value },\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"endsWith\") {\\n          if (!input.data.endsWith(check.value)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: { endsWith: check.value },\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"datetime\") {\\n          const regex = datetimeRegex(check);\\n          if (!regex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: \"datetime\",\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"date\") {\\n          const regex = dateRegex;\\n          if (!regex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: \"date\",\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"time\") {\\n          const regex = timeRegex(check);\\n          if (!regex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_string,\\n              validation: \"time\",\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"duration\") {\\n          if (!durationRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"duration\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"ip\") {\\n          if (!isValidIP(input.data, check.version)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"ip\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"jwt\") {\\n          if (!isValidJWT(input.data, check.alg)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"jwt\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"cidr\") {\\n          if (!isValidCidr(input.data, check.version)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"cidr\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"base64\") {\\n          if (!base64Regex2.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"base64\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"base64url\") {\\n          if (!base64urlRegex.test(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              validation: \"base64url\",\\n              code: ZodIssueCode.invalid_string,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else {\\n          util.assertNever(check);\\n        }\\n      }\\n      return { status: status.value, value: input.data };\\n    }\\n    _regex(regex, validation, message) {\\n      return this.refinement((data) => regex.test(data), {\\n        validation,\\n        code: ZodIssueCode.invalid_string,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    _addCheck(check) {\\n      return new _ZodString({\\n        ...this._def,\\n        checks: [...this._def.checks, check]\\n      });\\n    }\\n    email(message) {\\n      return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\\n    }\\n    url(message) {\\n      return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\\n    }\\n    emoji(message) {\\n      return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\\n    }\\n    uuid(message) {\\n      return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\\n    }\\n    nanoid(message) {\\n      return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\\n    }\\n    cuid(message) {\\n      return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\\n    }\\n    cuid2(message) {\\n      return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\\n    }\\n    ulid(message) {\\n      return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\\n    }\\n    base64(message) {\\n      return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\\n    }\\n    base64url(message) {\\n      return this._addCheck({\\n        kind: \"base64url\",\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    jwt(options) {\\n      return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\\n    }\\n    ip(options) {\\n      return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\\n    }\\n    cidr(options) {\\n      return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\\n    }\\n    datetime(options) {\\n      var _a, _b;\\n      if (typeof options === \"string\") {\\n        return this._addCheck({\\n          kind: \"datetime\",\\n          precision: null,\\n          offset: false,\\n          local: false,\\n          message: options\\n        });\\n      }\\n      return this._addCheck({\\n        kind: \"datetime\",\\n        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\\n        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\\n        local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\\n        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\\n      });\\n    }\\n    date(message) {\\n      return this._addCheck({ kind: \"date\", message });\\n    }\\n    time(options) {\\n      if (typeof options === \"string\") {\\n        return this._addCheck({\\n          kind: \"time\",\\n          precision: null,\\n          message: options\\n        });\\n      }\\n      return this._addCheck({\\n        kind: \"time\",\\n        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\\n        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\\n      });\\n    }\\n    duration(message) {\\n      return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\\n    }\\n    regex(regex, message) {\\n      return this._addCheck({\\n        kind: \"regex\",\\n        regex,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    includes(value, options) {\\n      return this._addCheck({\\n        kind: \"includes\",\\n        value,\\n        position: options === null || options === void 0 ? void 0 : options.position,\\n        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\\n      });\\n    }\\n    startsWith(value, message) {\\n      return this._addCheck({\\n        kind: \"startsWith\",\\n        value,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    endsWith(value, message) {\\n      return this._addCheck({\\n        kind: \"endsWith\",\\n        value,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    min(minLength, message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: minLength,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    max(maxLength, message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: maxLength,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    length(len, message) {\\n      return this._addCheck({\\n        kind: \"length\",\\n        value: len,\\n        ...errorUtil.errToObj(message)\\n      });\\n    }\\n    /**\\n     * Equivalent to `.min(1)`\\n     */\\n    nonempty(message) {\\n      return this.min(1, errorUtil.errToObj(message));\\n    }\\n    trim() {\\n      return new _ZodString({\\n        ...this._def,\\n        checks: [...this._def.checks, { kind: \"trim\" }]\\n      });\\n    }\\n    toLowerCase() {\\n      return new _ZodString({\\n        ...this._def,\\n        checks: [...this._def.checks, { kind: \"toLowerCase\" }]\\n      });\\n    }\\n    toUpperCase() {\\n      return new _ZodString({\\n        ...this._def,\\n        checks: [...this._def.checks, { kind: \"toUpperCase\" }]\\n      });\\n    }\\n    get isDatetime() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\\n    }\\n    get isDate() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"date\");\\n    }\\n    get isTime() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"time\");\\n    }\\n    get isDuration() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"duration\");\\n    }\\n    get isEmail() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"email\");\\n    }\\n    get isURL() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"url\");\\n    }\\n    get isEmoji() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\\n    }\\n    get isUUID() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\\n    }\\n    get isNANOID() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\\n    }\\n    get isCUID() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\\n    }\\n    get isCUID2() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\\n    }\\n    get isULID() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\\n    }\\n    get isIP() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"ip\");\\n    }\\n    get isCIDR() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\\n    }\\n    get isBase64() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"base64\");\\n    }\\n    get isBase64url() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\\n    }\\n    get minLength() {\\n      let min = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"min\") {\\n          if (min === null || ch.value > min)\\n            min = ch.value;\\n        }\\n      }\\n      return min;\\n    }\\n    get maxLength() {\\n      let max = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"max\") {\\n          if (max === null || ch.value < max)\\n            max = ch.value;\\n        }\\n      }\\n      return max;\\n    }\\n  };\\n  ZodString.create = (params) => {\\n    var _a;\\n    return new ZodString({\\n      checks: [],\\n      typeName: ZodFirstPartyTypeKind.ZodString,\\n      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  function floatSafeRemainder(val, step) {\\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\\n    return valInt % stepInt / Math.pow(10, decCount);\\n  }\\n  var ZodNumber = class _ZodNumber extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this.min = this.gte;\\n      this.max = this.lte;\\n      this.step = this.multipleOf;\\n    }\\n    _parse(input) {\\n      if (this._def.coerce) {\\n        input.data = Number(input.data);\\n      }\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.number) {\\n        const ctx2 = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx2, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.number,\\n          received: ctx2.parsedType\\n        });\\n        return INVALID;\\n      }\\n      let ctx = void 0;\\n      const status = new ParseStatus();\\n      for (const check of this._def.checks) {\\n        if (check.kind === \"int\") {\\n          if (!util.isInteger(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.invalid_type,\\n              expected: \"integer\",\\n              received: \"float\",\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"min\") {\\n          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\\n          if (tooSmall) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_small,\\n              minimum: check.value,\\n              type: \"number\",\\n              inclusive: check.inclusive,\\n              exact: false,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"max\") {\\n          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\\n          if (tooBig) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_big,\\n              maximum: check.value,\\n              type: \"number\",\\n              inclusive: check.inclusive,\\n              exact: false,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"multipleOf\") {\\n          if (floatSafeRemainder(input.data, check.value) !== 0) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.not_multiple_of,\\n              multipleOf: check.value,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"finite\") {\\n          if (!Number.isFinite(input.data)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.not_finite,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else {\\n          util.assertNever(check);\\n        }\\n      }\\n      return { status: status.value, value: input.data };\\n    }\\n    gte(value, message) {\\n      return this.setLimit(\"min\", value, true, errorUtil.toString(message));\\n    }\\n    gt(value, message) {\\n      return this.setLimit(\"min\", value, false, errorUtil.toString(message));\\n    }\\n    lte(value, message) {\\n      return this.setLimit(\"max\", value, true, errorUtil.toString(message));\\n    }\\n    lt(value, message) {\\n      return this.setLimit(\"max\", value, false, errorUtil.toString(message));\\n    }\\n    setLimit(kind, value, inclusive, message) {\\n      return new _ZodNumber({\\n        ...this._def,\\n        checks: [\\n          ...this._def.checks,\\n          {\\n            kind,\\n            value,\\n            inclusive,\\n            message: errorUtil.toString(message)\\n          }\\n        ]\\n      });\\n    }\\n    _addCheck(check) {\\n      return new _ZodNumber({\\n        ...this._def,\\n        checks: [...this._def.checks, check]\\n      });\\n    }\\n    int(message) {\\n      return this._addCheck({\\n        kind: \"int\",\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    positive(message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: 0,\\n        inclusive: false,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    negative(message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: 0,\\n        inclusive: false,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    nonpositive(message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: 0,\\n        inclusive: true,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    nonnegative(message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: 0,\\n        inclusive: true,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    multipleOf(value, message) {\\n      return this._addCheck({\\n        kind: \"multipleOf\",\\n        value,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    finite(message) {\\n      return this._addCheck({\\n        kind: \"finite\",\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    safe(message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        inclusive: true,\\n        value: Number.MIN_SAFE_INTEGER,\\n        message: errorUtil.toString(message)\\n      })._addCheck({\\n        kind: \"max\",\\n        inclusive: true,\\n        value: Number.MAX_SAFE_INTEGER,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    get minValue() {\\n      let min = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"min\") {\\n          if (min === null || ch.value > min)\\n            min = ch.value;\\n        }\\n      }\\n      return min;\\n    }\\n    get maxValue() {\\n      let max = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"max\") {\\n          if (max === null || ch.value < max)\\n            max = ch.value;\\n        }\\n      }\\n      return max;\\n    }\\n    get isInt() {\\n      return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\\n    }\\n    get isFinite() {\\n      let max = null, min = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\\n          return true;\\n        } else if (ch.kind === \"min\") {\\n          if (min === null || ch.value > min)\\n            min = ch.value;\\n        } else if (ch.kind === \"max\") {\\n          if (max === null || ch.value < max)\\n            max = ch.value;\\n        }\\n      }\\n      return Number.isFinite(min) && Number.isFinite(max);\\n    }\\n  };\\n  ZodNumber.create = (params) => {\\n    return new ZodNumber({\\n      checks: [],\\n      typeName: ZodFirstPartyTypeKind.ZodNumber,\\n      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodBigInt = class _ZodBigInt extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this.min = this.gte;\\n      this.max = this.lte;\\n    }\\n    _parse(input) {\\n      if (this._def.coerce) {\\n        try {\\n          input.data = BigInt(input.data);\\n        } catch (_a) {\\n          return this._getInvalidInput(input);\\n        }\\n      }\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.bigint) {\\n        return this._getInvalidInput(input);\\n      }\\n      let ctx = void 0;\\n      const status = new ParseStatus();\\n      for (const check of this._def.checks) {\\n        if (check.kind === \"min\") {\\n          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\\n          if (tooSmall) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_small,\\n              type: \"bigint\",\\n              minimum: check.value,\\n              inclusive: check.inclusive,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"max\") {\\n          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\\n          if (tooBig) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_big,\\n              type: \"bigint\",\\n              maximum: check.value,\\n              inclusive: check.inclusive,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"multipleOf\") {\\n          if (input.data % check.value !== BigInt(0)) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.not_multiple_of,\\n              multipleOf: check.value,\\n              message: check.message\\n            });\\n            status.dirty();\\n          }\\n        } else {\\n          util.assertNever(check);\\n        }\\n      }\\n      return { status: status.value, value: input.data };\\n    }\\n    _getInvalidInput(input) {\\n      const ctx = this._getOrReturnCtx(input);\\n      addIssueToContext(ctx, {\\n        code: ZodIssueCode.invalid_type,\\n        expected: ZodParsedType.bigint,\\n        received: ctx.parsedType\\n      });\\n      return INVALID;\\n    }\\n    gte(value, message) {\\n      return this.setLimit(\"min\", value, true, errorUtil.toString(message));\\n    }\\n    gt(value, message) {\\n      return this.setLimit(\"min\", value, false, errorUtil.toString(message));\\n    }\\n    lte(value, message) {\\n      return this.setLimit(\"max\", value, true, errorUtil.toString(message));\\n    }\\n    lt(value, message) {\\n      return this.setLimit(\"max\", value, false, errorUtil.toString(message));\\n    }\\n    setLimit(kind, value, inclusive, message) {\\n      return new _ZodBigInt({\\n        ...this._def,\\n        checks: [\\n          ...this._def.checks,\\n          {\\n            kind,\\n            value,\\n            inclusive,\\n            message: errorUtil.toString(message)\\n          }\\n        ]\\n      });\\n    }\\n    _addCheck(check) {\\n      return new _ZodBigInt({\\n        ...this._def,\\n        checks: [...this._def.checks, check]\\n      });\\n    }\\n    positive(message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: BigInt(0),\\n        inclusive: false,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    negative(message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: BigInt(0),\\n        inclusive: false,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    nonpositive(message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: BigInt(0),\\n        inclusive: true,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    nonnegative(message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: BigInt(0),\\n        inclusive: true,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    multipleOf(value, message) {\\n      return this._addCheck({\\n        kind: \"multipleOf\",\\n        value,\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    get minValue() {\\n      let min = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"min\") {\\n          if (min === null || ch.value > min)\\n            min = ch.value;\\n        }\\n      }\\n      return min;\\n    }\\n    get maxValue() {\\n      let max = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"max\") {\\n          if (max === null || ch.value < max)\\n            max = ch.value;\\n        }\\n      }\\n      return max;\\n    }\\n  };\\n  ZodBigInt.create = (params) => {\\n    var _a;\\n    return new ZodBigInt({\\n      checks: [],\\n      typeName: ZodFirstPartyTypeKind.ZodBigInt,\\n      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodBoolean = class extends ZodType {\\n    _parse(input) {\\n      if (this._def.coerce) {\\n        input.data = Boolean(input.data);\\n      }\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.boolean) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.boolean,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n  };\\n  ZodBoolean.create = (params) => {\\n    return new ZodBoolean({\\n      typeName: ZodFirstPartyTypeKind.ZodBoolean,\\n      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodDate = class _ZodDate extends ZodType {\\n    _parse(input) {\\n      if (this._def.coerce) {\\n        input.data = new Date(input.data);\\n      }\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.date) {\\n        const ctx2 = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx2, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.date,\\n          received: ctx2.parsedType\\n        });\\n        return INVALID;\\n      }\\n      if (isNaN(input.data.getTime())) {\\n        const ctx2 = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx2, {\\n          code: ZodIssueCode.invalid_date\\n        });\\n        return INVALID;\\n      }\\n      const status = new ParseStatus();\\n      let ctx = void 0;\\n      for (const check of this._def.checks) {\\n        if (check.kind === \"min\") {\\n          if (input.data.getTime() < check.value) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_small,\\n              message: check.message,\\n              inclusive: true,\\n              exact: false,\\n              minimum: check.value,\\n              type: \"date\"\\n            });\\n            status.dirty();\\n          }\\n        } else if (check.kind === \"max\") {\\n          if (input.data.getTime() > check.value) {\\n            ctx = this._getOrReturnCtx(input, ctx);\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.too_big,\\n              message: check.message,\\n              inclusive: true,\\n              exact: false,\\n              maximum: check.value,\\n              type: \"date\"\\n            });\\n            status.dirty();\\n          }\\n        } else {\\n          util.assertNever(check);\\n        }\\n      }\\n      return {\\n        status: status.value,\\n        value: new Date(input.data.getTime())\\n      };\\n    }\\n    _addCheck(check) {\\n      return new _ZodDate({\\n        ...this._def,\\n        checks: [...this._def.checks, check]\\n      });\\n    }\\n    min(minDate, message) {\\n      return this._addCheck({\\n        kind: \"min\",\\n        value: minDate.getTime(),\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    max(maxDate, message) {\\n      return this._addCheck({\\n        kind: \"max\",\\n        value: maxDate.getTime(),\\n        message: errorUtil.toString(message)\\n      });\\n    }\\n    get minDate() {\\n      let min = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"min\") {\\n          if (min === null || ch.value > min)\\n            min = ch.value;\\n        }\\n      }\\n      return min != null ? new Date(min) : null;\\n    }\\n    get maxDate() {\\n      let max = null;\\n      for (const ch of this._def.checks) {\\n        if (ch.kind === \"max\") {\\n          if (max === null || ch.value < max)\\n            max = ch.value;\\n        }\\n      }\\n      return max != null ? new Date(max) : null;\\n    }\\n  };\\n  ZodDate.create = (params) => {\\n    return new ZodDate({\\n      checks: [],\\n      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\\n      typeName: ZodFirstPartyTypeKind.ZodDate,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodSymbol = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.symbol) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.symbol,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n  };\\n  ZodSymbol.create = (params) => {\\n    return new ZodSymbol({\\n      typeName: ZodFirstPartyTypeKind.ZodSymbol,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodUndefined = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.undefined) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.undefined,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n  };\\n  ZodUndefined.create = (params) => {\\n    return new ZodUndefined({\\n      typeName: ZodFirstPartyTypeKind.ZodUndefined,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodNull = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.null) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.null,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n  };\\n  ZodNull.create = (params) => {\\n    return new ZodNull({\\n      typeName: ZodFirstPartyTypeKind.ZodNull,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodAny = class extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this._any = true;\\n    }\\n    _parse(input) {\\n      return OK(input.data);\\n    }\\n  };\\n  ZodAny.create = (params) => {\\n    return new ZodAny({\\n      typeName: ZodFirstPartyTypeKind.ZodAny,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodUnknown = class extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this._unknown = true;\\n    }\\n    _parse(input) {\\n      return OK(input.data);\\n    }\\n  };\\n  ZodUnknown.create = (params) => {\\n    return new ZodUnknown({\\n      typeName: ZodFirstPartyTypeKind.ZodUnknown,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodNever = class extends ZodType {\\n    _parse(input) {\\n      const ctx = this._getOrReturnCtx(input);\\n      addIssueToContext(ctx, {\\n        code: ZodIssueCode.invalid_type,\\n        expected: ZodParsedType.never,\\n        received: ctx.parsedType\\n      });\\n      return INVALID;\\n    }\\n  };\\n  ZodNever.create = (params) => {\\n    return new ZodNever({\\n      typeName: ZodFirstPartyTypeKind.ZodNever,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodVoid = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.undefined) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.void,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n  };\\n  ZodVoid.create = (params) => {\\n    return new ZodVoid({\\n      typeName: ZodFirstPartyTypeKind.ZodVoid,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodArray = class _ZodArray extends ZodType {\\n    _parse(input) {\\n      const { ctx, status } = this._processInputParams(input);\\n      const def = this._def;\\n      if (ctx.parsedType !== ZodParsedType.array) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.array,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      if (def.exactLength !== null) {\\n        const tooBig = ctx.data.length > def.exactLength.value;\\n        const tooSmall = ctx.data.length < def.exactLength.value;\\n        if (tooBig || tooSmall) {\\n          addIssueToContext(ctx, {\\n            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\\n            minimum: tooSmall ? def.exactLength.value : void 0,\\n            maximum: tooBig ? def.exactLength.value : void 0,\\n            type: \"array\",\\n            inclusive: true,\\n            exact: true,\\n            message: def.exactLength.message\\n          });\\n          status.dirty();\\n        }\\n      }\\n      if (def.minLength !== null) {\\n        if (ctx.data.length < def.minLength.value) {\\n          addIssueToContext(ctx, {\\n            code: ZodIssueCode.too_small,\\n            minimum: def.minLength.value,\\n            type: \"array\",\\n            inclusive: true,\\n            exact: false,\\n            message: def.minLength.message\\n          });\\n          status.dirty();\\n        }\\n      }\\n      if (def.maxLength !== null) {\\n        if (ctx.data.length > def.maxLength.value) {\\n          addIssueToContext(ctx, {\\n            code: ZodIssueCode.too_big,\\n            maximum: def.maxLength.value,\\n            type: \"array\",\\n            inclusive: true,\\n            exact: false,\\n            message: def.maxLength.message\\n          });\\n          status.dirty();\\n        }\\n      }\\n      if (ctx.common.async) {\\n        return Promise.all([...ctx.data].map((item, i) => {\\n          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\\n        })).then((result2) => {\\n          return ParseStatus.mergeArray(status, result2);\\n        });\\n      }\\n      const result = [...ctx.data].map((item, i) => {\\n        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\\n      });\\n      return ParseStatus.mergeArray(status, result);\\n    }\\n    get element() {\\n      return this._def.type;\\n    }\\n    min(minLength, message) {\\n      return new _ZodArray({\\n        ...this._def,\\n        minLength: { value: minLength, message: errorUtil.toString(message) }\\n      });\\n    }\\n    max(maxLength, message) {\\n      return new _ZodArray({\\n        ...this._def,\\n        maxLength: { value: maxLength, message: errorUtil.toString(message) }\\n      });\\n    }\\n    length(len, message) {\\n      return new _ZodArray({\\n        ...this._def,\\n        exactLength: { value: len, message: errorUtil.toString(message) }\\n      });\\n    }\\n    nonempty(message) {\\n      return this.min(1, message);\\n    }\\n  };\\n  ZodArray.create = (schema, params) => {\\n    return new ZodArray({\\n      type: schema,\\n      minLength: null,\\n      maxLength: null,\\n      exactLength: null,\\n      typeName: ZodFirstPartyTypeKind.ZodArray,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  function deepPartialify(schema) {\\n    if (schema instanceof ZodObject) {\\n      const newShape = {};\\n      for (const key in schema.shape) {\\n        const fieldSchema = schema.shape[key];\\n        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\\n      }\\n      return new ZodObject({\\n        ...schema._def,\\n        shape: () => newShape\\n      });\\n    } else if (schema instanceof ZodArray) {\\n      return new ZodArray({\\n        ...schema._def,\\n        type: deepPartialify(schema.element)\\n      });\\n    } else if (schema instanceof ZodOptional) {\\n      return ZodOptional.create(deepPartialify(schema.unwrap()));\\n    } else if (schema instanceof ZodNullable) {\\n      return ZodNullable.create(deepPartialify(schema.unwrap()));\\n    } else if (schema instanceof ZodTuple) {\\n      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\\n    } else {\\n      return schema;\\n    }\\n  }\\n  var ZodObject = class _ZodObject extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this._cached = null;\\n      this.nonstrict = this.passthrough;\\n      this.augment = this.extend;\\n    }\\n    _getCached() {\\n      if (this._cached !== null)\\n        return this._cached;\\n      const shape = this._def.shape();\\n      const keys = util.objectKeys(shape);\\n      return this._cached = { shape, keys };\\n    }\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.object) {\\n        const ctx2 = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx2, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.object,\\n          received: ctx2.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const { status, ctx } = this._processInputParams(input);\\n      const { shape, keys: shapeKeys } = this._getCached();\\n      const extraKeys = [];\\n      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\\n        for (const key in ctx.data) {\\n          if (!shapeKeys.includes(key)) {\\n            extraKeys.push(key);\\n          }\\n        }\\n      }\\n      const pairs = [];\\n      for (const key of shapeKeys) {\\n        const keyValidator = shape[key];\\n        const value = ctx.data[key];\\n        pairs.push({\\n          key: { status: \"valid\", value: key },\\n          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\\n          alwaysSet: key in ctx.data\\n        });\\n      }\\n      if (this._def.catchall instanceof ZodNever) {\\n        const unknownKeys = this._def.unknownKeys;\\n        if (unknownKeys === \"passthrough\") {\\n          for (const key of extraKeys) {\\n            pairs.push({\\n              key: { status: \"valid\", value: key },\\n              value: { status: \"valid\", value: ctx.data[key] }\\n            });\\n          }\\n        } else if (unknownKeys === \"strict\") {\\n          if (extraKeys.length > 0) {\\n            addIssueToContext(ctx, {\\n              code: ZodIssueCode.unrecognized_keys,\\n              keys: extraKeys\\n            });\\n            status.dirty();\\n          }\\n        } else if (unknownKeys === \"strip\") ;\\n        else {\\n          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\\n        }\\n      } else {\\n        const catchall = this._def.catchall;\\n        for (const key of extraKeys) {\\n          const value = ctx.data[key];\\n          pairs.push({\\n            key: { status: \"valid\", value: key },\\n            value: catchall._parse(\\n              new ParseInputLazyPath(ctx, value, ctx.path, key)\\n              //, ctx.child(key), value, getParsedType(value)\\n            ),\\n            alwaysSet: key in ctx.data\\n          });\\n        }\\n      }\\n      if (ctx.common.async) {\\n        return Promise.resolve().then(async () => {\\n          const syncPairs = [];\\n          for (const pair of pairs) {\\n            const key = await pair.key;\\n            const value = await pair.value;\\n            syncPairs.push({\\n              key,\\n              value,\\n              alwaysSet: pair.alwaysSet\\n            });\\n          }\\n          return syncPairs;\\n        }).then((syncPairs) => {\\n          return ParseStatus.mergeObjectSync(status, syncPairs);\\n        });\\n      } else {\\n        return ParseStatus.mergeObjectSync(status, pairs);\\n      }\\n    }\\n    get shape() {\\n      return this._def.shape();\\n    }\\n    strict(message) {\\n      errorUtil.errToObj;\\n      return new _ZodObject({\\n        ...this._def,\\n        unknownKeys: \"strict\",\\n        ...message !== void 0 ? {\\n          errorMap: (issue, ctx) => {\\n            var _a, _b, _c, _d;\\n            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\\n            if (issue.code === \"unrecognized_keys\")\\n              return {\\n                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\\n              };\\n            return {\\n              message: defaultError\\n            };\\n          }\\n        } : {}\\n      });\\n    }\\n    strip() {\\n      return new _ZodObject({\\n        ...this._def,\\n        unknownKeys: \"strip\"\\n      });\\n    }\\n    passthrough() {\\n      return new _ZodObject({\\n        ...this._def,\\n        unknownKeys: \"passthrough\"\\n      });\\n    }\\n    // const AugmentFactory =\\n    //   <Def extends ZodObjectDef>(def: Def) =>\\n    //   <Augmentation extends ZodRawShape>(\\n    //     augmentation: Augmentation\\n    //   ): ZodObject<\\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\\n    //     Def[\"unknownKeys\"],\\n    //     Def[\"catchall\"]\\n    //   > => {\\n    //     return new ZodObject({\\n    //       ...def,\\n    //       shape: () => ({\\n    //         ...def.shape(),\\n    //         ...augmentation,\\n    //       }),\\n    //     }) as any;\\n    //   };\\n    extend(augmentation) {\\n      return new _ZodObject({\\n        ...this._def,\\n        shape: () => ({\\n          ...this._def.shape(),\\n          ...augmentation\\n        })\\n      });\\n    }\\n    /**\\n     * Prior to zod@1.0.12 there was a bug in the\\n     * inferred type of merged objects. Please\\n     * upgrade if you are experiencing issues.\\n     */\\n    merge(merging) {\\n      const merged = new _ZodObject({\\n        unknownKeys: merging._def.unknownKeys,\\n        catchall: merging._def.catchall,\\n        shape: () => ({\\n          ...this._def.shape(),\\n          ...merging._def.shape()\\n        }),\\n        typeName: ZodFirstPartyTypeKind.ZodObject\\n      });\\n      return merged;\\n    }\\n    // merge<\\n    //   Incoming extends AnyZodObject,\\n    //   Augmentation extends Incoming[\"shape\"],\\n    //   NewOutput extends {\\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\\n    //       ? Augmentation[k][\"_output\"]\\n    //       : k extends keyof Output\\n    //       ? Output[k]\\n    //       : never;\\n    //   },\\n    //   NewInput extends {\\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\\n    //       ? Augmentation[k][\"_input\"]\\n    //       : k extends keyof Input\\n    //       ? Input[k]\\n    //       : never;\\n    //   }\\n    // >(\\n    //   merging: Incoming\\n    // ): ZodObject<\\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\\n    //   Incoming[\"_def\"][\"unknownKeys\"],\\n    //   Incoming[\"_def\"][\"catchall\"],\\n    //   NewOutput,\\n    //   NewInput\\n    // > {\\n    //   const merged: any = new ZodObject({\\n    //     unknownKeys: merging._def.unknownKeys,\\n    //     catchall: merging._def.catchall,\\n    //     shape: () =>\\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\\n    //   }) as any;\\n    //   return merged;\\n    // }\\n    setKey(key, schema) {\\n      return this.augment({ [key]: schema });\\n    }\\n    // merge<Incoming extends AnyZodObject>(\\n    //   merging: Incoming\\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\\n    // ZodObject<\\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\\n    //   Incoming[\"_def\"][\"unknownKeys\"],\\n    //   Incoming[\"_def\"][\"catchall\"]\\n    // > {\\n    //   // const mergedShape = objectUtil.mergeShapes(\\n    //   //   this._def.shape(),\\n    //   //   merging._def.shape()\\n    //   // );\\n    //   const merged: any = new ZodObject({\\n    //     unknownKeys: merging._def.unknownKeys,\\n    //     catchall: merging._def.catchall,\\n    //     shape: () =>\\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\\n    //   }) as any;\\n    //   return merged;\\n    // }\\n    catchall(index2) {\\n      return new _ZodObject({\\n        ...this._def,\\n        catchall: index2\\n      });\\n    }\\n    pick(mask) {\\n      const shape = {};\\n      util.objectKeys(mask).forEach((key) => {\\n        if (mask[key] && this.shape[key]) {\\n          shape[key] = this.shape[key];\\n        }\\n      });\\n      return new _ZodObject({\\n        ...this._def,\\n        shape: () => shape\\n      });\\n    }\\n    omit(mask) {\\n      const shape = {};\\n      util.objectKeys(this.shape).forEach((key) => {\\n        if (!mask[key]) {\\n          shape[key] = this.shape[key];\\n        }\\n      });\\n      return new _ZodObject({\\n        ...this._def,\\n        shape: () => shape\\n      });\\n    }\\n    /**\\n     * @deprecated\\n     */\\n    deepPartial() {\\n      return deepPartialify(this);\\n    }\\n    partial(mask) {\\n      const newShape = {};\\n      util.objectKeys(this.shape).forEach((key) => {\\n        const fieldSchema = this.shape[key];\\n        if (mask && !mask[key]) {\\n          newShape[key] = fieldSchema;\\n        } else {\\n          newShape[key] = fieldSchema.optional();\\n        }\\n      });\\n      return new _ZodObject({\\n        ...this._def,\\n        shape: () => newShape\\n      });\\n    }\\n    required(mask) {\\n      const newShape = {};\\n      util.objectKeys(this.shape).forEach((key) => {\\n        if (mask && !mask[key]) {\\n          newShape[key] = this.shape[key];\\n        } else {\\n          const fieldSchema = this.shape[key];\\n          let newField = fieldSchema;\\n          while (newField instanceof ZodOptional) {\\n            newField = newField._def.innerType;\\n          }\\n          newShape[key] = newField;\\n        }\\n      });\\n      return new _ZodObject({\\n        ...this._def,\\n        shape: () => newShape\\n      });\\n    }\\n    keyof() {\\n      return createZodEnum(util.objectKeys(this.shape));\\n    }\\n  };\\n  ZodObject.create = (shape, params) => {\\n    return new ZodObject({\\n      shape: () => shape,\\n      unknownKeys: \"strip\",\\n      catchall: ZodNever.create(),\\n      typeName: ZodFirstPartyTypeKind.ZodObject,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  ZodObject.strictCreate = (shape, params) => {\\n    return new ZodObject({\\n      shape: () => shape,\\n      unknownKeys: \"strict\",\\n      catchall: ZodNever.create(),\\n      typeName: ZodFirstPartyTypeKind.ZodObject,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  ZodObject.lazycreate = (shape, params) => {\\n    return new ZodObject({\\n      shape,\\n      unknownKeys: \"strip\",\\n      catchall: ZodNever.create(),\\n      typeName: ZodFirstPartyTypeKind.ZodObject,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodUnion = class extends ZodType {\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      const options = this._def.options;\\n      function handleResults(results) {\\n        for (const result of results) {\\n          if (result.result.status === \"valid\") {\\n            return result.result;\\n          }\\n        }\\n        for (const result of results) {\\n          if (result.result.status === \"dirty\") {\\n            ctx.common.issues.push(...result.ctx.common.issues);\\n            return result.result;\\n          }\\n        }\\n        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_union,\\n          unionErrors\\n        });\\n        return INVALID;\\n      }\\n      if (ctx.common.async) {\\n        return Promise.all(options.map(async (option) => {\\n          const childCtx = {\\n            ...ctx,\\n            common: {\\n              ...ctx.common,\\n              issues: []\\n            },\\n            parent: null\\n          };\\n          return {\\n            result: await option._parseAsync({\\n              data: ctx.data,\\n              path: ctx.path,\\n              parent: childCtx\\n            }),\\n            ctx: childCtx\\n          };\\n        })).then(handleResults);\\n      } else {\\n        let dirty = void 0;\\n        const issues = [];\\n        for (const option of options) {\\n          const childCtx = {\\n            ...ctx,\\n            common: {\\n              ...ctx.common,\\n              issues: []\\n            },\\n            parent: null\\n          };\\n          const result = option._parseSync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: childCtx\\n          });\\n          if (result.status === \"valid\") {\\n            return result;\\n          } else if (result.status === \"dirty\" && !dirty) {\\n            dirty = { result, ctx: childCtx };\\n          }\\n          if (childCtx.common.issues.length) {\\n            issues.push(childCtx.common.issues);\\n          }\\n        }\\n        if (dirty) {\\n          ctx.common.issues.push(...dirty.ctx.common.issues);\\n          return dirty.result;\\n        }\\n        const unionErrors = issues.map((issues2) => new ZodError(issues2));\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_union,\\n          unionErrors\\n        });\\n        return INVALID;\\n      }\\n    }\\n    get options() {\\n      return this._def.options;\\n    }\\n  };\\n  ZodUnion.create = (types, params) => {\\n    return new ZodUnion({\\n      options: types,\\n      typeName: ZodFirstPartyTypeKind.ZodUnion,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var getDiscriminator = (type) => {\\n    if (type instanceof ZodLazy) {\\n      return getDiscriminator(type.schema);\\n    } else if (type instanceof ZodEffects) {\\n      return getDiscriminator(type.innerType());\\n    } else if (type instanceof ZodLiteral) {\\n      return [type.value];\\n    } else if (type instanceof ZodEnum) {\\n      return type.options;\\n    } else if (type instanceof ZodNativeEnum) {\\n      return util.objectValues(type.enum);\\n    } else if (type instanceof ZodDefault) {\\n      return getDiscriminator(type._def.innerType);\\n    } else if (type instanceof ZodUndefined) {\\n      return [void 0];\\n    } else if (type instanceof ZodNull) {\\n      return [null];\\n    } else if (type instanceof ZodOptional) {\\n      return [void 0, ...getDiscriminator(type.unwrap())];\\n    } else if (type instanceof ZodNullable) {\\n      return [null, ...getDiscriminator(type.unwrap())];\\n    } else if (type instanceof ZodBranded) {\\n      return getDiscriminator(type.unwrap());\\n    } else if (type instanceof ZodReadonly) {\\n      return getDiscriminator(type.unwrap());\\n    } else if (type instanceof ZodCatch) {\\n      return getDiscriminator(type._def.innerType);\\n    } else {\\n      return [];\\n    }\\n  };\\n  var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.object) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.object,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const discriminator = this.discriminator;\\n      const discriminatorValue = ctx.data[discriminator];\\n      const option = this.optionsMap.get(discriminatorValue);\\n      if (!option) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_union_discriminator,\\n          options: Array.from(this.optionsMap.keys()),\\n          path: [discriminator]\\n        });\\n        return INVALID;\\n      }\\n      if (ctx.common.async) {\\n        return option._parseAsync({\\n          data: ctx.data,\\n          path: ctx.path,\\n          parent: ctx\\n        });\\n      } else {\\n        return option._parseSync({\\n          data: ctx.data,\\n          path: ctx.path,\\n          parent: ctx\\n        });\\n      }\\n    }\\n    get discriminator() {\\n      return this._def.discriminator;\\n    }\\n    get options() {\\n      return this._def.options;\\n    }\\n    get optionsMap() {\\n      return this._def.optionsMap;\\n    }\\n    /**\\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\\n     * have a different value for each object in the union.\\n     * @param discriminator the name of the discriminator property\\n     * @param types an array of object schemas\\n     * @param params\\n     */\\n    static create(discriminator, options, params) {\\n      const optionsMap = /* @__PURE__ */ new Map();\\n      for (const type of options) {\\n        const discriminatorValues = getDiscriminator(type.shape[discriminator]);\\n        if (!discriminatorValues.length) {\\n          throw new Error(`A discriminator value for key \\\\`${discriminator}\\\\` could not be extracted from all schema options`);\\n        }\\n        for (const value of discriminatorValues) {\\n          if (optionsMap.has(value)) {\\n            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\\n          }\\n          optionsMap.set(value, type);\\n        }\\n      }\\n      return new _ZodDiscriminatedUnion({\\n        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\\n        discriminator,\\n        options,\\n        optionsMap,\\n        ...processCreateParams(params)\\n      });\\n    }\\n  };\\n  function mergeValues(a, b) {\\n    const aType = getParsedType(a);\\n    const bType = getParsedType(b);\\n    if (a === b) {\\n      return { valid: true, data: a };\\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\\n      const bKeys = util.objectKeys(b);\\n      const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\\n      const newObj = { ...a, ...b };\\n      for (const key of sharedKeys) {\\n        const sharedValue = mergeValues(a[key], b[key]);\\n        if (!sharedValue.valid) {\\n          return { valid: false };\\n        }\\n        newObj[key] = sharedValue.data;\\n      }\\n      return { valid: true, data: newObj };\\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\\n      if (a.length !== b.length) {\\n        return { valid: false };\\n      }\\n      const newArray = [];\\n      for (let index2 = 0; index2 < a.length; index2++) {\\n        const itemA = a[index2];\\n        const itemB = b[index2];\\n        const sharedValue = mergeValues(itemA, itemB);\\n        if (!sharedValue.valid) {\\n          return { valid: false };\\n        }\\n        newArray.push(sharedValue.data);\\n      }\\n      return { valid: true, data: newArray };\\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\\n      return { valid: true, data: a };\\n    } else {\\n      return { valid: false };\\n    }\\n  }\\n  var ZodIntersection = class extends ZodType {\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      const handleParsed = (parsedLeft, parsedRight) => {\\n        if (isAborted(parsedLeft) || isAborted(parsedRight)) {\\n          return INVALID;\\n        }\\n        const merged = mergeValues(parsedLeft.value, parsedRight.value);\\n        if (!merged.valid) {\\n          addIssueToContext(ctx, {\\n            code: ZodIssueCode.invalid_intersection_types\\n          });\\n          return INVALID;\\n        }\\n        if (isDirty(parsedLeft) || isDirty(parsedRight)) {\\n          status.dirty();\\n        }\\n        return { status: status.value, value: merged.data };\\n      };\\n      if (ctx.common.async) {\\n        return Promise.all([\\n          this._def.left._parseAsync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: ctx\\n          }),\\n          this._def.right._parseAsync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: ctx\\n          })\\n        ]).then(([left, right]) => handleParsed(left, right));\\n      } else {\\n        return handleParsed(this._def.left._parseSync({\\n          data: ctx.data,\\n          path: ctx.path,\\n          parent: ctx\\n        }), this._def.right._parseSync({\\n          data: ctx.data,\\n          path: ctx.path,\\n          parent: ctx\\n        }));\\n      }\\n    }\\n  };\\n  ZodIntersection.create = (left, right, params) => {\\n    return new ZodIntersection({\\n      left,\\n      right,\\n      typeName: ZodFirstPartyTypeKind.ZodIntersection,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodTuple = class _ZodTuple extends ZodType {\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.array) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.array,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      if (ctx.data.length < this._def.items.length) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.too_small,\\n          minimum: this._def.items.length,\\n          inclusive: true,\\n          exact: false,\\n          type: \"array\"\\n        });\\n        return INVALID;\\n      }\\n      const rest = this._def.rest;\\n      if (!rest && ctx.data.length > this._def.items.length) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.too_big,\\n          maximum: this._def.items.length,\\n          inclusive: true,\\n          exact: false,\\n          type: \"array\"\\n        });\\n        status.dirty();\\n      }\\n      const items = [...ctx.data].map((item, itemIndex) => {\\n        const schema = this._def.items[itemIndex] || this._def.rest;\\n        if (!schema)\\n          return null;\\n        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\\n      }).filter((x) => !!x);\\n      if (ctx.common.async) {\\n        return Promise.all(items).then((results) => {\\n          return ParseStatus.mergeArray(status, results);\\n        });\\n      } else {\\n        return ParseStatus.mergeArray(status, items);\\n      }\\n    }\\n    get items() {\\n      return this._def.items;\\n    }\\n    rest(rest) {\\n      return new _ZodTuple({\\n        ...this._def,\\n        rest\\n      });\\n    }\\n  };\\n  ZodTuple.create = (schemas, params) => {\\n    if (!Array.isArray(schemas)) {\\n      throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\\n    }\\n    return new ZodTuple({\\n      items: schemas,\\n      typeName: ZodFirstPartyTypeKind.ZodTuple,\\n      rest: null,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodRecord = class _ZodRecord extends ZodType {\\n    get keySchema() {\\n      return this._def.keyType;\\n    }\\n    get valueSchema() {\\n      return this._def.valueType;\\n    }\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.object) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.object,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const pairs = [];\\n      const keyType = this._def.keyType;\\n      const valueType = this._def.valueType;\\n      for (const key in ctx.data) {\\n        pairs.push({\\n          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\\n          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\\n          alwaysSet: key in ctx.data\\n        });\\n      }\\n      if (ctx.common.async) {\\n        return ParseStatus.mergeObjectAsync(status, pairs);\\n      } else {\\n        return ParseStatus.mergeObjectSync(status, pairs);\\n      }\\n    }\\n    get element() {\\n      return this._def.valueType;\\n    }\\n    static create(first, second, third) {\\n      if (second instanceof ZodType) {\\n        return new _ZodRecord({\\n          keyType: first,\\n          valueType: second,\\n          typeName: ZodFirstPartyTypeKind.ZodRecord,\\n          ...processCreateParams(third)\\n        });\\n      }\\n      return new _ZodRecord({\\n        keyType: ZodString.create(),\\n        valueType: first,\\n        typeName: ZodFirstPartyTypeKind.ZodRecord,\\n        ...processCreateParams(second)\\n      });\\n    }\\n  };\\n  var ZodMap = class extends ZodType {\\n    get keySchema() {\\n      return this._def.keyType;\\n    }\\n    get valueSchema() {\\n      return this._def.valueType;\\n    }\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.map) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.map,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const keyType = this._def.keyType;\\n      const valueType = this._def.valueType;\\n      const pairs = [...ctx.data.entries()].map(([key, value], index2) => {\\n        return {\\n          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, \"key\"])),\\n          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, \"value\"]))\\n        };\\n      });\\n      if (ctx.common.async) {\\n        const finalMap = /* @__PURE__ */ new Map();\\n        return Promise.resolve().then(async () => {\\n          for (const pair of pairs) {\\n            const key = await pair.key;\\n            const value = await pair.value;\\n            if (key.status === \"aborted\" || value.status === \"aborted\") {\\n              return INVALID;\\n            }\\n            if (key.status === \"dirty\" || value.status === \"dirty\") {\\n              status.dirty();\\n            }\\n            finalMap.set(key.value, value.value);\\n          }\\n          return { status: status.value, value: finalMap };\\n        });\\n      } else {\\n        const finalMap = /* @__PURE__ */ new Map();\\n        for (const pair of pairs) {\\n          const key = pair.key;\\n          const value = pair.value;\\n          if (key.status === \"aborted\" || value.status === \"aborted\") {\\n            return INVALID;\\n          }\\n          if (key.status === \"dirty\" || value.status === \"dirty\") {\\n            status.dirty();\\n          }\\n          finalMap.set(key.value, value.value);\\n        }\\n        return { status: status.value, value: finalMap };\\n      }\\n    }\\n  };\\n  ZodMap.create = (keyType, valueType, params) => {\\n    return new ZodMap({\\n      valueType,\\n      keyType,\\n      typeName: ZodFirstPartyTypeKind.ZodMap,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodSet = class _ZodSet extends ZodType {\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.set) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.set,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const def = this._def;\\n      if (def.minSize !== null) {\\n        if (ctx.data.size < def.minSize.value) {\\n          addIssueToContext(ctx, {\\n            code: ZodIssueCode.too_small,\\n            minimum: def.minSize.value,\\n            type: \"set\",\\n            inclusive: true,\\n            exact: false,\\n            message: def.minSize.message\\n          });\\n          status.dirty();\\n        }\\n      }\\n      if (def.maxSize !== null) {\\n        if (ctx.data.size > def.maxSize.value) {\\n          addIssueToContext(ctx, {\\n            code: ZodIssueCode.too_big,\\n            maximum: def.maxSize.value,\\n            type: \"set\",\\n            inclusive: true,\\n            exact: false,\\n            message: def.maxSize.message\\n          });\\n          status.dirty();\\n        }\\n      }\\n      const valueType = this._def.valueType;\\n      function finalizeSet(elements2) {\\n        const parsedSet = /* @__PURE__ */ new Set();\\n        for (const element of elements2) {\\n          if (element.status === \"aborted\")\\n            return INVALID;\\n          if (element.status === \"dirty\")\\n            status.dirty();\\n          parsedSet.add(element.value);\\n        }\\n        return { status: status.value, value: parsedSet };\\n      }\\n      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\\n      if (ctx.common.async) {\\n        return Promise.all(elements).then((elements2) => finalizeSet(elements2));\\n      } else {\\n        return finalizeSet(elements);\\n      }\\n    }\\n    min(minSize, message) {\\n      return new _ZodSet({\\n        ...this._def,\\n        minSize: { value: minSize, message: errorUtil.toString(message) }\\n      });\\n    }\\n    max(maxSize, message) {\\n      return new _ZodSet({\\n        ...this._def,\\n        maxSize: { value: maxSize, message: errorUtil.toString(message) }\\n      });\\n    }\\n    size(size5, message) {\\n      return this.min(size5, message).max(size5, message);\\n    }\\n    nonempty(message) {\\n      return this.min(1, message);\\n    }\\n  };\\n  ZodSet.create = (valueType, params) => {\\n    return new ZodSet({\\n      valueType,\\n      minSize: null,\\n      maxSize: null,\\n      typeName: ZodFirstPartyTypeKind.ZodSet,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodFunction = class _ZodFunction extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      this.validate = this.implement;\\n    }\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.function) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.function,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      function makeArgsIssue(args, error) {\\n        return makeIssue({\\n          data: args,\\n          path: ctx.path,\\n          errorMaps: [\\n            ctx.common.contextualErrorMap,\\n            ctx.schemaErrorMap,\\n            getErrorMap(),\\n            errorMap\\n          ].filter((x) => !!x),\\n          issueData: {\\n            code: ZodIssueCode.invalid_arguments,\\n            argumentsError: error\\n          }\\n        });\\n      }\\n      function makeReturnsIssue(returns, error) {\\n        return makeIssue({\\n          data: returns,\\n          path: ctx.path,\\n          errorMaps: [\\n            ctx.common.contextualErrorMap,\\n            ctx.schemaErrorMap,\\n            getErrorMap(),\\n            errorMap\\n          ].filter((x) => !!x),\\n          issueData: {\\n            code: ZodIssueCode.invalid_return_type,\\n            returnTypeError: error\\n          }\\n        });\\n      }\\n      const params = { errorMap: ctx.common.contextualErrorMap };\\n      const fn = ctx.data;\\n      if (this._def.returns instanceof ZodPromise) {\\n        const me = this;\\n        return OK(async function(...args) {\\n          const error = new ZodError([]);\\n          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\\n            error.addIssue(makeArgsIssue(args, e));\\n            throw error;\\n          });\\n          const result = await Reflect.apply(fn, this, parsedArgs);\\n          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {\\n            error.addIssue(makeReturnsIssue(result, e));\\n            throw error;\\n          });\\n          return parsedReturns;\\n        });\\n      } else {\\n        const me = this;\\n        return OK(function(...args) {\\n          const parsedArgs = me._def.args.safeParse(args, params);\\n          if (!parsedArgs.success) {\\n            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\\n          }\\n          const result = Reflect.apply(fn, this, parsedArgs.data);\\n          const parsedReturns = me._def.returns.safeParse(result, params);\\n          if (!parsedReturns.success) {\\n            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\\n          }\\n          return parsedReturns.data;\\n        });\\n      }\\n    }\\n    parameters() {\\n      return this._def.args;\\n    }\\n    returnType() {\\n      return this._def.returns;\\n    }\\n    args(...items) {\\n      return new _ZodFunction({\\n        ...this._def,\\n        args: ZodTuple.create(items).rest(ZodUnknown.create())\\n      });\\n    }\\n    returns(returnType) {\\n      return new _ZodFunction({\\n        ...this._def,\\n        returns: returnType\\n      });\\n    }\\n    implement(func) {\\n      const validatedFunc = this.parse(func);\\n      return validatedFunc;\\n    }\\n    strictImplement(func) {\\n      const validatedFunc = this.parse(func);\\n      return validatedFunc;\\n    }\\n    static create(args, returns, params) {\\n      return new _ZodFunction({\\n        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\\n        returns: returns || ZodUnknown.create(),\\n        typeName: ZodFirstPartyTypeKind.ZodFunction,\\n        ...processCreateParams(params)\\n      });\\n    }\\n  };\\n  var ZodLazy = class extends ZodType {\\n    get schema() {\\n      return this._def.getter();\\n    }\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      const lazySchema = this._def.getter();\\n      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\\n    }\\n  };\\n  ZodLazy.create = (getter, params) => {\\n    return new ZodLazy({\\n      getter,\\n      typeName: ZodFirstPartyTypeKind.ZodLazy,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodLiteral = class extends ZodType {\\n    _parse(input) {\\n      if (input.data !== this._def.value) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          received: ctx.data,\\n          code: ZodIssueCode.invalid_literal,\\n          expected: this._def.value\\n        });\\n        return INVALID;\\n      }\\n      return { status: \"valid\", value: input.data };\\n    }\\n    get value() {\\n      return this._def.value;\\n    }\\n  };\\n  ZodLiteral.create = (value, params) => {\\n    return new ZodLiteral({\\n      value,\\n      typeName: ZodFirstPartyTypeKind.ZodLiteral,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  function createZodEnum(values, params) {\\n    return new ZodEnum({\\n      values,\\n      typeName: ZodFirstPartyTypeKind.ZodEnum,\\n      ...processCreateParams(params)\\n    });\\n  }\\n  var ZodEnum = class _ZodEnum extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      _ZodEnum_cache.set(this, void 0);\\n    }\\n    _parse(input) {\\n      if (typeof input.data !== \"string\") {\\n        const ctx = this._getOrReturnCtx(input);\\n        const expectedValues = this._def.values;\\n        addIssueToContext(ctx, {\\n          expected: util.joinValues(expectedValues),\\n          received: ctx.parsedType,\\n          code: ZodIssueCode.invalid_type\\n        });\\n        return INVALID;\\n      }\\n      if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\\n        __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\\n      }\\n      if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\\n        const ctx = this._getOrReturnCtx(input);\\n        const expectedValues = this._def.values;\\n        addIssueToContext(ctx, {\\n          received: ctx.data,\\n          code: ZodIssueCode.invalid_enum_value,\\n          options: expectedValues\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n    get options() {\\n      return this._def.values;\\n    }\\n    get enum() {\\n      const enumValues = {};\\n      for (const val of this._def.values) {\\n        enumValues[val] = val;\\n      }\\n      return enumValues;\\n    }\\n    get Values() {\\n      const enumValues = {};\\n      for (const val of this._def.values) {\\n        enumValues[val] = val;\\n      }\\n      return enumValues;\\n    }\\n    get Enum() {\\n      const enumValues = {};\\n      for (const val of this._def.values) {\\n        enumValues[val] = val;\\n      }\\n      return enumValues;\\n    }\\n    extract(values, newDef = this._def) {\\n      return _ZodEnum.create(values, {\\n        ...this._def,\\n        ...newDef\\n      });\\n    }\\n    exclude(values, newDef = this._def) {\\n      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\\n        ...this._def,\\n        ...newDef\\n      });\\n    }\\n  };\\n  _ZodEnum_cache = /* @__PURE__ */ new WeakMap();\\n  ZodEnum.create = createZodEnum;\\n  var ZodNativeEnum = class extends ZodType {\\n    constructor() {\\n      super(...arguments);\\n      _ZodNativeEnum_cache.set(this, void 0);\\n    }\\n    _parse(input) {\\n      const nativeEnumValues = util.getValidEnumValues(this._def.values);\\n      const ctx = this._getOrReturnCtx(input);\\n      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\\n        const expectedValues = util.objectValues(nativeEnumValues);\\n        addIssueToContext(ctx, {\\n          expected: util.joinValues(expectedValues),\\n          received: ctx.parsedType,\\n          code: ZodIssueCode.invalid_type\\n        });\\n        return INVALID;\\n      }\\n      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\\n        __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\\n      }\\n      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\\n        const expectedValues = util.objectValues(nativeEnumValues);\\n        addIssueToContext(ctx, {\\n          received: ctx.data,\\n          code: ZodIssueCode.invalid_enum_value,\\n          options: expectedValues\\n        });\\n        return INVALID;\\n      }\\n      return OK(input.data);\\n    }\\n    get enum() {\\n      return this._def.values;\\n    }\\n  };\\n  _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();\\n  ZodNativeEnum.create = (values, params) => {\\n    return new ZodNativeEnum({\\n      values,\\n      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodPromise = class extends ZodType {\\n    unwrap() {\\n      return this._def.type;\\n    }\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.promise,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\\n      return OK(promisified.then((data) => {\\n        return this._def.type.parseAsync(data, {\\n          path: ctx.path,\\n          errorMap: ctx.common.contextualErrorMap\\n        });\\n      }));\\n    }\\n  };\\n  ZodPromise.create = (schema, params) => {\\n    return new ZodPromise({\\n      type: schema,\\n      typeName: ZodFirstPartyTypeKind.ZodPromise,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodEffects = class extends ZodType {\\n    innerType() {\\n      return this._def.schema;\\n    }\\n    sourceType() {\\n      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\\n    }\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      const effect = this._def.effect || null;\\n      const checkCtx = {\\n        addIssue: (arg) => {\\n          addIssueToContext(ctx, arg);\\n          if (arg.fatal) {\\n            status.abort();\\n          } else {\\n            status.dirty();\\n          }\\n        },\\n        get path() {\\n          return ctx.path;\\n        }\\n      };\\n      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\\n      if (effect.type === \"preprocess\") {\\n        const processed = effect.transform(ctx.data, checkCtx);\\n        if (ctx.common.async) {\\n          return Promise.resolve(processed).then(async (processed2) => {\\n            if (status.value === \"aborted\")\\n              return INVALID;\\n            const result = await this._def.schema._parseAsync({\\n              data: processed2,\\n              path: ctx.path,\\n              parent: ctx\\n            });\\n            if (result.status === \"aborted\")\\n              return INVALID;\\n            if (result.status === \"dirty\")\\n              return DIRTY(result.value);\\n            if (status.value === \"dirty\")\\n              return DIRTY(result.value);\\n            return result;\\n          });\\n        } else {\\n          if (status.value === \"aborted\")\\n            return INVALID;\\n          const result = this._def.schema._parseSync({\\n            data: processed,\\n            path: ctx.path,\\n            parent: ctx\\n          });\\n          if (result.status === \"aborted\")\\n            return INVALID;\\n          if (result.status === \"dirty\")\\n            return DIRTY(result.value);\\n          if (status.value === \"dirty\")\\n            return DIRTY(result.value);\\n          return result;\\n        }\\n      }\\n      if (effect.type === \"refinement\") {\\n        const executeRefinement = (acc) => {\\n          const result = effect.refinement(acc, checkCtx);\\n          if (ctx.common.async) {\\n            return Promise.resolve(result);\\n          }\\n          if (result instanceof Promise) {\\n            throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\\n          }\\n          return acc;\\n        };\\n        if (ctx.common.async === false) {\\n          const inner = this._def.schema._parseSync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: ctx\\n          });\\n          if (inner.status === \"aborted\")\\n            return INVALID;\\n          if (inner.status === \"dirty\")\\n            status.dirty();\\n          executeRefinement(inner.value);\\n          return { status: status.value, value: inner.value };\\n        } else {\\n          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\\n            if (inner.status === \"aborted\")\\n              return INVALID;\\n            if (inner.status === \"dirty\")\\n              status.dirty();\\n            return executeRefinement(inner.value).then(() => {\\n              return { status: status.value, value: inner.value };\\n            });\\n          });\\n        }\\n      }\\n      if (effect.type === \"transform\") {\\n        if (ctx.common.async === false) {\\n          const base2 = this._def.schema._parseSync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: ctx\\n          });\\n          if (!isValid(base2))\\n            return base2;\\n          const result = effect.transform(base2.value, checkCtx);\\n          if (result instanceof Promise) {\\n            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\\n          }\\n          return { status: status.value, value: result };\\n        } else {\\n          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base2) => {\\n            if (!isValid(base2))\\n              return base2;\\n            return Promise.resolve(effect.transform(base2.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\\n          });\\n        }\\n      }\\n      util.assertNever(effect);\\n    }\\n  };\\n  ZodEffects.create = (schema, effect, params) => {\\n    return new ZodEffects({\\n      schema,\\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\\n      effect,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {\\n    return new ZodEffects({\\n      schema,\\n      effect: { type: \"preprocess\", transform: preprocess },\\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodOptional = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType === ZodParsedType.undefined) {\\n        return OK(void 0);\\n      }\\n      return this._def.innerType._parse(input);\\n    }\\n    unwrap() {\\n      return this._def.innerType;\\n    }\\n  };\\n  ZodOptional.create = (type, params) => {\\n    return new ZodOptional({\\n      innerType: type,\\n      typeName: ZodFirstPartyTypeKind.ZodOptional,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodNullable = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType === ZodParsedType.null) {\\n        return OK(null);\\n      }\\n      return this._def.innerType._parse(input);\\n    }\\n    unwrap() {\\n      return this._def.innerType;\\n    }\\n  };\\n  ZodNullable.create = (type, params) => {\\n    return new ZodNullable({\\n      innerType: type,\\n      typeName: ZodFirstPartyTypeKind.ZodNullable,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodDefault = class extends ZodType {\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      let data = ctx.data;\\n      if (ctx.parsedType === ZodParsedType.undefined) {\\n        data = this._def.defaultValue();\\n      }\\n      return this._def.innerType._parse({\\n        data,\\n        path: ctx.path,\\n        parent: ctx\\n      });\\n    }\\n    removeDefault() {\\n      return this._def.innerType;\\n    }\\n  };\\n  ZodDefault.create = (type, params) => {\\n    return new ZodDefault({\\n      innerType: type,\\n      typeName: ZodFirstPartyTypeKind.ZodDefault,\\n      defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodCatch = class extends ZodType {\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      const newCtx = {\\n        ...ctx,\\n        common: {\\n          ...ctx.common,\\n          issues: []\\n        }\\n      };\\n      const result = this._def.innerType._parse({\\n        data: newCtx.data,\\n        path: newCtx.path,\\n        parent: {\\n          ...newCtx\\n        }\\n      });\\n      if (isAsync(result)) {\\n        return result.then((result2) => {\\n          return {\\n            status: \"valid\",\\n            value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\\n              get error() {\\n                return new ZodError(newCtx.common.issues);\\n              },\\n              input: newCtx.data\\n            })\\n          };\\n        });\\n      } else {\\n        return {\\n          status: \"valid\",\\n          value: result.status === \"valid\" ? result.value : this._def.catchValue({\\n            get error() {\\n              return new ZodError(newCtx.common.issues);\\n            },\\n            input: newCtx.data\\n          })\\n        };\\n      }\\n    }\\n    removeCatch() {\\n      return this._def.innerType;\\n    }\\n  };\\n  ZodCatch.create = (type, params) => {\\n    return new ZodCatch({\\n      innerType: type,\\n      typeName: ZodFirstPartyTypeKind.ZodCatch,\\n      catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var ZodNaN = class extends ZodType {\\n    _parse(input) {\\n      const parsedType = this._getType(input);\\n      if (parsedType !== ZodParsedType.nan) {\\n        const ctx = this._getOrReturnCtx(input);\\n        addIssueToContext(ctx, {\\n          code: ZodIssueCode.invalid_type,\\n          expected: ZodParsedType.nan,\\n          received: ctx.parsedType\\n        });\\n        return INVALID;\\n      }\\n      return { status: \"valid\", value: input.data };\\n    }\\n  };\\n  ZodNaN.create = (params) => {\\n    return new ZodNaN({\\n      typeName: ZodFirstPartyTypeKind.ZodNaN,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  var BRAND = Symbol(\"zod_brand\");\\n  var ZodBranded = class extends ZodType {\\n    _parse(input) {\\n      const { ctx } = this._processInputParams(input);\\n      const data = ctx.data;\\n      return this._def.type._parse({\\n        data,\\n        path: ctx.path,\\n        parent: ctx\\n      });\\n    }\\n    unwrap() {\\n      return this._def.type;\\n    }\\n  };\\n  var ZodPipeline = class _ZodPipeline extends ZodType {\\n    _parse(input) {\\n      const { status, ctx } = this._processInputParams(input);\\n      if (ctx.common.async) {\\n        const handleAsync = async () => {\\n          const inResult = await this._def.in._parseAsync({\\n            data: ctx.data,\\n            path: ctx.path,\\n            parent: ctx\\n          });\\n          if (inResult.status === \"aborted\")\\n            return INVALID;\\n          if (inResult.status === \"dirty\") {\\n            status.dirty();\\n            return DIRTY(inResult.value);\\n          } else {\\n            return this._def.out._parseAsync({\\n              data: inResult.value,\\n              path: ctx.path,\\n              parent: ctx\\n            });\\n          }\\n        };\\n        return handleAsync();\\n      } else {\\n        const inResult = this._def.in._parseSync({\\n          data: ctx.data,\\n          path: ctx.path,\\n          parent: ctx\\n        });\\n        if (inResult.status === \"aborted\")\\n          return INVALID;\\n        if (inResult.status === \"dirty\") {\\n          status.dirty();\\n          return {\\n            status: \"dirty\",\\n            value: inResult.value\\n          };\\n        } else {\\n          return this._def.out._parseSync({\\n            data: inResult.value,\\n            path: ctx.path,\\n            parent: ctx\\n          });\\n        }\\n      }\\n    }\\n    static create(a, b) {\\n      return new _ZodPipeline({\\n        in: a,\\n        out: b,\\n        typeName: ZodFirstPartyTypeKind.ZodPipeline\\n      });\\n    }\\n  };\\n  var ZodReadonly = class extends ZodType {\\n    _parse(input) {\\n      const result = this._def.innerType._parse(input);\\n      const freeze = (data) => {\\n        if (isValid(data)) {\\n          data.value = Object.freeze(data.value);\\n        }\\n        return data;\\n      };\\n      return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\\n    }\\n    unwrap() {\\n      return this._def.innerType;\\n    }\\n  };\\n  ZodReadonly.create = (type, params) => {\\n    return new ZodReadonly({\\n      innerType: type,\\n      typeName: ZodFirstPartyTypeKind.ZodReadonly,\\n      ...processCreateParams(params)\\n    });\\n  };\\n  function cleanParams(params, data) {\\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\\n    const p2 = typeof p === \"string\" ? { message: p } : p;\\n    return p2;\\n  }\\n  function custom2(check, _params = {}, fatal) {\\n    if (check)\\n      return ZodAny.create().superRefine((data, ctx) => {\\n        var _a, _b;\\n        const r = check(data);\\n        if (r instanceof Promise) {\\n          return r.then((r2) => {\\n            var _a2, _b2;\\n            if (!r2) {\\n              const params = cleanParams(_params, data);\\n              const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;\\n              ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\\n            }\\n          });\\n        }\\n        if (!r) {\\n          const params = cleanParams(_params, data);\\n          const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\\n          ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\\n        }\\n        return;\\n      });\\n    return ZodAny.create();\\n  }\\n  var late = {\\n    object: ZodObject.lazycreate\\n  };\\n  var ZodFirstPartyTypeKind;\\n  (function(ZodFirstPartyTypeKind2) {\\n    ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\\n    ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\\n    ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\\n    ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\\n    ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\\n    ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\\n    ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\\n    ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\\n    ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\\n    ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\\n    ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\\n    ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\\n    ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\\n    ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\\n    ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\\n    ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\\n    ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\\n    ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\\n    ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\\n    ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\\n    ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\\n    ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\\n    ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\\n    ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\\n    ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\\n    ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\\n    ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\\n    ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\\n    ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\\n    ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\\n    ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\\n    ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\\n    ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\\n    ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\\n    ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\\n    ZodFirstPartyTypeKind2[\"ZodReadonly\"] = \"ZodReadonly\";\\n  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\\n  var instanceOfType = (cls, params = {\\n    message: `Input not instance of ${cls.name}`\\n  }) => custom2((data) => data instanceof cls, params);\\n  var stringType = ZodString.create;\\n  var numberType = ZodNumber.create;\\n  var nanType = ZodNaN.create;\\n  var bigIntType = ZodBigInt.create;\\n  var booleanType = ZodBoolean.create;\\n  var dateType = ZodDate.create;\\n  var symbolType = ZodSymbol.create;\\n  var undefinedType = ZodUndefined.create;\\n  var nullType = ZodNull.create;\\n  var anyType = ZodAny.create;\\n  var unknownType = ZodUnknown.create;\\n  var neverType = ZodNever.create;\\n  var voidType = ZodVoid.create;\\n  var arrayType = ZodArray.create;\\n  var objectType = ZodObject.create;\\n  var strictObjectType = ZodObject.strictCreate;\\n  var unionType = ZodUnion.create;\\n  var discriminatedUnionType = ZodDiscriminatedUnion.create;\\n  var intersectionType = ZodIntersection.create;\\n  var tupleType = ZodTuple.create;\\n  var recordType = ZodRecord.create;\\n  var mapType = ZodMap.create;\\n  var setType = ZodSet.create;\\n  var functionType = ZodFunction.create;\\n  var lazyType = ZodLazy.create;\\n  var literalType = ZodLiteral.create;\\n  var enumType = ZodEnum.create;\\n  var nativeEnumType = ZodNativeEnum.create;\\n  var promiseType = ZodPromise.create;\\n  var effectsType = ZodEffects.create;\\n  var optionalType = ZodOptional.create;\\n  var nullableType = ZodNullable.create;\\n  var preprocessType = ZodEffects.createWithPreprocess;\\n  var pipelineType = ZodPipeline.create;\\n  var ostring = () => stringType().optional();\\n  var onumber = () => numberType().optional();\\n  var oboolean = () => booleanType().optional();\\n  var coerce = {\\n    string: (arg) => ZodString.create({ ...arg, coerce: true }),\\n    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),\\n    boolean: (arg) => ZodBoolean.create({\\n      ...arg,\\n      coerce: true\\n    }),\\n    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),\\n    date: (arg) => ZodDate.create({ ...arg, coerce: true })\\n  };\\n  var NEVER = INVALID;\\n  var z = /* @__PURE__ */ Object.freeze({\\n    __proto__: null,\\n    defaultErrorMap: errorMap,\\n    setErrorMap,\\n    getErrorMap,\\n    makeIssue,\\n    EMPTY_PATH,\\n    addIssueToContext,\\n    ParseStatus,\\n    INVALID,\\n    DIRTY,\\n    OK,\\n    isAborted,\\n    isDirty,\\n    isValid,\\n    isAsync,\\n    get util() {\\n      return util;\\n    },\\n    get objectUtil() {\\n      return objectUtil;\\n    },\\n    ZodParsedType,\\n    getParsedType,\\n    ZodType,\\n    datetimeRegex,\\n    ZodString,\\n    ZodNumber,\\n    ZodBigInt,\\n    ZodBoolean,\\n    ZodDate,\\n    ZodSymbol,\\n    ZodUndefined,\\n    ZodNull,\\n    ZodAny,\\n    ZodUnknown,\\n    ZodNever,\\n    ZodVoid,\\n    ZodArray,\\n    ZodObject,\\n    ZodUnion,\\n    ZodDiscriminatedUnion,\\n    ZodIntersection,\\n    ZodTuple,\\n    ZodRecord,\\n    ZodMap,\\n    ZodSet,\\n    ZodFunction,\\n    ZodLazy,\\n    ZodLiteral,\\n    ZodEnum,\\n    ZodNativeEnum,\\n    ZodPromise,\\n    ZodEffects,\\n    ZodTransformer: ZodEffects,\\n    ZodOptional,\\n    ZodNullable,\\n    ZodDefault,\\n    ZodCatch,\\n    ZodNaN,\\n    BRAND,\\n    ZodBranded,\\n    ZodPipeline,\\n    ZodReadonly,\\n    custom: custom2,\\n    Schema: ZodType,\\n    ZodSchema: ZodType,\\n    late,\\n    get ZodFirstPartyTypeKind() {\\n      return ZodFirstPartyTypeKind;\\n    },\\n    coerce,\\n    any: anyType,\\n    array: arrayType,\\n    bigint: bigIntType,\\n    boolean: booleanType,\\n    date: dateType,\\n    discriminatedUnion: discriminatedUnionType,\\n    effect: effectsType,\\n    \"enum\": enumType,\\n    \"function\": functionType,\\n    \"instanceof\": instanceOfType,\\n    intersection: intersectionType,\\n    lazy: lazyType,\\n    literal: literalType,\\n    map: mapType,\\n    nan: nanType,\\n    nativeEnum: nativeEnumType,\\n    never: neverType,\\n    \"null\": nullType,\\n    nullable: nullableType,\\n    number: numberType,\\n    object: objectType,\\n    oboolean,\\n    onumber,\\n    optional: optionalType,\\n    ostring,\\n    pipeline: pipelineType,\\n    preprocess: preprocessType,\\n    promise: promiseType,\\n    record: recordType,\\n    set: setType,\\n    strictObject: strictObjectType,\\n    string: stringType,\\n    symbol: symbolType,\\n    transformer: effectsType,\\n    tuple: tupleType,\\n    \"undefined\": undefinedType,\\n    union: unionType,\\n    unknown: unknownType,\\n    \"void\": voidType,\\n    NEVER,\\n    ZodIssueCode,\\n    quotelessJson,\\n    ZodError\\n  });\\n\\n  // src/types/shared/money.ts\\n  var moneySchema = z.union([z.string().transform((x) => x.replace(/[^0-9.-]+/g, \"\")), z.number()]).pipe(z.coerce.number().min(1e-4).max(999999999));\\n\\n  // src/types/shared/network.ts\\n  var NetworkSchema = z.enum([\\n    \"base-sepolia\",\\n    \"base\",\\n    \"avalanche-fuji\",\\n    \"avalanche\",\\n    \"iotex\"\\n  ]);\\n  var SupportedEVMNetworks = [\\n    \"base-sepolia\",\\n    \"base\",\\n    \"avalanche-fuji\",\\n    \"avalanche\",\\n    \"iotex\"\\n  ];\\n  var EvmNetworkToChainId = /* @__PURE__ */ new Map([\\n    [\"base-sepolia\", 84532],\\n    [\"base\", 8453],\\n    [\"avalanche-fuji\", 43113],\\n    [\"avalanche\", 43114],\\n    [\"iotex\", 4689]\\n  ]);\\n  var ChainIdToNetwork = Object.fromEntries(\\n    SupportedEVMNetworks.map((network) => [EvmNetworkToChainId.get(network), network])\\n  );\\n\\n  // src/shared/network.ts\\n  function getNetworkId(network) {\\n    if (EvmNetworkToChainId.has(network)) {\\n      return EvmNetworkToChainId.get(network);\\n    }\\n    throw new Error(`Unsupported network: ${network}`);\\n  }\\n\\n  // src/types/verify/x402Specs.ts\\n  var EvmMaxAtomicUnits = 18;\\n  var EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\\n  var MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\\n  var HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\\n  var EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\\n  var schemes = [\"exact\"];\\n  var x402Versions = [1];\\n  var ErrorReasons = [\"insufficient_funds\", \"invalid_scheme\", \"invalid_network\"];\\n  var isInteger = (value) => Number.isInteger(Number(value)) && Number(value) >= 0;\\n  var hasMaxLength = (maxLength) => (value) => value.length <= maxLength;\\n  var PaymentRequirementsSchema = z.object({\\n    scheme: z.enum(schemes),\\n    network: NetworkSchema,\\n    maxAmountRequired: z.string().refine(isInteger),\\n    resource: z.string().url(),\\n    description: z.string(),\\n    mimeType: z.string(),\\n    outputSchema: z.record(z.any()).optional(),\\n    payTo: z.string().regex(MixedAddressRegex),\\n    maxTimeoutSeconds: z.number().int(),\\n    asset: z.string().regex(MixedAddressRegex),\\n    extra: z.record(z.any()).optional()\\n  });\\n  var ExactEvmPayloadAuthorizationSchema = z.object({\\n    from: z.string().regex(EvmAddressRegex),\\n    to: z.string().regex(EvmAddressRegex),\\n    value: z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\\n    validAfter: z.string().refine(isInteger),\\n    validBefore: z.string().refine(isInteger),\\n    nonce: z.string().regex(HexEncoded64ByteRegex)\\n  });\\n  var ExactEvmPayloadSchema = z.object({\\n    signature: z.string().regex(EvmSignatureRegex),\\n    authorization: ExactEvmPayloadAuthorizationSchema\\n  });\\n  var PaymentPayloadSchema = z.object({\\n    x402Version: z.number().refine((val) => x402Versions.includes(val)),\\n    scheme: z.enum(schemes),\\n    network: NetworkSchema,\\n    payload: ExactEvmPayloadSchema\\n  });\\n  var VerifyResponseSchema = z.object({\\n    isValid: z.boolean(),\\n    invalidReason: z.enum(ErrorReasons).optional(),\\n    payer: z.string().regex(MixedAddressRegex).optional()\\n  });\\n  var SettleResponseSchema = z.object({\\n    success: z.boolean(),\\n    errorReason: z.enum(ErrorReasons).optional(),\\n    payer: z.string().regex(MixedAddressRegex).optional(),\\n    transaction: z.string().regex(MixedAddressRegex),\\n    network: NetworkSchema\\n  });\\n  var SupportedPaymentKindSchema = z.object({\\n    x402Version: z.number().refine((val) => x402Versions.includes(val)),\\n    scheme: z.enum(schemes),\\n    network: NetworkSchema\\n  });\\n  var SupportedPaymentKindsResponseSchema = z.object({\\n    kinds: z.array(SupportedPaymentKindSchema)\\n  });\\n\\n  // src/types/verify/facilitator.ts\\n  var facilitatorRequestSchema = z.object({\\n    paymentHeader: z.string(),\\n    paymentRequirements: PaymentRequirementsSchema\\n  });\\n\\n  // src/shared/evm/usdc.ts\\n  function getUsdcAddress(client) {\\n    return config[client.chain.id.toString()].usdcAddress;\\n  }\\n  function getUsdcAddressForChain(chainId) {\\n    return config[chainId.toString()].usdcAddress;\\n  }\\n  var versionCache = null;\\n  async function getVersion2(client) {\\n    if (versionCache !== null) {\\n      return versionCache;\\n    }\\n    const version4 = await client.readContract({\\n      address: getUsdcAddress(client),\\n      abi: usdcABI,\\n      functionName: \"version\"\\n    });\\n    versionCache = version4;\\n    return versionCache;\\n  }\\n  async function getUSDCBalance(client, address) {\\n    const balance = await client.readContract({\\n      address: getUsdcAddressForChain(client.chain.id),\\n      abi: usdcABI,\\n      functionName: \"balanceOf\",\\n      args: [address]\\n    });\\n    return balance;\\n  }\\n\\n  // src/schemes/exact/evm/sign.ts\\n  async function signAuthorization2(walletClient, { from: from5, to, value, validAfter, validBefore, nonce }, { asset, network, extra }) {\\n    const chainId = getNetworkId(network);\\n    const name = extra?.name;\\n    const version4 = extra?.version;\\n    const account = isSignerWallet(walletClient) ? walletClient.account : walletClient;\\n    const data = {\\n      account,\\n      types: authorizationTypes,\\n      domain: {\\n        name,\\n        version: version4,\\n        chainId,\\n        verifyingContract: asset\\n      },\\n      primaryType: \"TransferWithAuthorization\",\\n      message: {\\n        from: from5,\\n        to,\\n        value,\\n        validAfter,\\n        validBefore,\\n        nonce\\n      }\\n    };\\n    if (isSignerWallet(walletClient)) {\\n      const signature = await walletClient.signTypedData(data);\\n      return {\\n        signature\\n      };\\n    } else if (isAccount(walletClient) && walletClient.signTypedData) {\\n      const signature = await walletClient.signTypedData(data);\\n      return {\\n        signature\\n      };\\n    } else {\\n      throw new Error(\"Invalid wallet client provided does not support signTypedData\");\\n    }\\n  }\\n  function createNonce() {\\n    const cryptoObj = typeof globalThis.crypto !== \"undefined\" && typeof globalThis.crypto.getRandomValues === \"function\" ? globalThis.crypto : (\\n      // Dynamic require is needed to support node.js\\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\\n      __require(\"crypto\").webcrypto\\n    );\\n    return toHex(cryptoObj.getRandomValues(new Uint8Array(32)));\\n  }\\n\\n  // src/schemes/exact/evm/utils/paymentUtils.ts\\n  function encodePayment(payment) {\\n    const safe = {\\n      ...payment,\\n      payload: {\\n        ...payment.payload,\\n        authorization: Object.fromEntries(\\n          Object.entries(payment.payload.authorization).map(([key, value]) => [\\n            key,\\n            typeof value === \"bigint\" ? value.toString() : value\\n          ])\\n        )\\n      }\\n    };\\n    return safeBase64Encode(JSON.stringify(safe));\\n  }\\n\\n  // src/schemes/exact/evm/client.ts\\n  function preparePaymentHeader(from5, x402Version, paymentRequirements) {\\n    const nonce = createNonce();\\n    const validAfter = BigInt(\\n      Math.floor(Date.now() / 1e3) - 600\\n      // 10 minutes before\\n    ).toString();\\n    const validBefore = BigInt(\\n      Math.floor(Date.now() / 1e3 + paymentRequirements.maxTimeoutSeconds)\\n    ).toString();\\n    return {\\n      x402Version,\\n      scheme: paymentRequirements.scheme,\\n      network: paymentRequirements.network,\\n      payload: {\\n        signature: void 0,\\n        authorization: {\\n          from: from5,\\n          to: paymentRequirements.payTo,\\n          value: paymentRequirements.maxAmountRequired,\\n          validAfter: validAfter.toString(),\\n          validBefore: validBefore.toString(),\\n          nonce\\n        }\\n      }\\n    };\\n  }\\n  async function signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader) {\\n    const { signature } = await signAuthorization2(\\n      client,\\n      unsignedPaymentHeader.payload.authorization,\\n      paymentRequirements\\n    );\\n    return {\\n      ...unsignedPaymentHeader,\\n      payload: {\\n        ...unsignedPaymentHeader.payload,\\n        signature\\n      }\\n    };\\n  }\\n  async function createPayment(client, x402Version, paymentRequirements) {\\n    const from5 = isSignerWallet(client) ? client.account.address : client.address;\\n    const unsignedPaymentHeader = preparePaymentHeader(from5, x402Version, paymentRequirements);\\n    return signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader);\\n  }\\n  async function createPaymentHeader(client, x402Version, paymentRequirements) {\\n    const payment = await createPayment(client, x402Version, paymentRequirements);\\n    return encodePayment(payment);\\n  }\\n\\n  // src/paywall/scripts.ts\\n  function safeBase64Encode2(data) {\\n    return window.btoa(data);\\n  }\\n  function selectPaymentRequirements(paymentRequirements, network, scheme = \"exact\") {\\n    const requirementsArray = Array.isArray(paymentRequirements) ? paymentRequirements : [paymentRequirements];\\n    const matching = requirementsArray.filter((req) => {\\n      const schemeMatch = !scheme || req.scheme === scheme;\\n      const networkMatch = !network || req.network === network;\\n      return schemeMatch && networkMatch;\\n    });\\n    return matching.length > 0 ? matching[0] : requirementsArray[0];\\n  }\\n  function ensureValidAmount(paymentRequirements) {\\n    const updatedRequirements = JSON.parse(JSON.stringify(paymentRequirements));\\n    if (window.x402?.amount) {\\n      try {\\n        const amountInBaseUnits = Math.round(window.x402.amount * 1e6);\\n        updatedRequirements.maxAmountRequired = amountInBaseUnits.toString();\\n      } catch (error) {\\n        console.error(\"Failed to parse amount:\", error);\\n      }\\n    }\\n    if (!updatedRequirements.maxAmountRequired || !/^\\\\d+$/.test(updatedRequirements.maxAmountRequired)) {\\n      updatedRequirements.maxAmountRequired = \"10000\";\\n    }\\n    return updatedRequirements;\\n  }\\n  function ensureFunctionsAreAvailable() {\\n    return {\\n      createPaymentHeader,\\n      createPayment,\\n      signAuthorization: signAuthorization2,\\n      createNonce,\\n      getVersion: getVersion2,\\n      encodePayment\\n    };\\n  }\\n  function updatePaymentUI(x402) {\\n    if (!x402) return;\\n    const amount = x402.amount || 0;\\n    const testnet = x402.testnet ?? true;\\n    const chainName = testnet ? \"Base Sepolia\" : \"Base\";\\n    const network = testnet ? \"base-sepolia\" : \"base\";\\n    const paymentRequirements = selectPaymentRequirements(\\n      x402.paymentRequirements,\\n      network,\\n      \"exact\"\\n    );\\n    const descriptionEl = document.getElementById(\"payment-description\");\\n    if (descriptionEl) {\\n      descriptionEl.textContent = paymentRequirements.description ? `${paymentRequirements.description}. To access this content, please pay $${amount} ${chainName} USDC.` : `To access this content, please pay $${amount} ${chainName} USDC.`;\\n    }\\n    const instructionsEl = document.getElementById(\"instructions\");\\n    if (instructionsEl) {\\n      if (testnet) {\\n        instructionsEl.style.display = \"block\";\\n      } else {\\n        instructionsEl.style.display = \"none\";\\n      }\\n    }\\n    const amountEl = document.getElementById(\"payment-amount\");\\n    if (amountEl) {\\n      amountEl.textContent = `$${amount} USDC`;\\n    }\\n    const networkEl = document.getElementById(\"payment-network\");\\n    if (networkEl) {\\n      networkEl.textContent = chainName;\\n    }\\n    const loadingElement = document.getElementById(\"loading-message\");\\n    if (loadingElement) {\\n      loadingElement.style.display = \"none\";\\n    }\\n    const walletConnectionElement = document.getElementById(\"wallet-connection\");\\n    if (walletConnectionElement) {\\n      walletConnectionElement.style.display = \"block\";\\n    }\\n  }\\n  async function connectWallet(chain) {\\n    if (!window.ethereum) {\\n      throw new Error(\"No injected Ethereum provider found. Please install MetaMask or similar.\");\\n    }\\n    const addresses = await window.ethereum.request({\\n      method: \"eth_requestAccounts\"\\n    });\\n    if (!addresses || addresses.length === 0) {\\n      throw new Error(\"No accounts found\");\\n    }\\n    try {\\n      await window.ethereum.request({\\n        method: \"wallet_switchEthereumChain\",\\n        params: [{ chainId: `0x${chain.id.toString(16)}` }]\\n      });\\n    } catch (switchError) {\\n      const error = switchError;\\n      if (error.code === 4902) {\\n        await window.ethereum.request({\\n          method: \"wallet_addEthereumChain\",\\n          params: [\\n            {\\n              chainId: `0x${chain.id.toString(16)}`,\\n              chainName: chain.name,\\n              nativeCurrency: chain.nativeCurrency,\\n              rpcUrls: [chain.rpcUrls.default.http[0]],\\n              blockExplorerUrls: [chain.blockExplorers?.default.url]\\n            }\\n          ]\\n        });\\n      } else {\\n        throw switchError;\\n      }\\n    }\\n    return addresses[0];\\n  }\\n  async function initializeApp() {\\n    const x402 = window.x402;\\n    if (!x402) {\\n      console.error(\"x402 configuration not found\");\\n      return;\\n    }\\n    ensureFunctionsAreAvailable();\\n    const chain = x402.testnet ? baseSepolia : base;\\n    const network = x402.testnet ? \"base-sepolia\" : \"base\";\\n    let walletClient = null;\\n    let address;\\n    const publicClient = createPublicClient({\\n      chain,\\n      transport: http()\\n    }).extend(publicActions);\\n    const connectWalletBtn = document.getElementById(\"connect-wallet\");\\n    const paymentSection = document.getElementById(\"payment-section\");\\n    const payButton = document.getElementById(\"pay-button\");\\n    const statusDiv = document.getElementById(\"status\");\\n    if (!connectWalletBtn || !paymentSection || !payButton || !statusDiv) {\\n      console.error(\"Required DOM elements not found\");\\n      return;\\n    }\\n    const handleWalletConnect = async () => {\\n      try {\\n        statusDiv.textContent = \"Connecting wallet...\";\\n        address = await connectWallet(chain);\\n        if (!address || !window.ethereum) {\\n          throw new Error(\"No account selected in your wallet\");\\n        }\\n        walletClient = createWalletClient({\\n          chain,\\n          transport: custom(window.ethereum),\\n          account: address\\n        }).extend(publicActions);\\n        const accountEl = document.getElementById(\"payment-account\");\\n        if (accountEl) {\\n          accountEl.textContent = `${address.slice(0, 6)}...${address.slice(-4)}`;\\n        }\\n        connectWalletBtn.textContent = \"Connected\";\\n        connectWalletBtn.classList.add(\"connected\");\\n        connectWalletBtn.disabled = true;\\n        paymentSection.classList.remove(\"hidden\");\\n        statusDiv.textContent = \"Wallet connected! You can now proceed with payment.\";\\n        connectWalletBtn.removeEventListener(\"click\", handleWalletConnect);\\n      } catch (error) {\\n        statusDiv.textContent = error instanceof Error ? error.message : \"Failed to connect wallet\";\\n        connectWalletBtn.textContent = \"Connect wallet\";\\n        connectWalletBtn.classList.remove(\"connected\");\\n        connectWalletBtn.disabled = false;\\n        paymentSection.classList.add(\"hidden\");\\n      }\\n    };\\n    const handlePayment = async () => {\\n      if (!walletClient || !address) {\\n        statusDiv.textContent = \"No wallet connected. Please connect your wallet first.\";\\n        return;\\n      }\\n      try {\\n        statusDiv.textContent = \"Checking USDC balance...\";\\n        const balance = await getUSDCBalance(publicClient, address);\\n        if (balance === 0n) {\\n          throw new Error(\\n            `Your USDC balance is 0. Please make sure you have USDC tokens on ${chain.name}`\\n          );\\n        }\\n      } catch (error) {\\n        statusDiv.textContent = error instanceof Error ? error.message : \"Failed to check USDC balance\";\\n        return;\\n      }\\n      statusDiv.textContent = \"Creating payment signature...\";\\n      try {\\n        const paymentRequirements = selectPaymentRequirements(\\n          x402.paymentRequirements,\\n          network,\\n          \"exact\"\\n        );\\n        const validPaymentRequirements = ensureValidAmount(paymentRequirements);\\n        const initialPayment = await createPayment(walletClient, 1, validPaymentRequirements);\\n        initialPayment.x402Version = 1;\\n        const paymentHeader = safeBase64Encode2(JSON.stringify(initialPayment));\\n        statusDiv.textContent = \"Requesting content with payment...\";\\n        try {\\n          const response = await fetch(x402.currentUrl, {\\n            headers: {\\n              \"X-PAYMENT\": paymentHeader,\\n              \"Access-Control-Expose-Headers\": \"X-PAYMENT-RESPONSE\"\\n            }\\n          });\\n          if (response.ok) {\\n            const contentType = response.headers.get(\"content-type\");\\n            if (contentType && contentType.includes(\"text/html\")) {\\n              document.documentElement.innerHTML = await response.text();\\n            } else {\\n              const blob = await response.blob();\\n              const url = window.URL.createObjectURL(blob);\\n              window.location.href = url;\\n            }\\n          } else if (response.status === 402) {\\n            try {\\n              const errorData = await response.json();\\n              if (errorData && typeof errorData.x402Version === \"number\") {\\n                const retryPayment = await createPayment(\\n                  walletClient,\\n                  errorData.x402Version,\\n                  validPaymentRequirements\\n                );\\n                retryPayment.x402Version = errorData.x402Version;\\n                const retryHeader = safeBase64Encode2(JSON.stringify(retryPayment));\\n                const retryResponse = await fetch(x402.currentUrl, {\\n                  headers: {\\n                    \"X-PAYMENT\": retryHeader,\\n                    \"Access-Control-Expose-Headers\": \"X-PAYMENT-RESPONSE\"\\n                  }\\n                });\\n                if (retryResponse.ok) {\\n                  const contentType = retryResponse.headers.get(\"content-type\");\\n                  if (contentType && contentType.includes(\"text/html\")) {\\n                    document.documentElement.innerHTML = await retryResponse.text();\\n                  } else {\\n                    const blob = await retryResponse.blob();\\n                    const url = window.URL.createObjectURL(blob);\\n                    window.location.href = url;\\n                  }\\n                  return;\\n                } else {\\n                  throw new Error(`Payment failed: ${retryResponse.statusText}`);\\n                }\\n              } else {\\n                throw new Error(`Payment failed: ${response.statusText}`);\\n              }\\n            } catch {\\n              throw new Error(`Payment failed: ${response.statusText}`);\\n            }\\n          } else {\\n            throw new Error(`Request failed: ${response.status} ${response.statusText}`);\\n          }\\n        } catch (fetchError) {\\n          throw fetchError;\\n        }\\n      } catch (error) {\\n        statusDiv.textContent = error instanceof Error ? error.message : \"Payment failed\";\\n      }\\n    };\\n    connectWalletBtn.addEventListener(\"click\", handleWalletConnect);\\n    payButton.addEventListener(\"click\", handlePayment);\\n  }\\n  window.addEventListener(\"load\", () => {\\n    updatePaymentUI(window.x402);\\n    initializeApp().catch((error) => {\\n      console.error(\"Failed to initialize app:\", error);\\n      const statusDiv = document.getElementById(\"status\");\\n      if (statusDiv) {\\n        statusDiv.textContent = error instanceof Error ? error.message : \"Failed to initialize app\";\\n      }\\n    });\\n  });\\n})();\\n/*! Bundled license information:\\n\\n@noble/hashes/esm/utils.js:\\n@noble/hashes/esm/utils.js:\\n  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\\n\\n@noble/curves/esm/abstract/utils.js:\\n@noble/curves/esm/abstract/modular.js:\\n@noble/curves/esm/abstract/curve.js:\\n@noble/curves/esm/abstract/weierstrass.js:\\n@noble/curves/esm/_shortw_utils.js:\\n@noble/curves/esm/secp256k1.js:\\n  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\\n*/\\n</script></body></html>';\n\n// src/types/shared/evm/config.ts\nvar config = {\n  \"84532\": {\n    usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n    usdcName: \"USDC\"\n  },\n  \"8453\": {\n    usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    usdcName: \"USDC\"\n  },\n  \"43113\": {\n    usdcAddress: \"0x5425890298aed601595a70AB815c96711a31Bc65\",\n    usdcName: \"USD Coin\"\n  },\n  \"43114\": {\n    usdcAddress: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    usdcName: \"USDC\"\n  },\n  \"4689\": {\n    usdcAddress: \"0xcdf79194c6c285077a58da47641d4dbe51f63542\",\n    usdcName: \"Bridged USDC\"\n  }\n};\n\n// src/shared/paywall.ts\nfunction getPaywallHtml({\n  amount,\n  testnet,\n  paymentRequirements,\n  currentUrl\n}) {\n  const configScript = `\n  <script>\n    window.x402 = {\n      amount: ${amount},\n      paymentRequirements: ${JSON.stringify(paymentRequirements)},\n      testnet: ${testnet},\n      currentUrl: \"${currentUrl}\",\n      config: {\n        chainConfig: ${JSON.stringify(config)},\n      }\n    };\n    console.log('Payment details initialized:', window.x402.paymentDetails);\n  </script>`;\n  return PAYWALL_TEMPLATE.replace(\"</head>\", `${configScript}\n</head>`);\n}\n\n// src/shared/base64.ts\nfunction safeBase64Encode(data) {\n  if (typeof globalThis !== \"undefined\" && typeof globalThis.btoa === \"function\") {\n    return globalThis.btoa(data);\n  }\n  return Buffer.from(data).toString(\"base64\");\n}\nfunction safeBase64Decode(data) {\n  if (typeof globalThis !== \"undefined\" && typeof globalThis.atob === \"function\") {\n    return globalThis.atob(data);\n  }\n  return Buffer.from(data, \"base64\").toString(\"utf-8\");\n}\n\n// src/types/shared/money.ts\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar moneySchema = import_zod.z.union([import_zod.z.string().transform((x) => x.replace(/[^0-9.-]+/g, \"\")), import_zod.z.number()]).pipe(import_zod.z.coerce.number().min(1e-4).max(999999999));\n\n// src/types/shared/network.ts\nvar import_zod2 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar NetworkSchema = import_zod2.z.enum([\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n]);\nvar SupportedEVMNetworks = [\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n];\nvar EvmNetworkToChainId = /* @__PURE__ */ new Map([\n  [\"base-sepolia\", 84532],\n  [\"base\", 8453],\n  [\"avalanche-fuji\", 43113],\n  [\"avalanche\", 43114],\n  [\"iotex\", 4689]\n]);\nvar ChainIdToNetwork = Object.fromEntries(\n  SupportedEVMNetworks.map((network) => [EvmNetworkToChainId.get(network), network])\n);\n\n// src/types/shared/evm/wallet.ts\nvar import_viem = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nvar import_chains = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nvar import_accounts = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_cjs/accounts/index.js\");\n\n// src/shared/network.ts\nfunction getNetworkId(network) {\n  if (EvmNetworkToChainId.has(network)) {\n    return EvmNetworkToChainId.get(network);\n  }\n  throw new Error(`Unsupported network: ${network}`);\n}\n\n// src/types/verify/x402Specs.ts\nvar import_zod3 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar EvmMaxAtomicUnits = 18;\nvar EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\nvar MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\nvar HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\nvar EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\nvar schemes = [\"exact\"];\nvar x402Versions = [1];\nvar ErrorReasons = [\n  \"insufficient_funds\",\n  \"invalid_exact_evm_payload_authorization_valid_after\",\n  \"invalid_exact_evm_payload_authorization_valid_before\",\n  \"invalid_exact_evm_payload_authorization_value\",\n  \"invalid_exact_evm_payload_signature\",\n  \"invalid_exact_evm_payload_recipient_mismatch\",\n  \"invalid_network\",\n  \"invalid_payload\",\n  \"invalid_payment_requirements\",\n  \"invalid_scheme\",\n  \"unsupported_scheme\",\n  \"invalid_x402_version\",\n  \"invalid_transaction_state\",\n  \"unexpected_verify_error\",\n  \"unexpected_settle_error\"\n];\nvar isInteger = (value) => Number.isInteger(Number(value)) && Number(value) >= 0;\nvar hasMaxLength = (maxLength) => (value) => value.length <= maxLength;\nvar PaymentRequirementsSchema = import_zod3.z.object({\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  maxAmountRequired: import_zod3.z.string().refine(isInteger),\n  resource: import_zod3.z.string().url(),\n  description: import_zod3.z.string(),\n  mimeType: import_zod3.z.string(),\n  outputSchema: import_zod3.z.record(import_zod3.z.any()).optional(),\n  payTo: import_zod3.z.string().regex(MixedAddressRegex),\n  maxTimeoutSeconds: import_zod3.z.number().int(),\n  asset: import_zod3.z.string().regex(MixedAddressRegex),\n  extra: import_zod3.z.record(import_zod3.z.any()).optional()\n});\nvar ExactEvmPayloadAuthorizationSchema = import_zod3.z.object({\n  from: import_zod3.z.string().regex(EvmAddressRegex),\n  to: import_zod3.z.string().regex(EvmAddressRegex),\n  value: import_zod3.z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\n  validAfter: import_zod3.z.string().refine(isInteger),\n  validBefore: import_zod3.z.string().refine(isInteger),\n  nonce: import_zod3.z.string().regex(HexEncoded64ByteRegex)\n});\nvar ExactEvmPayloadSchema = import_zod3.z.object({\n  signature: import_zod3.z.string().regex(EvmSignatureRegex),\n  authorization: ExactEvmPayloadAuthorizationSchema\n});\nvar PaymentPayloadSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  payload: ExactEvmPayloadSchema\n});\nvar VerifyResponseSchema = import_zod3.z.object({\n  isValid: import_zod3.z.boolean(),\n  invalidReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional()\n});\nvar SettleResponseSchema = import_zod3.z.object({\n  success: import_zod3.z.boolean(),\n  errorReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional(),\n  transaction: import_zod3.z.string().regex(MixedAddressRegex),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindsResponseSchema = import_zod3.z.object({\n  kinds: import_zod3.z.array(SupportedPaymentKindSchema)\n});\n\n// src/types/verify/facilitator.ts\nvar import_zod4 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar facilitatorRequestSchema = import_zod4.z.object({\n  paymentHeader: import_zod4.z.string(),\n  paymentRequirements: PaymentRequirementsSchema\n});\n\n// src/shared/evm/usdc.ts\nfunction getUsdcAddressForChain(chainId) {\n  return config[chainId.toString()].usdcAddress;\n}\n\n// src/shared/middleware.ts\nfunction computeRoutePatterns(routes) {\n  const normalizedRoutes = Object.fromEntries(\n    Object.entries(routes).map(([pattern, value]) => [\n      pattern,\n      typeof value === \"string\" || typeof value === \"number\" ? { price: value, network: \"base-sepolia\" } : value\n    ])\n  );\n  return Object.entries(normalizedRoutes).map(([pattern, routeConfig]) => {\n    const [verb, path] = pattern.includes(\" \") ? pattern.split(/\\s+/) : [\"*\", pattern];\n    if (!path) {\n      throw new Error(`Invalid route pattern: ${pattern}`);\n    }\n    return {\n      verb: verb.toUpperCase(),\n      pattern: new RegExp(\n        `^${path.replace(/\\*/g, \".*?\").replace(/\\[([^\\]]+)\\]/g, \"[^/]+\").replace(/\\//g, \"\\\\/\")}$`,\n        \"i\"\n      ),\n      config: routeConfig\n    };\n  });\n}\nfunction findMatchingRoute(routePatterns, path, method) {\n  const matchingRoutes = routePatterns.filter(({ pattern, verb }) => {\n    const matchesPath = pattern.test(path);\n    const matchesVerb = verb === \"*\" || verb === method.toUpperCase();\n    return matchesPath && matchesVerb;\n  });\n  if (matchingRoutes.length === 0) {\n    return void 0;\n  }\n  const matchingRoute = matchingRoutes.reduce(\n    (a, b) => b.pattern.source.length > a.pattern.source.length ? b : a\n  );\n  return matchingRoute;\n}\nfunction getDefaultAsset(network) {\n  return {\n    address: getUsdcAddressForChain(getNetworkId(network)),\n    decimals: 6,\n    eip712: {\n      name: network === \"base\" ? \"USD Coin\" : network === \"iotex\" ? \"Bridged USDC\" : \"USDC\",\n      version: \"2\"\n    }\n  };\n}\nfunction processPriceToAtomicAmount(price, network) {\n  let maxAmountRequired;\n  let asset;\n  if (typeof price === \"string\" || typeof price === \"number\") {\n    const parsedAmount = moneySchema.safeParse(price);\n    if (!parsedAmount.success) {\n      return {\n        error: `Invalid price (price: ${price}). Must be in the form \"$3.10\", 0.10, \"0.001\", ${parsedAmount.error}`\n      };\n    }\n    const parsedUsdAmount = parsedAmount.data;\n    asset = getDefaultAsset(network);\n    maxAmountRequired = (parsedUsdAmount * 10 ** asset.decimals).toString();\n  } else {\n    maxAmountRequired = price.amount;\n    asset = price.asset;\n  }\n  return {\n    maxAmountRequired,\n    asset\n  };\n}\nfunction findMatchingPaymentRequirements(paymentRequirements, payment) {\n  return paymentRequirements.find(\n    (value) => value.scheme === payment.scheme && value.network === payment.network\n  );\n}\nfunction decodeXPaymentResponse(header) {\n  const decoded = safeBase64Decode(header);\n  return JSON.parse(decoded);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/shared/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/types/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/x402-axios/node_modules/x402/dist/cjs/types/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n  ChainIdToNetwork: () => ChainIdToNetwork,\n  ErrorReasons: () => ErrorReasons,\n  EvmNetworkToChainId: () => EvmNetworkToChainId,\n  ExactEvmPayloadAuthorizationSchema: () => ExactEvmPayloadAuthorizationSchema,\n  ExactEvmPayloadSchema: () => ExactEvmPayloadSchema,\n  NetworkSchema: () => NetworkSchema,\n  PaymentPayloadSchema: () => PaymentPayloadSchema,\n  PaymentRequirementsSchema: () => PaymentRequirementsSchema,\n  SettleResponseSchema: () => SettleResponseSchema,\n  SupportedEVMNetworks: () => SupportedEVMNetworks,\n  SupportedPaymentKindSchema: () => SupportedPaymentKindSchema,\n  SupportedPaymentKindsResponseSchema: () => SupportedPaymentKindsResponseSchema,\n  VerifyResponseSchema: () => VerifyResponseSchema,\n  evm: () => evm_exports,\n  facilitatorRequestSchema: () => facilitatorRequestSchema,\n  moneySchema: () => moneySchema,\n  schemes: () => schemes,\n  settleResponseFromHeader: () => settleResponseFromHeader,\n  settleResponseHeader: () => settleResponseHeader,\n  x402Versions: () => x402Versions\n});\nmodule.exports = __toCommonJS(types_exports);\n\n// src/types/shared/money.ts\nvar import_zod = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar moneySchema = import_zod.z.union([import_zod.z.string().transform((x) => x.replace(/[^0-9.-]+/g, \"\")), import_zod.z.number()]).pipe(import_zod.z.coerce.number().min(1e-4).max(999999999));\n\n// src/types/shared/network.ts\nvar import_zod2 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar NetworkSchema = import_zod2.z.enum([\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n]);\nvar SupportedEVMNetworks = [\n  \"base-sepolia\",\n  \"base\",\n  \"avalanche-fuji\",\n  \"avalanche\",\n  \"iotex\"\n];\nvar EvmNetworkToChainId = /* @__PURE__ */ new Map([\n  [\"base-sepolia\", 84532],\n  [\"base\", 8453],\n  [\"avalanche-fuji\", 43113],\n  [\"avalanche\", 43114],\n  [\"iotex\", 4689]\n]);\nvar ChainIdToNetwork = Object.fromEntries(\n  SupportedEVMNetworks.map((network) => [EvmNetworkToChainId.get(network), network])\n);\n\n// src/types/shared/evm/index.ts\nvar evm_exports = {};\n__export(evm_exports, {\n  authorizationPrimaryType: () => authorizationPrimaryType,\n  authorizationTypes: () => authorizationTypes,\n  config: () => config,\n  createClientAvalancheFuji: () => createClientAvalancheFuji,\n  createClientSepolia: () => createClientSepolia,\n  createSignerAvalancheFuji: () => createSignerAvalancheFuji,\n  createSignerSepolia: () => createSignerSepolia,\n  isAccount: () => isAccount,\n  isSignerWallet: () => isSignerWallet,\n  usdcABI: () => usdcABI\n});\n\n// src/types/shared/evm/config.ts\nvar config = {\n  \"84532\": {\n    usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n    usdcName: \"USDC\"\n  },\n  \"8453\": {\n    usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    usdcName: \"USDC\"\n  },\n  \"43113\": {\n    usdcAddress: \"0x5425890298aed601595a70AB815c96711a31Bc65\",\n    usdcName: \"USD Coin\"\n  },\n  \"43114\": {\n    usdcAddress: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n    usdcName: \"USDC\"\n  },\n  \"4689\": {\n    usdcAddress: \"0xcdf79194c6c285077a58da47641d4dbe51f63542\",\n    usdcName: \"Bridged USDC\"\n  }\n};\n\n// src/types/shared/evm/eip3009.ts\nvar authorizationTypes = {\n  TransferWithAuthorization: [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"validAfter\", type: \"uint256\" },\n    { name: \"validBefore\", type: \"uint256\" },\n    { name: \"nonce\", type: \"bytes32\" }\n  ]\n};\nvar authorizationPrimaryType = \"TransferWithAuthorization\";\n\n// src/types/shared/evm/erc20PermitABI.ts\nvar usdcABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\"\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"Approval\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"authorizer\",\n        type: \"address\"\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nonce\",\n        type: \"bytes32\"\n      }\n    ],\n    name: \"AuthorizationCanceled\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"authorizer\",\n        type: \"address\"\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nonce\",\n        type: \"bytes32\"\n      }\n    ],\n    name: \"AuthorizationUsed\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\"\n      }\n    ],\n    name: \"Blacklisted\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newBlacklister\",\n        type: \"address\"\n      }\n    ],\n    name: \"BlacklisterChanged\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"burner\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"Burn\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newMasterMinter\",\n        type: \"address\"\n      }\n    ],\n    name: \"MasterMinterChanged\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\"\n      },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"Mint\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minterAllowedAmount\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"MinterConfigured\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"oldMinter\",\n        type: \"address\"\n      }\n    ],\n    name: \"MinterRemoved\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\"\n      }\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\"\n  },\n  { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newAddress\",\n        type: \"address\"\n      }\n    ],\n    name: \"PauserChanged\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newRescuer\",\n        type: \"address\"\n      }\n    ],\n    name: \"RescuerChanged\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"Transfer\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\"\n      }\n    ],\n    name: \"UnBlacklisted\",\n    type: \"event\"\n  },\n  { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\n  {\n    inputs: [],\n    name: \"CANCEL_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" }\n    ],\n    name: \"authorizationState\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"blacklist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"blacklister\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\n    ],\n    name: \"cancelAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\n    ],\n    name: \"cancelAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"minter\", type: \"address\" },\n      { internalType: \"uint256\", name: \"minterAllowedAmount\", type: \"uint256\" }\n    ],\n    name: \"configureMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"currency\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"decrement\", type: \"uint256\" }\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"increment\", type: \"uint256\" }\n    ],\n    name: \"increaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"string\", name: \"tokenName\", type: \"string\" },\n      { internalType: \"string\", name: \"tokenSymbol\", type: \"string\" },\n      { internalType: \"string\", name: \"tokenCurrency\", type: \"string\" },\n      { internalType: \"uint8\", name: \"tokenDecimals\", type: \"uint8\" },\n      { internalType: \"address\", name: \"newMasterMinter\", type: \"address\" },\n      { internalType: \"address\", name: \"newPauser\", type: \"address\" },\n      { internalType: \"address\", name: \"newBlacklister\", type: \"address\" },\n      { internalType: \"address\", name: \"newOwner\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"newName\", type: \"string\" }],\n    name: \"initializeV2\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"lostAndFound\", type: \"address\" }],\n    name: \"initializeV2_1\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"accountsToBlacklist\",\n        type: \"address[]\"\n      },\n      { internalType: \"string\", name: \"newSymbol\", type: \"string\" }\n    ],\n    name: \"initializeV2_2\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"isBlacklisted\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"isMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"masterMinter\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }\n    ],\n    name: \"mint\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\n    name: \"minterAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"pauser\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\n    ],\n    name: \"receiveWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\n    ],\n    name: \"receiveWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\n    name: \"removeMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"tokenContract\",\n        type: \"address\"\n      },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" }\n    ],\n    name: \"rescueERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"rescuer\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" }\n    ],\n    name: \"transferWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" }\n    ],\n    name: \"transferWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"unBlacklist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_newBlacklister\", type: \"address\" }],\n    name: \"updateBlacklister\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_newMasterMinter\", type: \"address\" }],\n    name: \"updateMasterMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_newPauser\", type: \"address\" }],\n    name: \"updatePauser\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newRescuer\", type: \"address\" }],\n    name: \"updateRescuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"pure\",\n    type: \"function\"\n  }\n];\n\n// src/types/shared/evm/wallet.ts\nvar import_viem = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_cjs/index.js\");\nvar import_chains = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_cjs/chains/index.js\");\nvar import_accounts = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_cjs/accounts/index.js\");\nfunction createClientSepolia() {\n  return (0, import_viem.createPublicClient)({\n    chain: import_chains.baseSepolia,\n    transport: (0, import_viem.http)()\n  }).extend(import_viem.publicActions);\n}\nfunction createClientAvalancheFuji() {\n  return (0, import_viem.createPublicClient)({\n    chain: import_chains.avalancheFuji,\n    transport: (0, import_viem.http)()\n  }).extend(import_viem.publicActions);\n}\nfunction createSignerSepolia(privateKey) {\n  return (0, import_viem.createWalletClient)({\n    chain: import_chains.baseSepolia,\n    transport: (0, import_viem.http)(),\n    account: (0, import_accounts.privateKeyToAccount)(privateKey)\n  }).extend(import_viem.publicActions);\n}\nfunction createSignerAvalancheFuji(privateKey) {\n  return (0, import_viem.createWalletClient)({\n    chain: import_chains.avalancheFuji,\n    transport: (0, import_viem.http)(),\n    account: (0, import_accounts.privateKeyToAccount)(privateKey)\n  }).extend(import_viem.publicActions);\n}\nfunction isSignerWallet(wallet) {\n  return \"chain\" in wallet && \"transport\" in wallet;\n}\nfunction isAccount(wallet) {\n  return \"address\" in wallet && \"type\" in wallet;\n}\n\n// src/types/verify/x402Specs.ts\nvar import_zod3 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\nvar EvmMaxAtomicUnits = 18;\nvar EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\nvar MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\nvar HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\nvar EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\nvar schemes = [\"exact\"];\nvar x402Versions = [1];\nvar ErrorReasons = [\n  \"insufficient_funds\",\n  \"invalid_exact_evm_payload_authorization_valid_after\",\n  \"invalid_exact_evm_payload_authorization_valid_before\",\n  \"invalid_exact_evm_payload_authorization_value\",\n  \"invalid_exact_evm_payload_signature\",\n  \"invalid_exact_evm_payload_recipient_mismatch\",\n  \"invalid_network\",\n  \"invalid_payload\",\n  \"invalid_payment_requirements\",\n  \"invalid_scheme\",\n  \"unsupported_scheme\",\n  \"invalid_x402_version\",\n  \"invalid_transaction_state\",\n  \"unexpected_verify_error\",\n  \"unexpected_settle_error\"\n];\nvar isInteger = (value) => Number.isInteger(Number(value)) && Number(value) >= 0;\nvar hasMaxLength = (maxLength) => (value) => value.length <= maxLength;\nvar PaymentRequirementsSchema = import_zod3.z.object({\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  maxAmountRequired: import_zod3.z.string().refine(isInteger),\n  resource: import_zod3.z.string().url(),\n  description: import_zod3.z.string(),\n  mimeType: import_zod3.z.string(),\n  outputSchema: import_zod3.z.record(import_zod3.z.any()).optional(),\n  payTo: import_zod3.z.string().regex(MixedAddressRegex),\n  maxTimeoutSeconds: import_zod3.z.number().int(),\n  asset: import_zod3.z.string().regex(MixedAddressRegex),\n  extra: import_zod3.z.record(import_zod3.z.any()).optional()\n});\nvar ExactEvmPayloadAuthorizationSchema = import_zod3.z.object({\n  from: import_zod3.z.string().regex(EvmAddressRegex),\n  to: import_zod3.z.string().regex(EvmAddressRegex),\n  value: import_zod3.z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\n  validAfter: import_zod3.z.string().refine(isInteger),\n  validBefore: import_zod3.z.string().refine(isInteger),\n  nonce: import_zod3.z.string().regex(HexEncoded64ByteRegex)\n});\nvar ExactEvmPayloadSchema = import_zod3.z.object({\n  signature: import_zod3.z.string().regex(EvmSignatureRegex),\n  authorization: ExactEvmPayloadAuthorizationSchema\n});\nvar PaymentPayloadSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema,\n  payload: ExactEvmPayloadSchema\n});\nvar VerifyResponseSchema = import_zod3.z.object({\n  isValid: import_zod3.z.boolean(),\n  invalidReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional()\n});\nvar SettleResponseSchema = import_zod3.z.object({\n  success: import_zod3.z.boolean(),\n  errorReason: import_zod3.z.enum(ErrorReasons).optional(),\n  payer: import_zod3.z.string().regex(MixedAddressRegex).optional(),\n  transaction: import_zod3.z.string().regex(MixedAddressRegex),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindSchema = import_zod3.z.object({\n  x402Version: import_zod3.z.number().refine((val) => x402Versions.includes(val)),\n  scheme: import_zod3.z.enum(schemes),\n  network: NetworkSchema\n});\nvar SupportedPaymentKindsResponseSchema = import_zod3.z.object({\n  kinds: import_zod3.z.array(SupportedPaymentKindSchema)\n});\n\n// src/types/verify/facilitator.ts\nvar import_zod4 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/index.cjs\");\n\n// src/shared/base64.ts\nfunction safeBase64Encode(data) {\n  if (typeof globalThis !== \"undefined\" && typeof globalThis.btoa === \"function\") {\n    return globalThis.btoa(data);\n  }\n  return Buffer.from(data).toString(\"base64\");\n}\nfunction safeBase64Decode(data) {\n  if (typeof globalThis !== \"undefined\" && typeof globalThis.atob === \"function\") {\n    return globalThis.atob(data);\n  }\n  return Buffer.from(data, \"base64\").toString(\"utf-8\");\n}\n\n// src/types/verify/facilitator.ts\nvar facilitatorRequestSchema = import_zod4.z.object({\n  paymentHeader: import_zod4.z.string(),\n  paymentRequirements: PaymentRequirementsSchema\n});\nfunction settleResponseHeader(response) {\n  return safeBase64Encode(JSON.stringify(response));\n}\nfunction settleResponseFromHeader(header) {\n  const decoded = safeBase64Decode(header);\n  return JSON.parse(decoded);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/x402-axios/node_modules/x402/dist/cjs/types/index.js\n");

/***/ })

};
;